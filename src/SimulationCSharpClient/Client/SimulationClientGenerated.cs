//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.12.7.0 (NJsonSchema v9.10.6.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace SimulationCSharpClient.Client
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.7.0 (NJsonSchema v9.10.6.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface ISimulationClient
    {
        /// <returns>status response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Status> StatusAsync();
    
        /// <returns>status response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Status> StatusAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">If true, will only return archived items.  If false, will only return unarchived items.  If not provided, will return both archived and unarchived items.</param>
        /// <returns>Successfully retrieved list</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Material>> GetMaterialsAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">If true, will only return archived items.  If false, will only return unarchived items.  If not provided, will return both archived and unarchived items.</param>
        /// <returns>Successfully retrieved list</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Material>> GetMaterialsAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="material">Material to add</param>
        /// <returns>material response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Material> AddMaterialAsync(Material material);
    
        /// <param name="material">Material to add</param>
        /// <returns>material response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Material> AddMaterialAsync(Material material, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="lookup">csv file defining columns T(in Kelvins), Thermal Conductivity (W/m/K), Specific Heat (J/kg/K), Density (kg/m3), Thermal Conductivity Ratio, Density Ratio, Specific Heat Ratio</param>
        /// <param name="w0lookup">csv file defining columns Speed (mm/s), Power (W), W0 (m)</param>
        /// <param name="configuration">configuration defining material scientific specification, each field name must match expected material data template</param>
        /// <param name="customMaterialPost">json formatted data to generate the material -  schema /definitions/CustomMaterialPost</param>
        /// <returns>material response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Material> AddCustomMaterialAsync(FileParameter lookup, FileParameter w0lookup, FileParameter configuration, string customMaterialPost);
    
        /// <param name="lookup">csv file defining columns T(in Kelvins), Thermal Conductivity (W/m/K), Specific Heat (J/kg/K), Density (kg/m3), Thermal Conductivity Ratio, Density Ratio, Specific Heat Ratio</param>
        /// <param name="w0lookup">csv file defining columns Speed (mm/s), Power (W), W0 (m)</param>
        /// <param name="configuration">configuration defining material scientific specification, each field name must match expected material data template</param>
        /// <param name="customMaterialPost">json formatted data to generate the material -  schema /definitions/CustomMaterialPost</param>
        /// <returns>material response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Material> AddCustomMaterialAsync(FileParameter lookup, FileParameter w0lookup, FileParameter configuration, string customMaterialPost, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of material to fetch</param>
        /// <returns>material response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Material> GetMaterialAsync(int id);
    
        /// <param name="id">ID of material to fetch</param>
        /// <returns>material response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Material> GetMaterialAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">material identifier</param>
        /// <returns>Material was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Material> UpdateMaterialAsync(int id, Material material);
    
        /// <param name="id">material identifier</param>
        /// <returns>Material was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Material> UpdateMaterialAsync(int id, Material material, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of material to archive</param>
        /// <returns>material that has been archived with active field cleared</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ArchiveMaterialAsync(int id);
    
        /// <param name="id">ID of material to archive</param>
        /// <returns>material that has been archived with active field cleared</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task ArchiveMaterialAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">If true, will only return archived parts.  If false, will only return unarchived parts.  If not provided, will return both archived and unarchived parts.</param>
        /// <returns>Successfully retrieved list of machines</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Machine>> GetMachinesAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">If true, will only return archived parts.  If false, will only return unarchived parts.  If not provided, will return both archived and unarchived parts.</param>
        /// <returns>Successfully retrieved list of machines</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Machine>> GetMachinesAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>Machine was successfully added.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Machine> PostMachineAsync(Machine machine);
    
        /// <returns>Machine was successfully added.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Machine> PostMachineAsync(Machine machine, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">machine identifier</param>
        /// <returns>Successfully retrieved the requested machine</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Machine> GetMachineAsync(int id);
    
        /// <param name="id">machine identifier</param>
        /// <returns>Successfully retrieved the requested machine</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Machine> GetMachineAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">machine identifier</param>
        /// <returns>Machine was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Machine> PutMachineAsync(int id, Machine machine);
    
        /// <param name="id">machine identifier</param>
        /// <returns>Machine was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Machine> PutMachineAsync(int id, Machine machine, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">machine identifier</param>
        /// <returns>Machine was successfully archived.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Machine> ArchiveMachineAsync(int id);
    
        /// <param name="id">machine identifier</param>
        /// <returns>Machine was successfully archived.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Machine> ArchiveMachineAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">machine identifier</param>
        /// <returns>Machine was successfully unarchived.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Machine> UnarchiveMachineAsync(int id);
    
        /// <param name="id">machine identifier</param>
        /// <returns>Machine was successfully unarchived.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Machine> UnarchiveMachineAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="availability">If specified, will filter to only include parts with the given availability.  Uploaded - the part has been uploaded.  Processing - the part is being processed.  Available - the part was processed successfully and can be used in simulations.  Error - an error occurred, contact Ansys Support.</param>
        /// <param name="archived">If true, will only return archived parts.  If false, will only return unarchived parts.  If not provided, will return both archived and unarchived parts.</param>
        /// <returns>Successfully found the list of parts</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Part>> GetPartsAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, Availability? availability, bool? archived);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="availability">If specified, will filter to only include parts with the given availability.  Uploaded - the part has been uploaded.  Processing - the part is being processed.  Available - the part was processed successfully and can be used in simulations.  Error - an error occurred, contact Ansys Support.</param>
        /// <param name="archived">If true, will only return archived parts.  If false, will only return unarchived parts.  If not provided, will return both archived and unarchived parts.</param>
        /// <returns>Successfully found the list of parts</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Part>> GetPartsAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, Availability? availability, bool? archived, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="part">Part to add. First, call parts/geometryurl to get a PartUploadRequest object. PUT the STL file AmazonS3 with the signed URL. Use the s3Key property as the value of fileLocation. A POST with this object will execute the part processing service.</param>
        /// <returns>Successfully added a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Part> AddPartsAsync(PartPost part);
    
        /// <param name="part">Part to add. First, call parts/geometryurl to get a PartUploadRequest object. PUT the STL file AmazonS3 with the signed URL. Use the s3Key property as the value of fileLocation. A POST with this object will execute the part processing service.</param>
        /// <returns>Successfully added a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Part> AddPartsAsync(PartPost part, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>Successfully returns a part geometry url for a new part upload</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartUploadRequest> GetNewPartGeometryUploadUrlAsync();
    
        /// <returns>Successfully returns a part geometry url for a new part upload</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PartUploadRequest> GetNewPartGeometryUploadUrlAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of part to get</param>
        /// <returns>Successfully found a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Part> GetPartAsync(int id);
    
        /// <param name="id">ID of part to get</param>
        /// <returns>Successfully found a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Part> GetPartAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of part to update</param>
        /// <param name="partPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Part> PatchPartAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> partPatch);
    
        /// <param name="id">ID of part to update</param>
        /// <param name="partPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Part> PatchPartAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> partPatch, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of a part</param>
        /// <returns>Successfully deleted a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePartAsync(int id);
    
        /// <param name="id">ID of a part</param>
        /// <returns>Successfully deleted a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeletePartAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of a part</param>
        /// <param name="part">Part to update.</param>
        /// <returns>Successfully updated a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Part> UpdatePartAsync(int id, Part part);
    
        /// <param name="id">ID of a part</param>
        /// <param name="part">Part to update.</param>
        /// <returns>Successfully updated a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Part> UpdatePartAsync(int id, Part part, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully archived a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Part> ArchivePartAsync(int id);
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully archived a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Part> ArchivePartAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully returns a part geometry url</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartGeometryUrl> GetPartGeometryUrlAsync(int id);
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully returns a part geometry url</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PartGeometryUrl> GetPartGeometryUrlAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully returns a part geometry triangles</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>> GetPartGeometryAsync(int id);
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully returns a part geometry triangles</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>> GetPartGeometryAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <returns>Successfully found a support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartSupport> GetPartSupportAsync(int partId, int supportId);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <returns>Successfully found a support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PartSupport> GetPartSupportAsync(int partId, int supportId, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <param name="partSupportPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartSupport> PatchPartSupportAsync(int partId, int supportId, System.Collections.Generic.IEnumerable<PatchDocument> partSupportPatch);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <param name="partSupportPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PartSupport> PatchPartSupportAsync(int partId, int supportId, System.Collections.Generic.IEnumerable<PatchDocument> partSupportPatch, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <returns>Successfully deleted a part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePartSupportAsync(int partId, int supportId);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <returns>Successfully deleted a part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeletePartSupportAsync(int partId, int supportId, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <param name="partSupport">PartSupport to update.</param>
        /// <returns>Successfully updated a part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartSupport> UpdatePartSupportAsync(int partId, int supportId, PartSupport partSupport);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <param name="partSupport">PartSupport to update.</param>
        /// <returns>Successfully updated a part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PartSupport> UpdatePartSupportAsync(int partId, int supportId, PartSupport partSupport, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="partId">ID of part</param>
        /// <param name="partPost">Support to add. First, call parts/:partId/supports/geometryurl to get a PartUploadRequest object. PUT the STL file AmazonS3 with the signed URL. Use the s3Key property as the value of fileLocation. A POST with this object will execute the part processing service.</param>
        /// <returns>Successfully added a part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartSupport> PostPartSupportAsync(int partId, PartSupportPost partPost);
    
        /// <param name="partId">ID of part</param>
        /// <param name="partPost">Support to add. First, call parts/:partId/supports/geometryurl to get a PartUploadRequest object. PUT the STL file AmazonS3 with the signed URL. Use the s3Key property as the value of fileLocation. A POST with this object will execute the part processing service.</param>
        /// <returns>Successfully added a part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PartSupport> PostPartSupportAsync(int partId, PartSupportPost partPost, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="partId">ID of part</param>
        /// <returns>Successfully returns a part support geometry url for a new support upload</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartUploadRequest> SupportGeometryUploadUrlAsync(int partId);
    
        /// <param name="partId">ID of part</param>
        /// <returns>Successfully returns a part support geometry url for a new support upload</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PartUploadRequest> SupportGeometryUploadUrlAsync(int partId, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support</param>
        /// <returns>Successfully returns a support geometry url</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartGeometryUrl> PartSupportGeometryUrlAsync(int partId, int supportId);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support</param>
        /// <returns>Successfully returns a support geometry url</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PartGeometryUrl> PartSupportGeometryUrlAsync(int partId, int supportId, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support</param>
        /// <returns>Successfully returns support geometry triangles</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>> PartSupportGeometryAsync(int partId, int supportId);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support</param>
        /// <returns>Successfully returns support geometry triangles</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>> PartSupportGeometryAsync(int partId, int supportId, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of support to get</param>
        /// <returns>Successfully found a support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartSupport> GetPartSupportByIdAsync(int id);
    
        /// <param name="id">ID of support to get</param>
        /// <returns>Successfully found a support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PartSupport> GetPartSupportByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of support to update</param>
        /// <param name="supportPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched Support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartSupport> PatchSupportByIdAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> supportPatch);
    
        /// <param name="id">ID of support to update</param>
        /// <param name="supportPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched Support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PartSupport> PatchSupportByIdAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> supportPatch, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="partId">ID of part</param>
        /// <param name="partSupportConfigurationPost">Configuration to add.</param>
        /// <returns>Successfully added a part support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartSupportConfiguration> PostPartSupportConfigurationAsync(int partId, PartSupportConfigurationPost partSupportConfigurationPost);
    
        /// <param name="partId">ID of part</param>
        /// <param name="partSupportConfigurationPost">Configuration to add.</param>
        /// <returns>Successfully added a part support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PartSupportConfiguration> PostPartSupportConfigurationAsync(int partId, PartSupportConfigurationPost partSupportConfigurationPost, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportConfigurationId">ID of support configuration to get</param>
        /// <returns>Successfully found a support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartSupportConfiguration> GetPartSupportConfigurationAsync(int partId, int supportConfigurationId);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportConfigurationId">ID of support configuration to get</param>
        /// <returns>Successfully found a support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PartSupportConfiguration> GetPartSupportConfigurationAsync(int partId, int supportConfigurationId, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportConfigurationId">ID of support configuration to get</param>
        /// <param name="partSupportConfiguration">PartSupport configuration to update.</param>
        /// <returns>Successfully updated a part support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartSupportConfiguration> UpdatePartSupportConfigurationAsync(int partId, int supportConfigurationId, PartSupportConfiguration partSupportConfiguration);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportConfigurationId">ID of support configuration to get</param>
        /// <param name="partSupportConfiguration">PartSupport configuration to update.</param>
        /// <returns>Successfully updated a part support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PartSupportConfiguration> UpdatePartSupportConfigurationAsync(int partId, int supportConfigurationId, PartSupportConfiguration partSupportConfiguration, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportConfigurationId">ID of support configuration to get</param>
        /// <returns>Successfully archived a part support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PartSupportConfiguration> ArchivePartSupportConfigurationAsync(int partId, int supportConfigurationId);
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportConfigurationId">ID of support configuration to get</param>
        /// <returns>Successfully archived a part support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PartSupportConfiguration> ArchivePartSupportConfigurationAsync(int partId, int supportConfigurationId, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">True to get only archived simulations, False to get only unarchived simulations, leave the parameter off to get all simulation types</param>
        /// <param name="partId">returns simulations using the specified part id</param>
        /// <param name="supportId">returns simulations using the specified part support id</param>
        /// <param name="buildFileId">returns simulations using the specified build file id</param>
        /// <param name="isParent">returns either parent (true) or child (false) simulations</param>
        /// <param name="requiresLicense">returns simulations that require licence</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Simulation>> GetSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived, int? partId, int? supportId, int? buildFileId, bool? isParent, bool? requiresLicense);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">True to get only archived simulations, False to get only unarchived simulations, leave the parameter off to get all simulation types</param>
        /// <param name="partId">returns simulations using the specified part id</param>
        /// <param name="supportId">returns simulations using the specified part support id</param>
        /// <param name="buildFileId">returns simulations using the specified build file id</param>
        /// <param name="isParent">returns either parent (true) or child (false) simulations</param>
        /// <param name="requiresLicense">returns simulations that require licence</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Simulation>> GetSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived, int? partId, int? supportId, int? buildFileId, bool? isParent, bool? requiresLicense, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Simulation> GetSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Simulation> GetSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Successfully patched simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Simulation> PatchSimulationAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> simulationPatch);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Successfully patched simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Simulation> PatchSimulationAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> simulationPatch, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully requested cancellation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Part> RequestCancellationAsync(int id);
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully requested cancellation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Part> RequestCancellationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully set status to cancelled</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Part> ConfirmCancellationAsync(int id);
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully set status to cancelled</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Part> ConfirmCancellationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Simulation>> GetSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous2> status, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Simulation>> GetSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous2> status, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SimulationLog>> GetSimulationLogsAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SimulationLog>> GetSimulationLogsAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationLog">A log for a simulation</param>
        /// <returns>Successfully added the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SimulationLog> PostSimulationLogAsync(int id, SimulationLog simulationLog);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationLog">A log for a simulation</param>
        /// <returns>Successfully added the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<SimulationLog> PostSimulationLogAsync(int id, SimulationLog simulationLog, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SimulationOutput>> GetSimulationOutputsAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SimulationOutput>> GetSimulationOutputsAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationOutput">An output for a simulation</param>
        /// <returns>Successfully added the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SimulationOutput> PostSimulationOutputAsync(int id, SimulationOutput simulationOutput);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationOutput">An output for a simulation</param>
        /// <returns>Successfully added the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<SimulationOutput> PostSimulationOutputAsync(int id, SimulationOutput simulationOutput, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SimulationActivity>> GetSimulationActivitiesAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SimulationActivity>> GetSimulationActivitiesAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationActivity">An activity for a simulation.  An activity represents the execution of a worker in the simulation pipeline.</param>
        /// <returns>Successfully added the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SimulationActivity> PostSimulationActivityAsync(int id, SimulationActivity simulationActivity);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationActivity">An activity for a simulation.  An activity represents the execution of a worker in the simulation pipeline.</param>
        /// <returns>Successfully added the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<SimulationActivity> PostSimulationActivityAsync(int id, SimulationActivity simulationActivity, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="activityId">activity identifier</param>
        /// <returns>Successfully found the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SimulationActivity> GetSimulationActivityAsync(int id, int activityId);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="activityId">activity identifier</param>
        /// <returns>Successfully found the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<SimulationActivity> GetSimulationActivityAsync(int id, int activityId, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="activityId">activity identifier</param>
        /// <param name="simulationActivity">An activity for a simulation.  An activity represents the execution of a worker in the simulation pipeline.</param>
        /// <returns>Successfully updated the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SimulationActivity> PutSimulationActivityAsync(int id, int activityId, SimulationActivity simulationActivity);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="activityId">activity identifier</param>
        /// <param name="simulationActivity">An activity for a simulation.  An activity represents the execution of a worker in the simulation pipeline.</param>
        /// <returns>Successfully updated the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<SimulationActivity> PutSimulationActivityAsync(int id, int activityId, SimulationActivity simulationActivity, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="activityId">activity identifier</param>
        /// <param name="activityPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Successfully patched activity</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SimulationActivity> PatchActivityAsync(int id, int activityId, System.Collections.Generic.IEnumerable<PatchDocument> activityPatch);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="activityId">activity identifier</param>
        /// <param name="activityPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Successfully patched activity</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<SimulationActivity> PatchActivityAsync(int id, int activityId, System.Collections.Generic.IEnumerable<PatchDocument> activityPatch, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PorositySimulation>> GetPorositySimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous3> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PorositySimulation>> GetPorositySimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous3> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="porositySimulation">PorositySimulation fields required to add the simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PorositySimulation> PostPorositySimulationAsync(PorositySimulation porositySimulation);
    
        /// <param name="porositySimulation">PorositySimulation fields required to add the simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PorositySimulation> PostPorositySimulationAsync(PorositySimulation porositySimulation, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PorositySimulation> GetPorositySimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PorositySimulation> GetPorositySimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="porositySimulation">PorositySimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PorositySimulation> PutPorositySimulationAsync(int id, PorositySimulation porositySimulation);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="porositySimulation">PorositySimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PorositySimulation> PutPorositySimulationAsync(int id, PorositySimulation porositySimulation, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePorositySimulationAsync(int id);
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeletePorositySimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PorositySimulation>> GetPorositySimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous4> status, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PorositySimulation>> GetPorositySimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous4> status, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CancelPorositySimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task CancelPorositySimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartPorositySimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task StartPorositySimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SingleBeadSimulation>> GetSingleBeadSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous5> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SingleBeadSimulation>> GetSingleBeadSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous5> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="singleBeadSimulation">SingleBeadSimulation fields required to add the simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleBeadSimulation> PostSingleBeadSimulationAsync(SingleBeadSimulation singleBeadSimulation);
    
        /// <param name="singleBeadSimulation">SingleBeadSimulation fields required to add the simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<SingleBeadSimulation> PostSingleBeadSimulationAsync(SingleBeadSimulation singleBeadSimulation, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleBeadSimulation> GetSingleBeadSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<SingleBeadSimulation> GetSingleBeadSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="singleBeadSimulation">SingleBeadSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SingleBeadSimulation> PutSingleBeadSimulationAsync(int id, SingleBeadSimulation singleBeadSimulation);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="singleBeadSimulation">SingleBeadSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<SingleBeadSimulation> PutSingleBeadSimulationAsync(int id, SingleBeadSimulation singleBeadSimulation, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSingleBeadSimulationAsync(int id);
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteSingleBeadSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SingleBeadSimulation>> GetSingleBeadSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous6> status, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SingleBeadSimulation>> GetSingleBeadSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous6> status, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CancelSingleBeadSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task CancelSingleBeadSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartSingleBeadSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task StartSingleBeadSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ThermalSimulation>> GetThermalSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous7> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ThermalSimulation>> GetThermalSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous7> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="thermalSimulation">ThermalSimulation fields required to add a simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ThermalSimulation> PostThermalSimulationAsync(ThermalSimulation thermalSimulation);
    
        /// <param name="thermalSimulation">ThermalSimulation fields required to add a simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ThermalSimulation> PostThermalSimulationAsync(ThermalSimulation thermalSimulation, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ThermalSimulation> GetThermalSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ThermalSimulation> GetThermalSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="thermalSimulation">ThermalSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ThermalSimulation> PutThermalSimulationAsync(int id, ThermalSimulation thermalSimulation);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="thermalSimulation">ThermalSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ThermalSimulation> PutThermalSimulationAsync(int id, ThermalSimulation thermalSimulation, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteThermalSimulationAsync(int id);
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteThermalSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ThermalSimulation>> GetThermalSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous8> status, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ThermalSimulation>> GetThermalSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous8> status, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CancelThermalSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task CancelThermalSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartThermalSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task StartThermalSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ScanPatternSimulation>> GetScanPatternSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous9> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ScanPatternSimulation>> GetScanPatternSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous9> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="scanPatternSimulation">ScanPatternSimulation fields required to add a simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanPatternSimulation> PostScanPatternSimulationAsync(ScanPatternSimulation scanPatternSimulation);
    
        /// <param name="scanPatternSimulation">ScanPatternSimulation fields required to add a simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ScanPatternSimulation> PostScanPatternSimulationAsync(ScanPatternSimulation scanPatternSimulation, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanPatternSimulation> GetScanPatternSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ScanPatternSimulation> GetScanPatternSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="scanPatternSimulation">ScanPatternSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanPatternSimulation> PutScanPatternSimulationAsync(int id, ScanPatternSimulation scanPatternSimulation);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="scanPatternSimulation">ScanPatternSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<ScanPatternSimulation> PutScanPatternSimulationAsync(int id, ScanPatternSimulation scanPatternSimulation, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScanPatternSimulationAsync(int id);
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteScanPatternSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ScanPatternSimulation>> GetScanPatternSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous10> status, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ScanPatternSimulation>> GetScanPatternSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous10> status, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CancelScanPatternSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task CancelScanPatternSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartScanPatternSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task StartScanPatternSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AssumedStrainSimulation>> GetAssumedStrainSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous11> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AssumedStrainSimulation>> GetAssumedStrainSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous11> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="assumedStrainSimulation">AssumedStrainSimulation fields required to add a simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssumedStrainSimulation> PostAssumedStrainSimulationAsync(AssumedStrainSimulation assumedStrainSimulation);
    
        /// <param name="assumedStrainSimulation">AssumedStrainSimulation fields required to add a simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<AssumedStrainSimulation> PostAssumedStrainSimulationAsync(AssumedStrainSimulation assumedStrainSimulation, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssumedStrainSimulation> GetAssumedStrainSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<AssumedStrainSimulation> GetAssumedStrainSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="assumedStrainSimulation">AssumedStrainSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssumedStrainSimulation> PutAssumedStrainSimulationAsync(int id, AssumedStrainSimulation assumedStrainSimulation);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="assumedStrainSimulation">AssumedStrainSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<AssumedStrainSimulation> PutAssumedStrainSimulationAsync(int id, AssumedStrainSimulation assumedStrainSimulation, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAssumedStrainSimulationAsync(int id);
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteAssumedStrainSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AssumedStrainSimulation>> GetAssumedStrainSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous12> status, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AssumedStrainSimulation>> GetAssumedStrainSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous12> status, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CancelAssumedStrainSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task CancelAssumedStrainSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAssumedStrainSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task StartAssumedStrainSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully estimated time for assumed strain simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SimulationEstimate> AssumedStrainEstimateAsync(int id);
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully estimated time for assumed strain simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<SimulationEstimate> AssumedStrainEstimateAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">If true, will only return archived items.  If false, will only return unarchived items.  If not provided, will return both archived and unarchived items.</param>
        /// <param name="availability">availability value of build files to return, valid values: Uploaded, Processing, Available, Error</param>
        /// <returns>Successfully retrieved list of build files</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BuildFile>> GetBuildFilesAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived, System.Collections.Generic.IEnumerable<Anonymous13> availability);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">If true, will only return archived items.  If false, will only return unarchived items.  If not provided, will return both archived and unarchived items.</param>
        /// <param name="availability">availability value of build files to return, valid values: Uploaded, Processing, Available, Error</param>
        /// <returns>Successfully retrieved list of build files</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BuildFile>> GetBuildFilesAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived, System.Collections.Generic.IEnumerable<Anonymous13> availability, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="buildFilePost">build file to add</param>
        /// <returns>Build file that was successfully added</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildFile> PostBuildFileAsync(BuildFilePost buildFilePost);
    
        /// <param name="buildFilePost">build file to add</param>
        /// <returns>Build file that was successfully added</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BuildFile> PostBuildFileAsync(BuildFilePost buildFilePost, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>URL to use for uploading a ZIP file containing build file components</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildFileUploadUrlAsync();
    
        /// <returns>URL to use for uploading a ZIP file containing build file components</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<string> GetBuildFileUploadUrlAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of build file to retrieve</param>
        /// <returns>Retrieved build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildFile> GetBuildFileAsync(int id);
    
        /// <param name="id">ID of build file to retrieve</param>
        /// <returns>Retrieved build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BuildFile> GetBuildFileAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of build file to update</param>
        /// <param name="buildFile">build file to update</param>
        /// <returns>Updated build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildFile> UpdateBuildFileAsync(int id, BuildFile buildFile);
    
        /// <param name="id">ID of build file to update</param>
        /// <param name="buildFile">build file to update</param>
        /// <returns>Updated build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BuildFile> UpdateBuildFileAsync(int id, BuildFile buildFile, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of build file to update</param>
        /// <param name="buildFilePatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildFile> PatchBuildFileAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> buildFilePatch);
    
        /// <param name="id">ID of build file to update</param>
        /// <param name="buildFilePatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<BuildFile> PatchBuildFileAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> buildFilePatch, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of build file</param>
        /// <returns>Successfully deleted the build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBuildFileAsync(int id);
    
        /// <param name="id">ID of build file</param>
        /// <returns>Successfully deleted the build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteBuildFileAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of build file to retrieve geometry of</param>
        /// <returns>Part geometry as an array of triangles</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>> GetBuildFileGeometryAsync(int id);
    
        /// <param name="id">ID of build file to retrieve geometry of</param>
        /// <returns>Part geometry as an array of triangles</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>> GetBuildFileGeometryAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of build file to retrieve geometry of</param>
        /// <returns>URL to the part STL file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildFileGeometryUrlAsync(int id);
    
        /// <param name="id">ID of build file to retrieve geometry of</param>
        /// <returns>URL to the part STL file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<string> GetBuildFileGeometryUrlAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MicrostructureSimulation>> GetMicrostructureSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous14> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MicrostructureSimulation>> GetMicrostructureSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous14> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="microstructureSimulation">MicrostructureSimulation fields required to add the simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MicrostructureSimulation> PostMicrostructureSimulationAsync(MicrostructureSimulation microstructureSimulation);
    
        /// <param name="microstructureSimulation">MicrostructureSimulation fields required to add the simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<MicrostructureSimulation> PostMicrostructureSimulationAsync(MicrostructureSimulation microstructureSimulation, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MicrostructureSimulation> GetMicrostructureSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<MicrostructureSimulation> GetMicrostructureSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="microstructureSimulation">MicrostructureSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MicrostructureSimulation> PutMicrostructureSimulationAsync(int id, MicrostructureSimulation microstructureSimulation);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="microstructureSimulation">MicrostructureSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<MicrostructureSimulation> PutMicrostructureSimulationAsync(int id, MicrostructureSimulation microstructureSimulation, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteMicrostructureSimulationAsync(int id);
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteMicrostructureSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">ID of microstructure simulation entity that owns the sensor</param>
        /// <param name="sensorId">ID of microstructure sensor to update</param>
        /// <param name="microstructureSensorPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched microstructure sensor</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MicrostructureSensor> PatchMicrostructureSensorAsync(int id, int sensorId, System.Collections.Generic.IEnumerable<PatchDocument> microstructureSensorPatch);
    
        /// <param name="id">ID of microstructure simulation entity that owns the sensor</param>
        /// <param name="sensorId">ID of microstructure sensor to update</param>
        /// <param name="microstructureSensorPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched microstructure sensor</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<MicrostructureSensor> PatchMicrostructureSensorAsync(int id, int sensorId, System.Collections.Generic.IEnumerable<PatchDocument> microstructureSensorPatch, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MicrostructureSimulation>> GetMicrostructureSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous15> status, System.Collections.Generic.IEnumerable<string> sort);
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MicrostructureSimulation>> GetMicrostructureSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous15> status, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CancelMicrostructureSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task CancelMicrostructureSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartMicrostructureSimulationAsync(int id);
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task StartMicrostructureSimulationAsync(int id, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.7.0 (NJsonSchema v9.10.6.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SimulationClient : ISimulationClient
    {
        private string _baseUrl = "https://3dsim.cloud.tyk.io/simulation-api";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public SimulationClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
    		_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
    	}
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <returns>status response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Status> StatusAsync()
        {
            return StatusAsync(System.Threading.CancellationToken.None);
        }
    
        /// <returns>status response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Status> StatusAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/status");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Status); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Status>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Status);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">If true, will only return archived items.  If false, will only return unarchived items.  If not provided, will return both archived and unarchived items.</param>
        /// <returns>Successfully retrieved list</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Material>> GetMaterialsAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived)
        {
            return GetMaterialsAsync(organizationId, offset, limit, sort, archived, System.Threading.CancellationToken.None);
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">If true, will only return archived items.  If false, will only return unarchived items.  If not provided, will return both archived and unarchived items.</param>
        /// <returns>Successfully retrieved list</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Material>> GetMaterialsAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived, System.Threading.CancellationToken cancellationToken)
        {
            if (organizationId == null)
                throw new System.ArgumentNullException("organizationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/materials?");
            urlBuilder_.Append("organizationId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(organizationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (archived != null) urlBuilder_.Append("archived=").Append(System.Uri.EscapeDataString(System.Convert.ToString(archived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Material>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Material>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Material>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="material">Material to add</param>
        /// <returns>material response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Material> AddMaterialAsync(Material material)
        {
            return AddMaterialAsync(material, System.Threading.CancellationToken.None);
        }
    
        /// <param name="material">Material to add</param>
        /// <returns>material response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Material> AddMaterialAsync(Material material, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/materials");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(material, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Material); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Material>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Material);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="lookup">csv file defining columns T(in Kelvins), Thermal Conductivity (W/m/K), Specific Heat (J/kg/K), Density (kg/m3), Thermal Conductivity Ratio, Density Ratio, Specific Heat Ratio</param>
        /// <param name="w0lookup">csv file defining columns Speed (mm/s), Power (W), W0 (m)</param>
        /// <param name="configuration">configuration defining material scientific specification, each field name must match expected material data template</param>
        /// <param name="customMaterialPost">json formatted data to generate the material -  schema /definitions/CustomMaterialPost</param>
        /// <returns>material response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Material> AddCustomMaterialAsync(FileParameter lookup, FileParameter w0lookup, FileParameter configuration, string customMaterialPost)
        {
            return AddCustomMaterialAsync(lookup, w0lookup, configuration, customMaterialPost, System.Threading.CancellationToken.None);
        }
    
        /// <param name="lookup">csv file defining columns T(in Kelvins), Thermal Conductivity (W/m/K), Specific Heat (J/kg/K), Density (kg/m3), Thermal Conductivity Ratio, Density Ratio, Specific Heat Ratio</param>
        /// <param name="w0lookup">csv file defining columns Speed (mm/s), Power (W), W0 (m)</param>
        /// <param name="configuration">configuration defining material scientific specification, each field name must match expected material data template</param>
        /// <param name="customMaterialPost">json formatted data to generate the material -  schema /definitions/CustomMaterialPost</param>
        /// <returns>material response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Material> AddCustomMaterialAsync(FileParameter lookup, FileParameter w0lookup, FileParameter configuration, string customMaterialPost, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/materials/custom");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (lookup == null)
                        throw new System.ArgumentNullException("lookup");
                    else
                        content_.Add(new System.Net.Http.StreamContent(lookup.Data), "lookup", lookup.FileName ?? "lookup");
                    if (w0lookup == null)
                        throw new System.ArgumentNullException("w0lookup");
                    else
                        content_.Add(new System.Net.Http.StreamContent(w0lookup.Data), "w0lookup", w0lookup.FileName ?? "w0lookup");
                    if (configuration == null)
                        throw new System.ArgumentNullException("configuration");
                    else
                        content_.Add(new System.Net.Http.StreamContent(configuration.Data), "configuration", configuration.FileName ?? "configuration");
                    if (customMaterialPost == null)
                        throw new System.ArgumentNullException("customMaterialPost");
                    else
                        content_.Add(new System.Net.Http.StringContent(System.Convert.ToString(customMaterialPost, System.Globalization.CultureInfo.InvariantCulture)), "customMaterialPost");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Material); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Material>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Material);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of material to fetch</param>
        /// <returns>material response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Material> GetMaterialAsync(int id)
        {
            return GetMaterialAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of material to fetch</param>
        /// <returns>material response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Material> GetMaterialAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/materials/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Material); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Material>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Material not found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Material);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">material identifier</param>
        /// <returns>Material was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Material> UpdateMaterialAsync(int id, Material material)
        {
            return UpdateMaterialAsync(id, material, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">material identifier</param>
        /// <returns>Material was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Material> UpdateMaterialAsync(int id, Material material, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/materials/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(material, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Material); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Material>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Material not found (id invalid)", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Material);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of material to archive</param>
        /// <returns>material that has been archived with active field cleared</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ArchiveMaterialAsync(int id)
        {
            return ArchiveMaterialAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of material to archive</param>
        /// <returns>material that has been archived with active field cleared</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task ArchiveMaterialAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/materials/{id}/archive");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Material not found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">If true, will only return archived parts.  If false, will only return unarchived parts.  If not provided, will return both archived and unarchived parts.</param>
        /// <returns>Successfully retrieved list of machines</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Machine>> GetMachinesAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived)
        {
            return GetMachinesAsync(organizationId, offset, limit, sort, archived, System.Threading.CancellationToken.None);
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">If true, will only return archived parts.  If false, will only return unarchived parts.  If not provided, will return both archived and unarchived parts.</param>
        /// <returns>Successfully retrieved list of machines</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Machine>> GetMachinesAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived, System.Threading.CancellationToken cancellationToken)
        {
            if (organizationId == null)
                throw new System.ArgumentNullException("organizationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/machines?");
            urlBuilder_.Append("organizationId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(organizationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (archived != null) urlBuilder_.Append("archived=").Append(System.Uri.EscapeDataString(System.Convert.ToString(archived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Machine>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Machine>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Machine>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <returns>Machine was successfully added.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Machine> PostMachineAsync(Machine machine)
        {
            return PostMachineAsync(machine, System.Threading.CancellationToken.None);
        }
    
        /// <returns>Machine was successfully added.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Machine> PostMachineAsync(Machine machine, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/machines");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(machine, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Machine); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Machine>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Machine);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">machine identifier</param>
        /// <returns>Successfully retrieved the requested machine</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Machine> GetMachineAsync(int id)
        {
            return GetMachineAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">machine identifier</param>
        /// <returns>Successfully retrieved the requested machine</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Machine> GetMachineAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/machines/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Machine); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Machine>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Machine not found (id invalid)", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Machine);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">machine identifier</param>
        /// <returns>Machine was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Machine> PutMachineAsync(int id, Machine machine)
        {
            return PutMachineAsync(id, machine, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">machine identifier</param>
        /// <returns>Machine was successfully updated.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Machine> PutMachineAsync(int id, Machine machine, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/machines/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(machine, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Machine); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Machine>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Machine not found (id invalid)", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Machine);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">machine identifier</param>
        /// <returns>Machine was successfully archived.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Machine> ArchiveMachineAsync(int id)
        {
            return ArchiveMachineAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">machine identifier</param>
        /// <returns>Machine was successfully archived.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Machine> ArchiveMachineAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/machines/{id}/archive");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Machine); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Machine>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Machine not found (id invalid)", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Machine);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">machine identifier</param>
        /// <returns>Machine was successfully unarchived.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Machine> UnarchiveMachineAsync(int id)
        {
            return UnarchiveMachineAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">machine identifier</param>
        /// <returns>Machine was successfully unarchived.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Machine> UnarchiveMachineAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/machines/{id}/unarchive");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Machine); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Machine>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Machine not found (id invalid)", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Machine);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="availability">If specified, will filter to only include parts with the given availability.  Uploaded - the part has been uploaded.  Processing - the part is being processed.  Available - the part was processed successfully and can be used in simulations.  Error - an error occurred, contact Ansys Support.</param>
        /// <param name="archived">If true, will only return archived parts.  If false, will only return unarchived parts.  If not provided, will return both archived and unarchived parts.</param>
        /// <returns>Successfully found the list of parts</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Part>> GetPartsAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, Availability? availability, bool? archived)
        {
            return GetPartsAsync(organizationId, offset, limit, sort, availability, archived, System.Threading.CancellationToken.None);
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="availability">If specified, will filter to only include parts with the given availability.  Uploaded - the part has been uploaded.  Processing - the part is being processed.  Available - the part was processed successfully and can be used in simulations.  Error - an error occurred, contact Ansys Support.</param>
        /// <param name="archived">If true, will only return archived parts.  If false, will only return unarchived parts.  If not provided, will return both archived and unarchived parts.</param>
        /// <returns>Successfully found the list of parts</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Part>> GetPartsAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, Availability? availability, bool? archived, System.Threading.CancellationToken cancellationToken)
        {
            if (organizationId == null)
                throw new System.ArgumentNullException("organizationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts?");
            urlBuilder_.Append("organizationId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(organizationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (availability != null) urlBuilder_.Append("availability=").Append(System.Uri.EscapeDataString(System.Convert.ToString(availability, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (archived != null) urlBuilder_.Append("archived=").Append(System.Uri.EscapeDataString(System.Convert.ToString(archived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Part>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Part>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Part>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="part">Part to add. First, call parts/geometryurl to get a PartUploadRequest object. PUT the STL file AmazonS3 with the signed URL. Use the s3Key property as the value of fileLocation. A POST with this object will execute the part processing service.</param>
        /// <returns>Successfully added a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Part> AddPartsAsync(PartPost part)
        {
            return AddPartsAsync(part, System.Threading.CancellationToken.None);
        }
    
        /// <param name="part">Part to add. First, call parts/geometryurl to get a PartUploadRequest object. PUT the STL file AmazonS3 with the signed URL. Use the s3Key property as the value of fileLocation. A POST with this object will execute the part processing service.</param>
        /// <returns>Successfully added a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Part> AddPartsAsync(PartPost part, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(part, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Part); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Part>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Part);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <returns>Successfully returns a part geometry url for a new part upload</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartUploadRequest> GetNewPartGeometryUploadUrlAsync()
        {
            return GetNewPartGeometryUploadUrlAsync(System.Threading.CancellationToken.None);
        }
    
        /// <returns>Successfully returns a part geometry url for a new part upload</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PartUploadRequest> GetNewPartGeometryUploadUrlAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/geometryuploadurl");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PartUploadRequest); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PartUploadRequest>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PartUploadRequest);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of part to get</param>
        /// <returns>Successfully found a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Part> GetPartAsync(int id)
        {
            return GetPartAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of part to get</param>
        /// <returns>Successfully found a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Part> GetPartAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Part); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Part>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Part);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of part to update</param>
        /// <param name="partPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Part> PatchPartAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> partPatch)
        {
            return PatchPartAsync(id, partPatch, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of part to update</param>
        /// <param name="partPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Part> PatchPartAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> partPatch, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(partPatch, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Part); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Part>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Part not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Part);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of a part</param>
        /// <returns>Successfully deleted a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeletePartAsync(int id)
        {
            return DeletePartAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of a part</param>
        /// <returns>Successfully deleted a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DeletePartAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of a part</param>
        /// <param name="part">Part to update.</param>
        /// <returns>Successfully updated a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Part> UpdatePartAsync(int id, Part part)
        {
            return UpdatePartAsync(id, part, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of a part</param>
        /// <param name="part">Part to update.</param>
        /// <returns>Successfully updated a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Part> UpdatePartAsync(int id, Part part, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(part, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Part); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Part>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Part);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully archived a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Part> ArchivePartAsync(int id)
        {
            return ArchivePartAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully archived a part</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Part> ArchivePartAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{id}/archive");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Part); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Part>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Part);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully returns a part geometry url</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartGeometryUrl> GetPartGeometryUrlAsync(int id)
        {
            return GetPartGeometryUrlAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully returns a part geometry url</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PartGeometryUrl> GetPartGeometryUrlAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{id}/geometryurl");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PartGeometryUrl); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PartGeometryUrl>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PartGeometryUrl);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully returns a part geometry triangles</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>> GetPartGeometryAsync(int id)
        {
            return GetPartGeometryAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully returns a part geometry triangles</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>> GetPartGeometryAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{id}/geometry");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <returns>Successfully found a support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartSupport> GetPartSupportAsync(int partId, int supportId)
        {
            return GetPartSupportAsync(partId, supportId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <returns>Successfully found a support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PartSupport> GetPartSupportAsync(int partId, int supportId, System.Threading.CancellationToken cancellationToken)
        {
            if (partId == null)
                throw new System.ArgumentNullException("partId");
    
            if (supportId == null)
                throw new System.ArgumentNullException("supportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{partId}/supports/{supportId}");
            urlBuilder_.Replace("{partId}", System.Uri.EscapeDataString(System.Convert.ToString(partId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{supportId}", System.Uri.EscapeDataString(System.Convert.ToString(supportId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PartSupport); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupport>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PartSupport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <param name="partSupportPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartSupport> PatchPartSupportAsync(int partId, int supportId, System.Collections.Generic.IEnumerable<PatchDocument> partSupportPatch)
        {
            return PatchPartSupportAsync(partId, supportId, partSupportPatch, System.Threading.CancellationToken.None);
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <param name="partSupportPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PartSupport> PatchPartSupportAsync(int partId, int supportId, System.Collections.Generic.IEnumerable<PatchDocument> partSupportPatch, System.Threading.CancellationToken cancellationToken)
        {
            if (partId == null)
                throw new System.ArgumentNullException("partId");
    
            if (supportId == null)
                throw new System.ArgumentNullException("supportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{partId}/supports/{supportId}");
            urlBuilder_.Replace("{partId}", System.Uri.EscapeDataString(System.Convert.ToString(partId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{supportId}", System.Uri.EscapeDataString(System.Convert.ToString(supportId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(partSupportPatch, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PartSupport); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupport>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Part not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PartSupport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <returns>Successfully deleted a part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeletePartSupportAsync(int partId, int supportId)
        {
            return DeletePartSupportAsync(partId, supportId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <returns>Successfully deleted a part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DeletePartSupportAsync(int partId, int supportId, System.Threading.CancellationToken cancellationToken)
        {
            if (partId == null)
                throw new System.ArgumentNullException("partId");
    
            if (supportId == null)
                throw new System.ArgumentNullException("supportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{partId}/supports/{supportId}");
            urlBuilder_.Replace("{partId}", System.Uri.EscapeDataString(System.Convert.ToString(partId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{supportId}", System.Uri.EscapeDataString(System.Convert.ToString(supportId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <param name="partSupport">PartSupport to update.</param>
        /// <returns>Successfully updated a part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartSupport> UpdatePartSupportAsync(int partId, int supportId, PartSupport partSupport)
        {
            return UpdatePartSupportAsync(partId, supportId, partSupport, System.Threading.CancellationToken.None);
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support to get</param>
        /// <param name="partSupport">PartSupport to update.</param>
        /// <returns>Successfully updated a part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PartSupport> UpdatePartSupportAsync(int partId, int supportId, PartSupport partSupport, System.Threading.CancellationToken cancellationToken)
        {
            if (partId == null)
                throw new System.ArgumentNullException("partId");
    
            if (supportId == null)
                throw new System.ArgumentNullException("supportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{partId}/supports/{supportId}");
            urlBuilder_.Replace("{partId}", System.Uri.EscapeDataString(System.Convert.ToString(partId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{supportId}", System.Uri.EscapeDataString(System.Convert.ToString(supportId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(partSupport, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PartSupport); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupport>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PartSupport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="partPost">Support to add. First, call parts/:partId/supports/geometryurl to get a PartUploadRequest object. PUT the STL file AmazonS3 with the signed URL. Use the s3Key property as the value of fileLocation. A POST with this object will execute the part processing service.</param>
        /// <returns>Successfully added a part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartSupport> PostPartSupportAsync(int partId, PartSupportPost partPost)
        {
            return PostPartSupportAsync(partId, partPost, System.Threading.CancellationToken.None);
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="partPost">Support to add. First, call parts/:partId/supports/geometryurl to get a PartUploadRequest object. PUT the STL file AmazonS3 with the signed URL. Use the s3Key property as the value of fileLocation. A POST with this object will execute the part processing service.</param>
        /// <returns>Successfully added a part support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PartSupport> PostPartSupportAsync(int partId, PartSupportPost partPost, System.Threading.CancellationToken cancellationToken)
        {
            if (partId == null)
                throw new System.ArgumentNullException("partId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{partId}/supports");
            urlBuilder_.Replace("{partId}", System.Uri.EscapeDataString(System.Convert.ToString(partId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(partPost, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PartSupport); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupport>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PartSupport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="partId">ID of part</param>
        /// <returns>Successfully returns a part support geometry url for a new support upload</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartUploadRequest> SupportGeometryUploadUrlAsync(int partId)
        {
            return SupportGeometryUploadUrlAsync(partId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="partId">ID of part</param>
        /// <returns>Successfully returns a part support geometry url for a new support upload</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PartUploadRequest> SupportGeometryUploadUrlAsync(int partId, System.Threading.CancellationToken cancellationToken)
        {
            if (partId == null)
                throw new System.ArgumentNullException("partId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{partId}/supports/geometryuploadurl");
            urlBuilder_.Replace("{partId}", System.Uri.EscapeDataString(System.Convert.ToString(partId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PartUploadRequest); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PartUploadRequest>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PartUploadRequest);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support</param>
        /// <returns>Successfully returns a support geometry url</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartGeometryUrl> PartSupportGeometryUrlAsync(int partId, int supportId)
        {
            return PartSupportGeometryUrlAsync(partId, supportId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support</param>
        /// <returns>Successfully returns a support geometry url</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PartGeometryUrl> PartSupportGeometryUrlAsync(int partId, int supportId, System.Threading.CancellationToken cancellationToken)
        {
            if (partId == null)
                throw new System.ArgumentNullException("partId");
    
            if (supportId == null)
                throw new System.ArgumentNullException("supportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{partId}/supports/{supportId}/geometryurl");
            urlBuilder_.Replace("{partId}", System.Uri.EscapeDataString(System.Convert.ToString(partId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{supportId}", System.Uri.EscapeDataString(System.Convert.ToString(supportId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PartGeometryUrl); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PartGeometryUrl>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PartGeometryUrl);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support</param>
        /// <returns>Successfully returns support geometry triangles</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>> PartSupportGeometryAsync(int partId, int supportId)
        {
            return PartSupportGeometryAsync(partId, supportId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportId">ID of support</param>
        /// <returns>Successfully returns support geometry triangles</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>> PartSupportGeometryAsync(int partId, int supportId, System.Threading.CancellationToken cancellationToken)
        {
            if (partId == null)
                throw new System.ArgumentNullException("partId");
    
            if (supportId == null)
                throw new System.ArgumentNullException("supportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{partId}/supports/{supportId}/geometry");
            urlBuilder_.Replace("{partId}", System.Uri.EscapeDataString(System.Convert.ToString(partId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{supportId}", System.Uri.EscapeDataString(System.Convert.ToString(supportId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of support to get</param>
        /// <returns>Successfully found a support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartSupport> GetPartSupportByIdAsync(int id)
        {
            return GetPartSupportByIdAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of support to get</param>
        /// <returns>Successfully found a support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PartSupport> GetPartSupportByIdAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/supports/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PartSupport); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupport>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PartSupport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of support to update</param>
        /// <param name="supportPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched Support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartSupport> PatchSupportByIdAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> supportPatch)
        {
            return PatchSupportByIdAsync(id, supportPatch, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of support to update</param>
        /// <param name="supportPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched Support</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PartSupport> PatchSupportByIdAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> supportPatch, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/supports/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(supportPatch, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PartSupport); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupport>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Support not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PartSupport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="partSupportConfigurationPost">Configuration to add.</param>
        /// <returns>Successfully added a part support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartSupportConfiguration> PostPartSupportConfigurationAsync(int partId, PartSupportConfigurationPost partSupportConfigurationPost)
        {
            return PostPartSupportConfigurationAsync(partId, partSupportConfigurationPost, System.Threading.CancellationToken.None);
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="partSupportConfigurationPost">Configuration to add.</param>
        /// <returns>Successfully added a part support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PartSupportConfiguration> PostPartSupportConfigurationAsync(int partId, PartSupportConfigurationPost partSupportConfigurationPost, System.Threading.CancellationToken cancellationToken)
        {
            if (partId == null)
                throw new System.ArgumentNullException("partId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{partId}/supportconfigurations");
            urlBuilder_.Replace("{partId}", System.Uri.EscapeDataString(System.Convert.ToString(partId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(partSupportConfigurationPost, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PartSupportConfiguration); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupportConfiguration>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PartSupportConfiguration);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportConfigurationId">ID of support configuration to get</param>
        /// <returns>Successfully found a support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartSupportConfiguration> GetPartSupportConfigurationAsync(int partId, int supportConfigurationId)
        {
            return GetPartSupportConfigurationAsync(partId, supportConfigurationId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportConfigurationId">ID of support configuration to get</param>
        /// <returns>Successfully found a support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PartSupportConfiguration> GetPartSupportConfigurationAsync(int partId, int supportConfigurationId, System.Threading.CancellationToken cancellationToken)
        {
            if (partId == null)
                throw new System.ArgumentNullException("partId");
    
            if (supportConfigurationId == null)
                throw new System.ArgumentNullException("supportConfigurationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{partId}/supportconfigurations/{supportConfigurationId}");
            urlBuilder_.Replace("{partId}", System.Uri.EscapeDataString(System.Convert.ToString(partId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{supportConfigurationId}", System.Uri.EscapeDataString(System.Convert.ToString(supportConfigurationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PartSupportConfiguration); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupportConfiguration>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PartSupportConfiguration);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportConfigurationId">ID of support configuration to get</param>
        /// <param name="partSupportConfiguration">PartSupport configuration to update.</param>
        /// <returns>Successfully updated a part support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartSupportConfiguration> UpdatePartSupportConfigurationAsync(int partId, int supportConfigurationId, PartSupportConfiguration partSupportConfiguration)
        {
            return UpdatePartSupportConfigurationAsync(partId, supportConfigurationId, partSupportConfiguration, System.Threading.CancellationToken.None);
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportConfigurationId">ID of support configuration to get</param>
        /// <param name="partSupportConfiguration">PartSupport configuration to update.</param>
        /// <returns>Successfully updated a part support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PartSupportConfiguration> UpdatePartSupportConfigurationAsync(int partId, int supportConfigurationId, PartSupportConfiguration partSupportConfiguration, System.Threading.CancellationToken cancellationToken)
        {
            if (partId == null)
                throw new System.ArgumentNullException("partId");
    
            if (supportConfigurationId == null)
                throw new System.ArgumentNullException("supportConfigurationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{partId}/supportconfigurations/{supportConfigurationId}");
            urlBuilder_.Replace("{partId}", System.Uri.EscapeDataString(System.Convert.ToString(partId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{supportConfigurationId}", System.Uri.EscapeDataString(System.Convert.ToString(supportConfigurationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(partSupportConfiguration, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PartSupportConfiguration); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupportConfiguration>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PartSupportConfiguration);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportConfigurationId">ID of support configuration to get</param>
        /// <returns>Successfully archived a part support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartSupportConfiguration> ArchivePartSupportConfigurationAsync(int partId, int supportConfigurationId)
        {
            return ArchivePartSupportConfigurationAsync(partId, supportConfigurationId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="partId">ID of part</param>
        /// <param name="supportConfigurationId">ID of support configuration to get</param>
        /// <returns>Successfully archived a part support configuration</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PartSupportConfiguration> ArchivePartSupportConfigurationAsync(int partId, int supportConfigurationId, System.Threading.CancellationToken cancellationToken)
        {
            if (partId == null)
                throw new System.ArgumentNullException("partId");
    
            if (supportConfigurationId == null)
                throw new System.ArgumentNullException("supportConfigurationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/parts/{partId}/supportconfigurations/{supportConfigurationId}/archive");
            urlBuilder_.Replace("{partId}", System.Uri.EscapeDataString(System.Convert.ToString(partId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{supportConfigurationId}", System.Uri.EscapeDataString(System.Convert.ToString(supportConfigurationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PartSupportConfiguration); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupportConfiguration>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PartSupportConfiguration);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">True to get only archived simulations, False to get only unarchived simulations, leave the parameter off to get all simulation types</param>
        /// <param name="partId">returns simulations using the specified part id</param>
        /// <param name="supportId">returns simulations using the specified part support id</param>
        /// <param name="buildFileId">returns simulations using the specified build file id</param>
        /// <param name="isParent">returns either parent (true) or child (false) simulations</param>
        /// <param name="requiresLicense">returns simulations that require licence</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Simulation>> GetSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived, int? partId, int? supportId, int? buildFileId, bool? isParent, bool? requiresLicense)
        {
            return GetSimulationsAsync(organizationId, status, offset, limit, sort, archived, partId, supportId, buildFileId, isParent, requiresLicense, System.Threading.CancellationToken.None);
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">True to get only archived simulations, False to get only unarchived simulations, leave the parameter off to get all simulation types</param>
        /// <param name="partId">returns simulations using the specified part id</param>
        /// <param name="supportId">returns simulations using the specified part support id</param>
        /// <param name="buildFileId">returns simulations using the specified build file id</param>
        /// <param name="isParent">returns either parent (true) or child (false) simulations</param>
        /// <param name="requiresLicense">returns simulations that require licence</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Simulation>> GetSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived, int? partId, int? supportId, int? buildFileId, bool? isParent, bool? requiresLicense, System.Threading.CancellationToken cancellationToken)
        {
            if (organizationId == null)
                throw new System.ArgumentNullException("organizationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations?");
            urlBuilder_.Append("organizationId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(organizationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) foreach (var item_ in status) { urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (archived != null) urlBuilder_.Append("archived=").Append(System.Uri.EscapeDataString(System.Convert.ToString(archived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (partId != null) urlBuilder_.Append("partId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(partId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (supportId != null) urlBuilder_.Append("supportId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(supportId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (buildFileId != null) urlBuilder_.Append("buildFileId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(buildFileId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isParent != null) urlBuilder_.Append("isParent=").Append(System.Uri.EscapeDataString(System.Convert.ToString(isParent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (requiresLicense != null) urlBuilder_.Append("requiresLicense=").Append(System.Uri.EscapeDataString(System.Convert.ToString(requiresLicense, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Simulation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Simulation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Simulation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Simulation> GetSimulationAsync(int id)
        {
            return GetSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Simulation> GetSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Simulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Simulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Simulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Successfully patched simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Simulation> PatchSimulationAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> simulationPatch)
        {
            return PatchSimulationAsync(id, simulationPatch, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Successfully patched simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Simulation> PatchSimulationAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> simulationPatch, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(simulationPatch, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Simulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Simulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Simulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully requested cancellation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Part> RequestCancellationAsync(int id)
        {
            return RequestCancellationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully requested cancellation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Part> RequestCancellationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations/{id}/cancel");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Part); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Part>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Part);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully set status to cancelled</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Part> ConfirmCancellationAsync(int id)
        {
            return ConfirmCancellationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of part</param>
        /// <returns>Successfully set status to cancelled</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Part> ConfirmCancellationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations/{id}/cancelled");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Part); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Part>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(Part);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Simulation>> GetSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous2> status, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetSimulationChildrenAsync(id, offset, limit, status, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Simulation>> GetSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous2> status, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations/{id}/children?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) foreach (var item_ in status) { urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Simulation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Simulation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Simulation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SimulationLog>> GetSimulationLogsAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetSimulationLogsAsync(id, offset, limit, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SimulationLog>> GetSimulationLogsAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations/{id}/logs?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SimulationLog>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SimulationLog>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SimulationLog>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationLog">A log for a simulation</param>
        /// <returns>Successfully added the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SimulationLog> PostSimulationLogAsync(int id, SimulationLog simulationLog)
        {
            return PostSimulationLogAsync(id, simulationLog, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationLog">A log for a simulation</param>
        /// <returns>Successfully added the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SimulationLog> PostSimulationLogAsync(int id, SimulationLog simulationLog, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations/{id}/logs");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(simulationLog, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SimulationLog); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationLog>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(SimulationLog);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SimulationOutput>> GetSimulationOutputsAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetSimulationOutputsAsync(id, offset, limit, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SimulationOutput>> GetSimulationOutputsAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations/{id}/outputs?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SimulationOutput>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SimulationOutput>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SimulationOutput>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationOutput">An output for a simulation</param>
        /// <returns>Successfully added the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SimulationOutput> PostSimulationOutputAsync(int id, SimulationOutput simulationOutput)
        {
            return PostSimulationOutputAsync(id, simulationOutput, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationOutput">An output for a simulation</param>
        /// <returns>Successfully added the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SimulationOutput> PostSimulationOutputAsync(int id, SimulationOutput simulationOutput, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations/{id}/outputs");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(simulationOutput, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SimulationOutput); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationOutput>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(SimulationOutput);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SimulationActivity>> GetSimulationActivitiesAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetSimulationActivitiesAsync(id, offset, limit, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SimulationActivity>> GetSimulationActivitiesAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations/{id}/activities?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SimulationActivity>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SimulationActivity>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SimulationActivity>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationActivity">An activity for a simulation.  An activity represents the execution of a worker in the simulation pipeline.</param>
        /// <returns>Successfully added the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SimulationActivity> PostSimulationActivityAsync(int id, SimulationActivity simulationActivity)
        {
            return PostSimulationActivityAsync(id, simulationActivity, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="simulationActivity">An activity for a simulation.  An activity represents the execution of a worker in the simulation pipeline.</param>
        /// <returns>Successfully added the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SimulationActivity> PostSimulationActivityAsync(int id, SimulationActivity simulationActivity, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations/{id}/activities");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(simulationActivity, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SimulationActivity); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationActivity>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(SimulationActivity);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="activityId">activity identifier</param>
        /// <returns>Successfully found the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SimulationActivity> GetSimulationActivityAsync(int id, int activityId)
        {
            return GetSimulationActivityAsync(id, activityId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="activityId">activity identifier</param>
        /// <returns>Successfully found the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SimulationActivity> GetSimulationActivityAsync(int id, int activityId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (activityId == null)
                throw new System.ArgumentNullException("activityId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations/{id}/activities/{activityId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{activityId}", System.Uri.EscapeDataString(System.Convert.ToString(activityId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SimulationActivity); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationActivity>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(SimulationActivity);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="activityId">activity identifier</param>
        /// <param name="simulationActivity">An activity for a simulation.  An activity represents the execution of a worker in the simulation pipeline.</param>
        /// <returns>Successfully updated the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SimulationActivity> PutSimulationActivityAsync(int id, int activityId, SimulationActivity simulationActivity)
        {
            return PutSimulationActivityAsync(id, activityId, simulationActivity, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="activityId">activity identifier</param>
        /// <param name="simulationActivity">An activity for a simulation.  An activity represents the execution of a worker in the simulation pipeline.</param>
        /// <returns>Successfully updated the item</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SimulationActivity> PutSimulationActivityAsync(int id, int activityId, SimulationActivity simulationActivity, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (activityId == null)
                throw new System.ArgumentNullException("activityId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations/{id}/activities/{activityId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{activityId}", System.Uri.EscapeDataString(System.Convert.ToString(activityId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(simulationActivity, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SimulationActivity); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationActivity>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(SimulationActivity);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="activityId">activity identifier</param>
        /// <param name="activityPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Successfully patched activity</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SimulationActivity> PatchActivityAsync(int id, int activityId, System.Collections.Generic.IEnumerable<PatchDocument> activityPatch)
        {
            return PatchActivityAsync(id, activityId, activityPatch, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="activityId">activity identifier</param>
        /// <param name="activityPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Successfully patched activity</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SimulationActivity> PatchActivityAsync(int id, int activityId, System.Collections.Generic.IEnumerable<PatchDocument> activityPatch, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (activityId == null)
                throw new System.ArgumentNullException("activityId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/simulations/{id}/activities/{activityId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{activityId}", System.Uri.EscapeDataString(System.Convert.ToString(activityId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(activityPatch, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SimulationActivity); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationActivity>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation activity not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(SimulationActivity);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PorositySimulation>> GetPorositySimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous3> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetPorositySimulationsAsync(organizationId, status, offset, limit, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PorositySimulation>> GetPorositySimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous3> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (organizationId == null)
                throw new System.ArgumentNullException("organizationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/porositysimulations?");
            urlBuilder_.Append("organizationId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(organizationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) foreach (var item_ in status) { urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<PorositySimulation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<PorositySimulation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<PorositySimulation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="porositySimulation">PorositySimulation fields required to add the simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PorositySimulation> PostPorositySimulationAsync(PorositySimulation porositySimulation)
        {
            return PostPorositySimulationAsync(porositySimulation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="porositySimulation">PorositySimulation fields required to add the simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PorositySimulation> PostPorositySimulationAsync(PorositySimulation porositySimulation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/porositysimulations");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(porositySimulation, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PorositySimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PorositySimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PorositySimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PorositySimulation> GetPorositySimulationAsync(int id)
        {
            return GetPorositySimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PorositySimulation> GetPorositySimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/porositysimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PorositySimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PorositySimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PorositySimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="porositySimulation">PorositySimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PorositySimulation> PutPorositySimulationAsync(int id, PorositySimulation porositySimulation)
        {
            return PutPorositySimulationAsync(id, porositySimulation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="porositySimulation">PorositySimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PorositySimulation> PutPorositySimulationAsync(int id, PorositySimulation porositySimulation, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/porositysimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(porositySimulation, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PorositySimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PorositySimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(PorositySimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeletePorositySimulationAsync(int id)
        {
            return DeletePorositySimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DeletePorositySimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/porositysimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PorositySimulation>> GetPorositySimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous4> status, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetPorositySimulationChildrenAsync(id, offset, limit, status, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PorositySimulation>> GetPorositySimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous4> status, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/porositysimulations/{id}/children?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) foreach (var item_ in status) { urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<PorositySimulation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<PorositySimulation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<PorositySimulation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CancelPorositySimulationAsync(int id)
        {
            return CancelPorositySimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task CancelPorositySimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/porositysimulations/{id}/cancel");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task StartPorositySimulationAsync(int id)
        {
            return StartPorositySimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task StartPorositySimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/porositysimulations/{id}/start");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SingleBeadSimulation>> GetSingleBeadSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous5> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetSingleBeadSimulationsAsync(organizationId, status, offset, limit, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SingleBeadSimulation>> GetSingleBeadSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous5> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (organizationId == null)
                throw new System.ArgumentNullException("organizationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/singlebeadsimulations?");
            urlBuilder_.Append("organizationId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(organizationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) foreach (var item_ in status) { urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SingleBeadSimulation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SingleBeadSimulation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SingleBeadSimulation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="singleBeadSimulation">SingleBeadSimulation fields required to add the simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SingleBeadSimulation> PostSingleBeadSimulationAsync(SingleBeadSimulation singleBeadSimulation)
        {
            return PostSingleBeadSimulationAsync(singleBeadSimulation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="singleBeadSimulation">SingleBeadSimulation fields required to add the simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SingleBeadSimulation> PostSingleBeadSimulationAsync(SingleBeadSimulation singleBeadSimulation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/singlebeadsimulations");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(singleBeadSimulation, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SingleBeadSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SingleBeadSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(SingleBeadSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SingleBeadSimulation> GetSingleBeadSimulationAsync(int id)
        {
            return GetSingleBeadSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SingleBeadSimulation> GetSingleBeadSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/singlebeadsimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SingleBeadSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SingleBeadSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(SingleBeadSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="singleBeadSimulation">SingleBeadSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SingleBeadSimulation> PutSingleBeadSimulationAsync(int id, SingleBeadSimulation singleBeadSimulation)
        {
            return PutSingleBeadSimulationAsync(id, singleBeadSimulation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="singleBeadSimulation">SingleBeadSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SingleBeadSimulation> PutSingleBeadSimulationAsync(int id, SingleBeadSimulation singleBeadSimulation, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/singlebeadsimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(singleBeadSimulation, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SingleBeadSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SingleBeadSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(SingleBeadSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteSingleBeadSimulationAsync(int id)
        {
            return DeleteSingleBeadSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DeleteSingleBeadSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/singlebeadsimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SingleBeadSimulation>> GetSingleBeadSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous6> status, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetSingleBeadSimulationChildrenAsync(id, offset, limit, status, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SingleBeadSimulation>> GetSingleBeadSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous6> status, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/singlebeadsimulations/{id}/children?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) foreach (var item_ in status) { urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<SingleBeadSimulation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<SingleBeadSimulation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<SingleBeadSimulation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CancelSingleBeadSimulationAsync(int id)
        {
            return CancelSingleBeadSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task CancelSingleBeadSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/singlebeadsimulations/{id}/cancel");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task StartSingleBeadSimulationAsync(int id)
        {
            return StartSingleBeadSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task StartSingleBeadSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/singlebeadsimulations/{id}/start");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ThermalSimulation>> GetThermalSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous7> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetThermalSimulationsAsync(organizationId, status, offset, limit, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ThermalSimulation>> GetThermalSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous7> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (organizationId == null)
                throw new System.ArgumentNullException("organizationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/thermalsimulations?");
            urlBuilder_.Append("organizationId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(organizationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) foreach (var item_ in status) { urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ThermalSimulation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ThermalSimulation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ThermalSimulation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="thermalSimulation">ThermalSimulation fields required to add a simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ThermalSimulation> PostThermalSimulationAsync(ThermalSimulation thermalSimulation)
        {
            return PostThermalSimulationAsync(thermalSimulation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="thermalSimulation">ThermalSimulation fields required to add a simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ThermalSimulation> PostThermalSimulationAsync(ThermalSimulation thermalSimulation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/thermalsimulations");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(thermalSimulation, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ThermalSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ThermalSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(ThermalSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ThermalSimulation> GetThermalSimulationAsync(int id)
        {
            return GetThermalSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ThermalSimulation> GetThermalSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/thermalsimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ThermalSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ThermalSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(ThermalSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="thermalSimulation">ThermalSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ThermalSimulation> PutThermalSimulationAsync(int id, ThermalSimulation thermalSimulation)
        {
            return PutThermalSimulationAsync(id, thermalSimulation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="thermalSimulation">ThermalSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ThermalSimulation> PutThermalSimulationAsync(int id, ThermalSimulation thermalSimulation, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/thermalsimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(thermalSimulation, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ThermalSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ThermalSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(ThermalSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteThermalSimulationAsync(int id)
        {
            return DeleteThermalSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DeleteThermalSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/thermalsimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ThermalSimulation>> GetThermalSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous8> status, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetThermalSimulationChildrenAsync(id, offset, limit, status, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ThermalSimulation>> GetThermalSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous8> status, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/thermalsimulations/{id}/children?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) foreach (var item_ in status) { urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ThermalSimulation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ThermalSimulation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ThermalSimulation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CancelThermalSimulationAsync(int id)
        {
            return CancelThermalSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task CancelThermalSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/thermalsimulations/{id}/cancel");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task StartThermalSimulationAsync(int id)
        {
            return StartThermalSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task StartThermalSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/thermalsimulations/{id}/start");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ScanPatternSimulation>> GetScanPatternSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous9> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetScanPatternSimulationsAsync(organizationId, status, offset, limit, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ScanPatternSimulation>> GetScanPatternSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous9> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (organizationId == null)
                throw new System.ArgumentNullException("organizationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/scanpatternsimulations?");
            urlBuilder_.Append("organizationId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(organizationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) foreach (var item_ in status) { urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ScanPatternSimulation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ScanPatternSimulation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ScanPatternSimulation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="scanPatternSimulation">ScanPatternSimulation fields required to add a simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ScanPatternSimulation> PostScanPatternSimulationAsync(ScanPatternSimulation scanPatternSimulation)
        {
            return PostScanPatternSimulationAsync(scanPatternSimulation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="scanPatternSimulation">ScanPatternSimulation fields required to add a simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ScanPatternSimulation> PostScanPatternSimulationAsync(ScanPatternSimulation scanPatternSimulation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/scanpatternsimulations");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(scanPatternSimulation, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ScanPatternSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ScanPatternSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(ScanPatternSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ScanPatternSimulation> GetScanPatternSimulationAsync(int id)
        {
            return GetScanPatternSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ScanPatternSimulation> GetScanPatternSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/scanpatternsimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ScanPatternSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ScanPatternSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(ScanPatternSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="scanPatternSimulation">ScanPatternSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ScanPatternSimulation> PutScanPatternSimulationAsync(int id, ScanPatternSimulation scanPatternSimulation)
        {
            return PutScanPatternSimulationAsync(id, scanPatternSimulation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="scanPatternSimulation">ScanPatternSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ScanPatternSimulation> PutScanPatternSimulationAsync(int id, ScanPatternSimulation scanPatternSimulation, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/scanpatternsimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(scanPatternSimulation, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ScanPatternSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ScanPatternSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(ScanPatternSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteScanPatternSimulationAsync(int id)
        {
            return DeleteScanPatternSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DeleteScanPatternSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/scanpatternsimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ScanPatternSimulation>> GetScanPatternSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous10> status, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetScanPatternSimulationChildrenAsync(id, offset, limit, status, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ScanPatternSimulation>> GetScanPatternSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous10> status, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/scanpatternsimulations/{id}/children?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) foreach (var item_ in status) { urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<ScanPatternSimulation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ScanPatternSimulation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<ScanPatternSimulation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CancelScanPatternSimulationAsync(int id)
        {
            return CancelScanPatternSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task CancelScanPatternSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/scanpatternsimulations/{id}/cancel");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task StartScanPatternSimulationAsync(int id)
        {
            return StartScanPatternSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task StartScanPatternSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/scanpatternsimulations/{id}/start");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AssumedStrainSimulation>> GetAssumedStrainSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous11> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetAssumedStrainSimulationsAsync(organizationId, status, offset, limit, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AssumedStrainSimulation>> GetAssumedStrainSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous11> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (organizationId == null)
                throw new System.ArgumentNullException("organizationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/assumedstrainsimulations?");
            urlBuilder_.Append("organizationId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(organizationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) foreach (var item_ in status) { urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<AssumedStrainSimulation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<AssumedStrainSimulation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<AssumedStrainSimulation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="assumedStrainSimulation">AssumedStrainSimulation fields required to add a simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AssumedStrainSimulation> PostAssumedStrainSimulationAsync(AssumedStrainSimulation assumedStrainSimulation)
        {
            return PostAssumedStrainSimulationAsync(assumedStrainSimulation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="assumedStrainSimulation">AssumedStrainSimulation fields required to add a simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<AssumedStrainSimulation> PostAssumedStrainSimulationAsync(AssumedStrainSimulation assumedStrainSimulation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/assumedstrainsimulations");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(assumedStrainSimulation, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(AssumedStrainSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<AssumedStrainSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(AssumedStrainSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AssumedStrainSimulation> GetAssumedStrainSimulationAsync(int id)
        {
            return GetAssumedStrainSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<AssumedStrainSimulation> GetAssumedStrainSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/assumedstrainsimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(AssumedStrainSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<AssumedStrainSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(AssumedStrainSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="assumedStrainSimulation">AssumedStrainSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AssumedStrainSimulation> PutAssumedStrainSimulationAsync(int id, AssumedStrainSimulation assumedStrainSimulation)
        {
            return PutAssumedStrainSimulationAsync(id, assumedStrainSimulation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="assumedStrainSimulation">AssumedStrainSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<AssumedStrainSimulation> PutAssumedStrainSimulationAsync(int id, AssumedStrainSimulation assumedStrainSimulation, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/assumedstrainsimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(assumedStrainSimulation, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(AssumedStrainSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<AssumedStrainSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(AssumedStrainSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteAssumedStrainSimulationAsync(int id)
        {
            return DeleteAssumedStrainSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DeleteAssumedStrainSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/assumedstrainsimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AssumedStrainSimulation>> GetAssumedStrainSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous12> status, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetAssumedStrainSimulationChildrenAsync(id, offset, limit, status, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of materials to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AssumedStrainSimulation>> GetAssumedStrainSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous12> status, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/assumedstrainsimulations/{id}/children?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) foreach (var item_ in status) { urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<AssumedStrainSimulation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<AssumedStrainSimulation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<AssumedStrainSimulation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CancelAssumedStrainSimulationAsync(int id)
        {
            return CancelAssumedStrainSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task CancelAssumedStrainSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/assumedstrainsimulations/{id}/cancel");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task StartAssumedStrainSimulationAsync(int id)
        {
            return StartAssumedStrainSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task StartAssumedStrainSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/assumedstrainsimulations/{id}/start");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully estimated time for assumed strain simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SimulationEstimate> AssumedStrainEstimateAsync(int id)
        {
            return AssumedStrainEstimateAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully estimated time for assumed strain simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SimulationEstimate> AssumedStrainEstimateAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/assumedstrainsimulations/{id}/estimate");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SimulationEstimate); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationEstimate>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(SimulationEstimate);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">If true, will only return archived items.  If false, will only return unarchived items.  If not provided, will return both archived and unarchived items.</param>
        /// <param name="availability">availability value of build files to return, valid values: Uploaded, Processing, Available, Error</param>
        /// <returns>Successfully retrieved list of build files</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BuildFile>> GetBuildFilesAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived, System.Collections.Generic.IEnumerable<Anonymous13> availability)
        {
            return GetBuildFilesAsync(organizationId, offset, limit, sort, archived, availability, System.Threading.CancellationToken.None);
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="offset">starting paging count; ex. 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <param name="archived">If true, will only return archived items.  If false, will only return unarchived items.  If not provided, will return both archived and unarchived items.</param>
        /// <param name="availability">availability value of build files to return, valid values: Uploaded, Processing, Available, Error</param>
        /// <returns>Successfully retrieved list of build files</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BuildFile>> GetBuildFilesAsync(int organizationId, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, bool? archived, System.Collections.Generic.IEnumerable<Anonymous13> availability, System.Threading.CancellationToken cancellationToken)
        {
            if (organizationId == null)
                throw new System.ArgumentNullException("organizationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/buildfiles?");
            urlBuilder_.Append("organizationId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(organizationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (archived != null) urlBuilder_.Append("archived=").Append(System.Uri.EscapeDataString(System.Convert.ToString(archived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (availability != null) foreach (var item_ in availability) { urlBuilder_.Append("availability=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<BuildFile>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<BuildFile>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<BuildFile>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="buildFilePost">build file to add</param>
        /// <returns>Build file that was successfully added</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BuildFile> PostBuildFileAsync(BuildFilePost buildFilePost)
        {
            return PostBuildFileAsync(buildFilePost, System.Threading.CancellationToken.None);
        }
    
        /// <param name="buildFilePost">build file to add</param>
        /// <returns>Build file that was successfully added</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BuildFile> PostBuildFileAsync(BuildFilePost buildFilePost, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/buildfiles");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(buildFilePost, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BuildFile); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BuildFile>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(BuildFile);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <returns>URL to use for uploading a ZIP file containing build file components</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetBuildFileUploadUrlAsync()
        {
            return GetBuildFileUploadUrlAsync(System.Threading.CancellationToken.None);
        }
    
        /// <returns>URL to use for uploading a ZIP file containing build file components</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<string> GetBuildFileUploadUrlAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/buildfiles/buildfileuploadurl");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(string); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of build file to retrieve</param>
        /// <returns>Retrieved build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BuildFile> GetBuildFileAsync(int id)
        {
            return GetBuildFileAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of build file to retrieve</param>
        /// <returns>Retrieved build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BuildFile> GetBuildFileAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/buildfiles/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BuildFile); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BuildFile>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("build file not found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(BuildFile);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of build file to update</param>
        /// <param name="buildFile">build file to update</param>
        /// <returns>Updated build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BuildFile> UpdateBuildFileAsync(int id, BuildFile buildFile)
        {
            return UpdateBuildFileAsync(id, buildFile, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of build file to update</param>
        /// <param name="buildFile">build file to update</param>
        /// <returns>Updated build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BuildFile> UpdateBuildFileAsync(int id, BuildFile buildFile, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/buildfiles/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(buildFile, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BuildFile); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BuildFile>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("build file not found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(BuildFile);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of build file to update</param>
        /// <param name="buildFilePatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BuildFile> PatchBuildFileAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> buildFilePatch)
        {
            return PatchBuildFileAsync(id, buildFilePatch, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of build file to update</param>
        /// <param name="buildFilePatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BuildFile> PatchBuildFileAsync(int id, System.Collections.Generic.IEnumerable<PatchDocument> buildFilePatch, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/buildfiles/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(buildFilePatch, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BuildFile); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BuildFile>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Build file not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(BuildFile);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of build file</param>
        /// <returns>Successfully deleted the build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteBuildFileAsync(int id)
        {
            return DeleteBuildFileAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of build file</param>
        /// <returns>Successfully deleted the build file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DeleteBuildFileAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/buildfiles/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of build file to retrieve geometry of</param>
        /// <returns>Part geometry as an array of triangles</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>> GetBuildFileGeometryAsync(int id)
        {
            return GetBuildFileGeometryAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of build file to retrieve geometry of</param>
        /// <returns>Part geometry as an array of triangles</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>> GetBuildFileGeometryAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/buildfiles/{id}/geometry");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("build file not found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<GeometryTriangle>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of build file to retrieve geometry of</param>
        /// <returns>URL to the part STL file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetBuildFileGeometryUrlAsync(int id)
        {
            return GetBuildFileGeometryUrlAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of build file to retrieve geometry of</param>
        /// <returns>URL to the part STL file</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<string> GetBuildFileGeometryUrlAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/buildfiles/{id}/geometryurl");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(string); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("build file not found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MicrostructureSimulation>> GetMicrostructureSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous14> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetMicrostructureSimulationsAsync(organizationId, status, offset, limit, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="organizationId">the organization id to get items for.  Must be provided as API callers only have access to items belonging to their organization.</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MicrostructureSimulation>> GetMicrostructureSimulationsAsync(int organizationId, System.Collections.Generic.IEnumerable<Anonymous14> status, int? offset, int? limit, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (organizationId == null)
                throw new System.ArgumentNullException("organizationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/microstructuresimulations?");
            urlBuilder_.Append("organizationId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(organizationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) foreach (var item_ in status) { urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<MicrostructureSimulation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<MicrostructureSimulation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<MicrostructureSimulation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="microstructureSimulation">MicrostructureSimulation fields required to add the simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MicrostructureSimulation> PostMicrostructureSimulationAsync(MicrostructureSimulation microstructureSimulation)
        {
            return PostMicrostructureSimulationAsync(microstructureSimulation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="microstructureSimulation">MicrostructureSimulation fields required to add the simulation</param>
        /// <returns>Successfully added a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<MicrostructureSimulation> PostMicrostructureSimulationAsync(MicrostructureSimulation microstructureSimulation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/microstructuresimulations");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(microstructureSimulation, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(MicrostructureSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<MicrostructureSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(MicrostructureSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MicrostructureSimulation> GetMicrostructureSimulationAsync(int id)
        {
            return GetMicrostructureSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Successfully retrieved simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<MicrostructureSimulation> GetMicrostructureSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/microstructuresimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(MicrostructureSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<MicrostructureSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(MicrostructureSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="microstructureSimulation">MicrostructureSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MicrostructureSimulation> PutMicrostructureSimulationAsync(int id, MicrostructureSimulation microstructureSimulation)
        {
            return PutMicrostructureSimulationAsync(id, microstructureSimulation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="microstructureSimulation">MicrostructureSimulation fields required to update a simulation</param>
        /// <returns>Successfully updated a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<MicrostructureSimulation> PutMicrostructureSimulationAsync(int id, MicrostructureSimulation microstructureSimulation, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/microstructuresimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(microstructureSimulation, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(MicrostructureSimulation); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<MicrostructureSimulation>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(MicrostructureSimulation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteMicrostructureSimulationAsync(int id)
        {
            return DeleteMicrostructureSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of simulation</param>
        /// <returns>Successfully deleted a simulation</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DeleteMicrostructureSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/microstructuresimulations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("Not Found", status_, responseData_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">ID of microstructure simulation entity that owns the sensor</param>
        /// <param name="sensorId">ID of microstructure sensor to update</param>
        /// <param name="microstructureSensorPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched microstructure sensor</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MicrostructureSensor> PatchMicrostructureSensorAsync(int id, int sensorId, System.Collections.Generic.IEnumerable<PatchDocument> microstructureSensorPatch)
        {
            return PatchMicrostructureSensorAsync(id, sensorId, microstructureSensorPatch, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">ID of microstructure simulation entity that owns the sensor</param>
        /// <param name="sensorId">ID of microstructure sensor to update</param>
        /// <param name="microstructureSensorPatch">This endpoint uses JSON Patch, RFC 6092.</param>
        /// <returns>Patched microstructure sensor</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<MicrostructureSensor> PatchMicrostructureSensorAsync(int id, int sensorId, System.Collections.Generic.IEnumerable<PatchDocument> microstructureSensorPatch, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (sensorId == null)
                throw new System.ArgumentNullException("sensorId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/microstructuresimulations/{id}/sensors/{sensorId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sensorId}", System.Uri.EscapeDataString(System.Convert.ToString(sensorId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(microstructureSensorPatch, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(MicrostructureSensor); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<MicrostructureSensor>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Microstructure Sensor not found (sensorId invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(MicrostructureSensor);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MicrostructureSimulation>> GetMicrostructureSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous15> status, System.Collections.Generic.IEnumerable<string> sort)
        {
            return GetMicrostructureSimulationChildrenAsync(id, offset, limit, status, sort, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <param name="offset">starting paging count; ex. offset of 60 will skip the first 60 items in the list</param>
        /// <param name="limit">number of items to return within the query</param>
        /// <param name="status">simulation status for items retrieved.  If an array of items is sent, they are treated as "OR" operations. e.g. status=InProgress,Requested would yield a list of simulations that are in either state.</param>
        /// <param name="sort">key:direction pairs for one or multiple field sort orders.  e.g. sort=key1:desc,key2:asc</param>
        /// <returns>Successfully found the list of items</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MicrostructureSimulation>> GetMicrostructureSimulationChildrenAsync(int id, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous15> status, System.Collections.Generic.IEnumerable<string> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/microstructuresimulations/{id}/children?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (offset != null) urlBuilder_.Append("offset=").Append(System.Uri.EscapeDataString(System.Convert.ToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(System.Convert.ToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null) foreach (var item_ in status) { urlBuilder_.Append("status=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (sort != null) foreach (var item_ in sort) { urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(System.Convert.ToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<MicrostructureSimulation>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<MicrostructureSimulation>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<MicrostructureSimulation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CancelMicrostructureSimulationAsync(int id)
        {
            return CancelMicrostructureSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully cancelled.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task CancelMicrostructureSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/microstructuresimulations/{id}/cancel");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task StartMicrostructureSimulationAsync(int id)
        {
            return StartMicrostructureSimulationAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="id">simulation identifier</param>
        /// <returns>Simulation was successfully started.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task StartMicrostructureSimulationAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/microstructuresimulations/{id}/start");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(System.Convert.ToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(string.Empty);
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Not authorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("Simulation not found (id invalid)", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("unexpected error", status_, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SimulationActivity : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private int _simulationId;
        private string _activityId;
        private string _activityName;
        private string _workerVersion;
        private System.DateTime? _startedAt;
        private System.DateTime? _completedAt;
        private int? _percentComplete;
        private SimulationActivityStatus? _status;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>id of associated simulation, set server-side, read-only</summary>
        [Newtonsoft.Json.JsonProperty("simulationId", Required = Newtonsoft.Json.Required.Always)]
        public int SimulationId
        {
            get { return _simulationId; }
            set 
            {
                if (_simulationId != value)
                {
                    _simulationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the Amazon SWF activity id</summary>
        [Newtonsoft.Json.JsonProperty("activityId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ActivityId
        {
            get { return _activityId; }
            set 
            {
                if (_activityId != value)
                {
                    _activityId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the name of the Amazon SWF activity</summary>
        [Newtonsoft.Json.JsonProperty("activityName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ActivityName
        {
            get { return _activityName; }
            set 
            {
                if (_activityName != value)
                {
                    _activityName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the version of the worker, e.g. 1.9.0</summary>
        [Newtonsoft.Json.JsonProperty("workerVersion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string WorkerVersion
        {
            get { return _workerVersion; }
            set 
            {
                if (_workerVersion != value)
                {
                    _workerVersion = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>started time stamp</summary>
        [Newtonsoft.Json.JsonProperty("startedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartedAt
        {
            get { return _startedAt; }
            set 
            {
                if (_startedAt != value)
                {
                    _startedAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>completed time stamp</summary>
        [Newtonsoft.Json.JsonProperty("completedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CompletedAt
        {
            get { return _completedAt; }
            set 
            {
                if (_completedAt != value)
                {
                    _completedAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>number 0 - 100 representing percentage of activity already completed</summary>
        [Newtonsoft.Json.JsonProperty("percentComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PercentComplete
        {
            get { return _percentComplete; }
            set 
            {
                if (_percentComplete != value)
                {
                    _percentComplete = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>status of the activity</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SimulationActivityStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SimulationActivity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationActivity>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SimulationOutput : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private int? _simulationId;
        private System.DateTime _createdAt;
        private string _label;
        private string _fileLocation;
    
        /// <summary>id of associated simulation, set server-side, read-only</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simulationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SimulationId
        {
            get { return _simulationId; }
            set 
            {
                if (_simulationId != value)
                {
                    _simulationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>created time stamp</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime CreatedAt
        {
            get { return _createdAt; }
            set 
            {
                if (_createdAt != value)
                {
                    _createdAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>User readable label of what the output contains</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label
        {
            get { return _label; }
            set 
            {
                if (_label != value)
                {
                    _label = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Location of file, usually an S3 location</summary>
        [Newtonsoft.Json.JsonProperty("fileLocation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileLocation
        {
            get { return _fileLocation; }
            set 
            {
                if (_fileLocation != value)
                {
                    _fileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SimulationOutput FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationOutput>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>As-run part related parameters used for a simulation. If the part field is included in a Simulation PUT or POST, it will not be updated.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SimulationPart : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private int _partId;
        private Part _part;
        private int _simulationId;
        private double _xMin;
        private double _yMin;
        private double _zMin;
        private int? _partSupportId;
        private PartSupport _partSupport;
        private int? _partSupportConfigurationId;
        private PartSupportConfiguration _partSupportConfiguration;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the associated part</summary>
        [Newtonsoft.Json.JsonProperty("partId", Required = Newtonsoft.Json.Required.Always)]
        public int PartId
        {
            get { return _partId; }
            set 
            {
                if (_partId != value)
                {
                    _partId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("part", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Part Part
        {
            get { return _part; }
            set 
            {
                if (_part != value)
                {
                    _part = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the associated simulation</summary>
        [Newtonsoft.Json.JsonProperty("simulationId", Required = Newtonsoft.Json.Required.Always)]
        public int SimulationId
        {
            get { return _simulationId; }
            set 
            {
                if (_simulationId != value)
                {
                    _simulationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Smallest x coordinate of the part location on the powder bed in millimeters. The center of the powder bed in the x dimension is assumed to be 0</summary>
        [Newtonsoft.Json.JsonProperty("xMin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-125, 125)]
        public double XMin
        {
            get { return _xMin; }
            set 
            {
                if (_xMin != value)
                {
                    _xMin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Smallest y coordinate of the part location on the powder bed in millimeters. The center of the powder bed in the y dimension is assumed to be 0</summary>
        [Newtonsoft.Json.JsonProperty("yMin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-125, 125)]
        public double YMin
        {
            get { return _yMin; }
            set 
            {
                if (_yMin != value)
                {
                    _yMin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Not used at present. This must be set to 0</summary>
        [Newtonsoft.Json.JsonProperty("zMin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double ZMin
        {
            get { return _zMin; }
            set 
            {
                if (_zMin != value)
                {
                    _zMin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of the support to use for the simulation. Can be null</summary>
        [Newtonsoft.Json.JsonProperty("partSupportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PartSupportId
        {
            get { return _partSupportId; }
            set 
            {
                if (_partSupportId != value)
                {
                    _partSupportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("partSupport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartSupport PartSupport
        {
            get { return _partSupport; }
            set 
            {
                if (_partSupport != value)
                {
                    _partSupport = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of the PartSupportConfiguration to use for the simulation. Can be null</summary>
        [Newtonsoft.Json.JsonProperty("partSupportConfigurationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PartSupportConfigurationId
        {
            get { return _partSupportConfigurationId; }
            set 
            {
                if (_partSupportConfigurationId != value)
                {
                    _partSupportConfigurationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("partSupportConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartSupportConfiguration PartSupportConfiguration
        {
            get { return _partSupportConfiguration; }
            set 
            {
                if (_partSupportConfiguration != value)
                {
                    _partSupportConfiguration = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SimulationPart FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationPart>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SimulationLog : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private int? _simulationId;
        private System.DateTime _loggedAt;
        private string _message;
        private SimulationLogLevel? _level;
        private string _activityId;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>id of associated simulation, set server-side, read-only</summary>
        [Newtonsoft.Json.JsonProperty("simulationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SimulationId
        {
            get { return _simulationId; }
            set 
            {
                if (_simulationId != value)
                {
                    _simulationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>time stamp of log</summary>
        [Newtonsoft.Json.JsonProperty("loggedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime LoggedAt
        {
            get { return _loggedAt; }
            set 
            {
                if (_loggedAt != value)
                {
                    _loggedAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>level of the log</summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SimulationLogLevel? Level
        {
            get { return _level; }
            set 
            {
                if (_level != value)
                {
                    _level = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the Amazon SWF activity id</summary>
        [Newtonsoft.Json.JsonProperty("activityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActivityId
        {
            get { return _activityId; }
            set 
            {
                if (_activityId != value)
                {
                    _activityId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SimulationLog FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationLog>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Status : System.ComponentModel.INotifyPropertyChanged
    {
        private Status1 _status1;
        private string _message;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Status1 Status1
        {
            get { return _status1; }
            set 
            {
                if (_status1 != value)
                {
                    _status1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Status FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Status>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SimulationType
    {
        [System.Runtime.Serialization.EnumMember(Value = "SingleBeadSimulation")]
        SingleBeadSimulation = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ThermalSimulation")]
        ThermalSimulation = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "PorositySimulation")]
        PorositySimulation = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "AssumedStrainSimulation")]
        AssumedStrainSimulation = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ScanPatternSimulation")]
        ScanPatternSimulation = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "MicrostructureSimulation")]
        MicrostructureSimulation = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Simulation : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private SimulationType? _type;
        private int _organizationId;
        private int? _parentId;
        private string _title;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<string> _tags;
        private SimulationStatus? _status;
        private bool? _archived;
        private int? _materialId;
        private int? _materialConfigurationId;
        private int? _machineId;
        private int? _machineConfigurationId;
        private System.DateTime? _started;
        private string _startedBy;
        private System.DateTime? _completed;
        private double? _percentComplete;
        private System.DateTime? _created;
        private string _createdBy;
        private System.DateTime? _lastModified;
        private string _lastModifiedBy;
        private string _simulationFolder;
        private string _workflowId;
        private int? _numberOfCores;
        private int? _voxelLayers;
        private int? _sliceLayers;
        private double? _longestScanVectorLength;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SimulationType? Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.Always)]
        public int OrganizationId
        {
            get { return _organizationId; }
            set 
            {
                if (_organizationId != value)
                {
                    _organizationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentId
        {
            get { return _parentId; }
            set 
            {
                if (_parentId != value)
                {
                    _parentId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Title
        {
            get { return _title; }
            set 
            {
                if (_title != value)
                {
                    _title = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags
        {
            get { return _tags; }
            set 
            {
                if (_tags != value)
                {
                    _tags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SimulationStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>True if simulation has been archived, false otherwise</summary>
        [Newtonsoft.Json.JsonProperty("archived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Archived
        {
            get { return _archived; }
            set 
            {
                if (_archived != value)
                {
                    _archived = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the material to use in the simulation</summary>
        [Newtonsoft.Json.JsonProperty("materialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaterialId
        {
            get { return _materialId; }
            set 
            {
                if (_materialId != value)
                {
                    _materialId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the material configuration that was used in the simulation, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("materialConfigurationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaterialConfigurationId
        {
            get { return _materialConfigurationId; }
            set 
            {
                if (_materialConfigurationId != value)
                {
                    _materialConfigurationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the machine to use in the simulation</summary>
        [Newtonsoft.Json.JsonProperty("machineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MachineId
        {
            get { return _machineId; }
            set 
            {
                if (_machineId != value)
                {
                    _machineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of the machine configuration that was used in the simulation, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("machineConfigurationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MachineConfigurationId
        {
            get { return _machineConfigurationId; }
            set 
            {
                if (_machineConfigurationId != value)
                {
                    _machineConfigurationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>time stamp, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("started", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Started
        {
            get { return _started; }
            set 
            {
                if (_started != value)
                {
                    _started = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("startedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartedBy
        {
            get { return _startedBy; }
            set 
            {
                if (_startedBy != value)
                {
                    _startedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>time stamp, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("completed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Completed
        {
            get { return _completed; }
            set 
            {
                if (_completed != value)
                {
                    _completed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("percentComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PercentComplete
        {
            get { return _percentComplete; }
            set 
            {
                if (_percentComplete != value)
                {
                    _percentComplete = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>created time stamp, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>assigned user, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>last modified time stamp, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastModified
        {
            get { return _lastModified; }
            set 
            {
                if (_lastModified != value)
                {
                    _lastModified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>assigned user, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedBy
        {
            get { return _lastModifiedBy; }
            set 
            {
                if (_lastModifiedBy != value)
                {
                    _lastModifiedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>s3 folder used to store input and output files for the simulation</summary>
        [Newtonsoft.Json.JsonProperty("simulationFolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimulationFolder
        {
            get { return _simulationFolder; }
            set 
            {
                if (_simulationFolder != value)
                {
                    _simulationFolder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>workflow identifier - will be provided by the system</summary>
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowId
        {
            get { return _workflowId; }
            set 
            {
                if (_workflowId != value)
                {
                    _workflowId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>indicate the number of cores with which to run the simulation</summary>
        [Newtonsoft.Json.JsonProperty("numberOfCores", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfCores
        {
            get { return _numberOfCores; }
            set 
            {
                if (_numberOfCores != value)
                {
                    _numberOfCores = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>number of voxel layers in the voxelized part + supports</summary>
        [Newtonsoft.Json.JsonProperty("voxelLayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VoxelLayers
        {
            get { return _voxelLayers; }
            set 
            {
                if (_voxelLayers != value)
                {
                    _voxelLayers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>number of slice layers in the part</summary>
        [Newtonsoft.Json.JsonProperty("sliceLayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SliceLayers
        {
            get { return _sliceLayers; }
            set 
            {
                if (_sliceLayers != value)
                {
                    _sliceLayers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>length (in meters) of the longest fill scan vector in the scan pattern. Defaults to null</summary>
        [Newtonsoft.Json.JsonProperty("longestScanVectorLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LongestScanVectorLength
        {
            get { return _longestScanVectorLength; }
            set 
            {
                if (_longestScanVectorLength != value)
                {
                    _longestScanVectorLength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Simulation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Simulation>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PorositySimulationParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private double _geometryWidth;
        private double _geometryLength;
        private double _geometryHeight;
        private double _startingLayerAngle;
        private double _layerRotationAngle;
        private System.Collections.ObjectModel.ObservableCollection<double> _layerThicknessValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _laserWattageValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _scanSpeedValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _hatchSpacingValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _slicingStripeWidthValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private int? _meshLayersPerLayer;
        private double? _heaterTemperature;
        private double _beamDiameter;
    
        /// <summary>Must be between 0.001 to 0.01 meters</summary>
        [Newtonsoft.Json.JsonProperty("geometryWidth", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double GeometryWidth
        {
            get { return _geometryWidth; }
            set 
            {
                if (_geometryWidth != value)
                {
                    _geometryWidth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.001 to 0.01 meters</summary>
        [Newtonsoft.Json.JsonProperty("geometryLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double GeometryLength
        {
            get { return _geometryLength; }
            set 
            {
                if (_geometryLength != value)
                {
                    _geometryLength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.001 to 0.01 meters</summary>
        [Newtonsoft.Json.JsonProperty("geometryHeight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double GeometryHeight
        {
            get { return _geometryHeight; }
            set 
            {
                if (_geometryHeight != value)
                {
                    _geometryHeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("startingLayerAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 180)]
        public double StartingLayerAngle
        {
            get { return _startingLayerAngle; }
            set 
            {
                if (_startingLayerAngle != value)
                {
                    _startingLayerAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("layerRotationAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 180)]
        public double LayerRotationAngle
        {
            get { return _layerRotationAngle; }
            set 
            {
                if (_layerRotationAngle != value)
                {
                    _layerRotationAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of layer thickness values to simulate across, Each value must be between 0.00001 to 0.0001 meters</summary>
        [Newtonsoft.Json.JsonProperty("layerThicknessValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LayerThicknessValues
        {
            get { return _layerThicknessValues; }
            set 
            {
                if (_layerThicknessValues != value)
                {
                    _layerThicknessValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of laser power values to simulate across, Each value must be between 10 to 1000 watts</summary>
        [Newtonsoft.Json.JsonProperty("laserWattageValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LaserWattageValues
        {
            get { return _laserWattageValues; }
            set 
            {
                if (_laserWattageValues != value)
                {
                    _laserWattageValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of scan speed values to simulate across, Each value must be between 0.01 to 10 meters/second</summary>
        [Newtonsoft.Json.JsonProperty("scanSpeedValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> ScanSpeedValues
        {
            get { return _scanSpeedValues; }
            set 
            {
                if (_scanSpeedValues != value)
                {
                    _scanSpeedValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of hatch spacing values to simulate across, Each value must be between 0.00001 to 0.001 meters</summary>
        [Newtonsoft.Json.JsonProperty("hatchSpacingValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> HatchSpacingValues
        {
            get { return _hatchSpacingValues; }
            set 
            {
                if (_hatchSpacingValues != value)
                {
                    _hatchSpacingValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of slicing strip width values to simulate across, Each value must be between 0.001 to 0.1 meters</summary>
        [Newtonsoft.Json.JsonProperty("slicingStripeWidthValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> SlicingStripeWidthValues
        {
            get { return _slicingStripeWidthValues; }
            set 
            {
                if (_slicingStripeWidthValues != value)
                {
                    _slicingStripeWidthValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of mesh layers used to simulate a single deposit layer</summary>
        [Newtonsoft.Json.JsonProperty("meshLayersPerLayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 100)]
        public int? MeshLayersPerLayer
        {
            get { return _meshLayersPerLayer; }
            set 
            {
                if (_meshLayersPerLayer != value)
                {
                    _meshLayersPerLayer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>heater temperature in degrees kelvin</summary>
        [Newtonsoft.Json.JsonProperty("heaterTemperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(293D, 474D)]
        public double? HeaterTemperature
        {
            get { return _heaterTemperature; }
            set 
            {
                if (_heaterTemperature != value)
                {
                    _heaterTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>diameter of laser beam in meters</summary>
        [Newtonsoft.Json.JsonProperty("beamDiameter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(8E-05D, 0.00012D)]
        public double BeamDiameter
        {
            get { return _beamDiameter; }
            set 
            {
                if (_beamDiameter != value)
                {
                    _beamDiameter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PorositySimulationParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PorositySimulationParameters>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PorositySimulation : Simulation, System.ComponentModel.INotifyPropertyChanged
    {
        private double _geometryWidth;
        private double _geometryLength;
        private double _geometryHeight;
        private double _startingLayerAngle;
        private double _layerRotationAngle;
        private System.Collections.ObjectModel.ObservableCollection<double> _layerThicknessValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _laserWattageValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _scanSpeedValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _hatchSpacingValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _slicingStripeWidthValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private int? _meshLayersPerLayer;
        private double? _heaterTemperature;
        private double _beamDiameter;
    
        /// <summary>Must be between 0.001 to 0.01 meters</summary>
        [Newtonsoft.Json.JsonProperty("geometryWidth", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double GeometryWidth
        {
            get { return _geometryWidth; }
            set 
            {
                if (_geometryWidth != value)
                {
                    _geometryWidth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.001 to 0.01 meters</summary>
        [Newtonsoft.Json.JsonProperty("geometryLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double GeometryLength
        {
            get { return _geometryLength; }
            set 
            {
                if (_geometryLength != value)
                {
                    _geometryLength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.001 to 0.01 meters</summary>
        [Newtonsoft.Json.JsonProperty("geometryHeight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double GeometryHeight
        {
            get { return _geometryHeight; }
            set 
            {
                if (_geometryHeight != value)
                {
                    _geometryHeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("startingLayerAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 180)]
        public double StartingLayerAngle
        {
            get { return _startingLayerAngle; }
            set 
            {
                if (_startingLayerAngle != value)
                {
                    _startingLayerAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("layerRotationAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 180)]
        public double LayerRotationAngle
        {
            get { return _layerRotationAngle; }
            set 
            {
                if (_layerRotationAngle != value)
                {
                    _layerRotationAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of layer thickness values to simulate across, Each value must be between 0.00001 to 0.0001 meters</summary>
        [Newtonsoft.Json.JsonProperty("layerThicknessValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LayerThicknessValues
        {
            get { return _layerThicknessValues; }
            set 
            {
                if (_layerThicknessValues != value)
                {
                    _layerThicknessValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of laser power values to simulate across, Each value must be between 10 to 1000 watts</summary>
        [Newtonsoft.Json.JsonProperty("laserWattageValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LaserWattageValues
        {
            get { return _laserWattageValues; }
            set 
            {
                if (_laserWattageValues != value)
                {
                    _laserWattageValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of scan speed values to simulate across, Each value must be between 0.01 to 10 meters/second</summary>
        [Newtonsoft.Json.JsonProperty("scanSpeedValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> ScanSpeedValues
        {
            get { return _scanSpeedValues; }
            set 
            {
                if (_scanSpeedValues != value)
                {
                    _scanSpeedValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of hatch spacing values to simulate across, Each value must be between 0.00001 to 0.001 meters</summary>
        [Newtonsoft.Json.JsonProperty("hatchSpacingValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> HatchSpacingValues
        {
            get { return _hatchSpacingValues; }
            set 
            {
                if (_hatchSpacingValues != value)
                {
                    _hatchSpacingValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of slicing strip width values to simulate across, Each value must be between 0.001 to 0.1 meters</summary>
        [Newtonsoft.Json.JsonProperty("slicingStripeWidthValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> SlicingStripeWidthValues
        {
            get { return _slicingStripeWidthValues; }
            set 
            {
                if (_slicingStripeWidthValues != value)
                {
                    _slicingStripeWidthValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of mesh layers used to simulate a single deposit layer</summary>
        [Newtonsoft.Json.JsonProperty("meshLayersPerLayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 100)]
        public int? MeshLayersPerLayer
        {
            get { return _meshLayersPerLayer; }
            set 
            {
                if (_meshLayersPerLayer != value)
                {
                    _meshLayersPerLayer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>heater temperature in degrees kelvin</summary>
        [Newtonsoft.Json.JsonProperty("heaterTemperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(293D, 474D)]
        public double? HeaterTemperature
        {
            get { return _heaterTemperature; }
            set 
            {
                if (_heaterTemperature != value)
                {
                    _heaterTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>diameter of laser beam in meters</summary>
        [Newtonsoft.Json.JsonProperty("beamDiameter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(8E-05D, 0.00012D)]
        public double BeamDiameter
        {
            get { return _beamDiameter; }
            set 
            {
                if (_beamDiameter != value)
                {
                    _beamDiameter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PorositySimulation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PorositySimulation>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleBeadSimulationParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private SingleBeadSimulationParametersBeadType _beadType;
        private double _beadLength;
        private double _layerThickness;
        private System.Collections.ObjectModel.ObservableCollection<double> _laserWattageValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _scanSpeedValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _powderThermalConductivityValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _powderPackingDensityValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _laserAbsorptivityInPowderValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _laserAbsorptivityInSolidValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _solidusTemperatureValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _liquidusTemperatureValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private double? _heaterTemperature;
        private double _beamDiameter;
    
        /// <summary>Type of single bead simulation - either bead on plate or bead on powder.</summary>
        [Newtonsoft.Json.JsonProperty("beadType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SingleBeadSimulationParametersBeadType BeadType
        {
            get { return _beadType; }
            set 
            {
                if (_beadType != value)
                {
                    _beadType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.001 to 0.01 meters</summary>
        [Newtonsoft.Json.JsonProperty("beadLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double BeadLength
        {
            get { return _beadLength; }
            set 
            {
                if (_beadLength != value)
                {
                    _beadLength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00001 to 0.0001 meters</summary>
        [Newtonsoft.Json.JsonProperty("layerThickness", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double LayerThickness
        {
            get { return _layerThickness; }
            set 
            {
                if (_layerThickness != value)
                {
                    _layerThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of laser power values to simulate across, Each value must be between 10 to 1000 watts</summary>
        [Newtonsoft.Json.JsonProperty("laserWattageValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LaserWattageValues
        {
            get { return _laserWattageValues; }
            set 
            {
                if (_laserWattageValues != value)
                {
                    _laserWattageValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of scan speed values to simulate across, Each value must be between 0.01 to 10 meters/second</summary>
        [Newtonsoft.Json.JsonProperty("scanSpeedValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> ScanSpeedValues
        {
            get { return _scanSpeedValues; }
            set 
            {
                if (_scanSpeedValues != value)
                {
                    _scanSpeedValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of Powder Thermal Conductivity Percentage Values to simulate across, Each value must be between 0% and 100%, expressed as a decimal</summary>
        [Newtonsoft.Json.JsonProperty("powderThermalConductivityValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> PowderThermalConductivityValues
        {
            get { return _powderThermalConductivityValues; }
            set 
            {
                if (_powderThermalConductivityValues != value)
                {
                    _powderThermalConductivityValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of Powder Packing Density Percentage Values to simulate across, Each value must be between 0% and 100%, expressed as a decimal</summary>
        [Newtonsoft.Json.JsonProperty("powderPackingDensityValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> PowderPackingDensityValues
        {
            get { return _powderPackingDensityValues; }
            set 
            {
                if (_powderPackingDensityValues != value)
                {
                    _powderPackingDensityValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of Powder Laser Absorptivity Values to simulate across, Each value must be between 0% and 100%, expressed as a decimal</summary>
        [Newtonsoft.Json.JsonProperty("laserAbsorptivityInPowderValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LaserAbsorptivityInPowderValues
        {
            get { return _laserAbsorptivityInPowderValues; }
            set 
            {
                if (_laserAbsorptivityInPowderValues != value)
                {
                    _laserAbsorptivityInPowderValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of Solid Laser Absorptivity Values to simulate across, Each value must be between 0% and 100%, expressed as a decimal</summary>
        [Newtonsoft.Json.JsonProperty("laserAbsorptivityInSolidValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LaserAbsorptivityInSolidValues
        {
            get { return _laserAbsorptivityInSolidValues; }
            set 
            {
                if (_laserAbsorptivityInSolidValues != value)
                {
                    _laserAbsorptivityInSolidValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of Solidus Temperature Values Values to simulate across</summary>
        [Newtonsoft.Json.JsonProperty("solidusTemperatureValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> SolidusTemperatureValues
        {
            get { return _solidusTemperatureValues; }
            set 
            {
                if (_solidusTemperatureValues != value)
                {
                    _solidusTemperatureValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of Liquidus Temperature Values Values to simulate across</summary>
        [Newtonsoft.Json.JsonProperty("liquidusTemperatureValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LiquidusTemperatureValues
        {
            get { return _liquidusTemperatureValues; }
            set 
            {
                if (_liquidusTemperatureValues != value)
                {
                    _liquidusTemperatureValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>heater temperature in degrees kelvin</summary>
        [Newtonsoft.Json.JsonProperty("heaterTemperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(293D, 474D)]
        public double? HeaterTemperature
        {
            get { return _heaterTemperature; }
            set 
            {
                if (_heaterTemperature != value)
                {
                    _heaterTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>diameter of laser beam in meters</summary>
        [Newtonsoft.Json.JsonProperty("beamDiameter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(8E-05D, 0.00012D)]
        public double BeamDiameter
        {
            get { return _beamDiameter; }
            set 
            {
                if (_beamDiameter != value)
                {
                    _beamDiameter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SingleBeadSimulationParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleBeadSimulationParameters>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SingleBeadSimulation : Simulation, System.ComponentModel.INotifyPropertyChanged
    {
        private SingleBeadSimulationParametersBeadType _beadType;
        private double _beadLength;
        private double _layerThickness;
        private System.Collections.ObjectModel.ObservableCollection<double> _laserWattageValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _scanSpeedValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _powderThermalConductivityValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _powderPackingDensityValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _laserAbsorptivityInPowderValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _laserAbsorptivityInSolidValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _solidusTemperatureValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _liquidusTemperatureValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private double? _heaterTemperature;
        private double _beamDiameter;
    
        /// <summary>Type of single bead simulation - either bead on plate or bead on powder.</summary>
        [Newtonsoft.Json.JsonProperty("beadType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SingleBeadSimulationParametersBeadType BeadType
        {
            get { return _beadType; }
            set 
            {
                if (_beadType != value)
                {
                    _beadType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.001 to 0.01 meters</summary>
        [Newtonsoft.Json.JsonProperty("beadLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double BeadLength
        {
            get { return _beadLength; }
            set 
            {
                if (_beadLength != value)
                {
                    _beadLength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00001 to 0.0001 meters</summary>
        [Newtonsoft.Json.JsonProperty("layerThickness", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double LayerThickness
        {
            get { return _layerThickness; }
            set 
            {
                if (_layerThickness != value)
                {
                    _layerThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of laser power values to simulate across, Each value must be between 10 to 1000 watts</summary>
        [Newtonsoft.Json.JsonProperty("laserWattageValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LaserWattageValues
        {
            get { return _laserWattageValues; }
            set 
            {
                if (_laserWattageValues != value)
                {
                    _laserWattageValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of scan speed values to simulate across, Each value must be between 0.01 to 10 meters/second</summary>
        [Newtonsoft.Json.JsonProperty("scanSpeedValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> ScanSpeedValues
        {
            get { return _scanSpeedValues; }
            set 
            {
                if (_scanSpeedValues != value)
                {
                    _scanSpeedValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of Powder Thermal Conductivity Percentage Values to simulate across, Each value must be between 0% and 100%, expressed as a decimal</summary>
        [Newtonsoft.Json.JsonProperty("powderThermalConductivityValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> PowderThermalConductivityValues
        {
            get { return _powderThermalConductivityValues; }
            set 
            {
                if (_powderThermalConductivityValues != value)
                {
                    _powderThermalConductivityValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of Powder Packing Density Percentage Values to simulate across, Each value must be between 0% and 100%, expressed as a decimal</summary>
        [Newtonsoft.Json.JsonProperty("powderPackingDensityValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> PowderPackingDensityValues
        {
            get { return _powderPackingDensityValues; }
            set 
            {
                if (_powderPackingDensityValues != value)
                {
                    _powderPackingDensityValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of Powder Laser Absorptivity Values to simulate across, Each value must be between 0% and 100%, expressed as a decimal</summary>
        [Newtonsoft.Json.JsonProperty("laserAbsorptivityInPowderValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LaserAbsorptivityInPowderValues
        {
            get { return _laserAbsorptivityInPowderValues; }
            set 
            {
                if (_laserAbsorptivityInPowderValues != value)
                {
                    _laserAbsorptivityInPowderValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of Solid Laser Absorptivity Values to simulate across, Each value must be between 0% and 100%, expressed as a decimal</summary>
        [Newtonsoft.Json.JsonProperty("laserAbsorptivityInSolidValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LaserAbsorptivityInSolidValues
        {
            get { return _laserAbsorptivityInSolidValues; }
            set 
            {
                if (_laserAbsorptivityInSolidValues != value)
                {
                    _laserAbsorptivityInSolidValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of Solidus Temperature Values Values to simulate across</summary>
        [Newtonsoft.Json.JsonProperty("solidusTemperatureValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> SolidusTemperatureValues
        {
            get { return _solidusTemperatureValues; }
            set 
            {
                if (_solidusTemperatureValues != value)
                {
                    _solidusTemperatureValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of Liquidus Temperature Values Values to simulate across</summary>
        [Newtonsoft.Json.JsonProperty("liquidusTemperatureValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LiquidusTemperatureValues
        {
            get { return _liquidusTemperatureValues; }
            set 
            {
                if (_liquidusTemperatureValues != value)
                {
                    _liquidusTemperatureValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>heater temperature in degrees kelvin</summary>
        [Newtonsoft.Json.JsonProperty("heaterTemperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(293D, 474D)]
        public double? HeaterTemperature
        {
            get { return _heaterTemperature; }
            set 
            {
                if (_heaterTemperature != value)
                {
                    _heaterTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>diameter of laser beam in meters</summary>
        [Newtonsoft.Json.JsonProperty("beamDiameter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(8E-05D, 0.00012D)]
        public double BeamDiameter
        {
            get { return _beamDiameter; }
            set 
            {
                if (_beamDiameter != value)
                {
                    _beamDiameter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SingleBeadSimulation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SingleBeadSimulation>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PartBasedSimulationParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<SimulationPart> _simulationParts;
        private string _supportFileLocation;
        private string _partFileLocation;
        private double _supportYieldStrength;
        private double _supportYieldStrengthRatio;
        private double _elasticModulus;
        private double _poissonRatio;
        private double _hardeningFactor;
        private double _strainScalingFactor;
        private int? _buildFileId;
        private bool _performSupportOptimization;
        private double _voxelSize;
        private double? _minimumThickWallThickness;
        private double? _maximumThickWallThickness;
        private double? _thickWallDistance;
        private double? _thinWallThickness;
        private double? _maximumThinWallDistance;
        private double _minimumSupportHeight;
        private bool _generateSupportVoxels;
        private bool _outputDisplacementAfterCutoff;
        private bool _performSupportOnlyCutoff;
        private PartBasedSimulationParametersStressMode _stressMode;
        private double _supportAngle;
        private double _supportFactorOfSafety;
        private bool _outputLayerVtk;
        private bool _detectBladeCrash;
        private double? _bladeCrashThreshold;
        private bool? _performDistortionCompensation;
        private double? _distortionScaleFactor;
        private System.Collections.ObjectModel.ObservableCollection<double> _distortionScaleFactorValues;
        private bool? _outputSupportsVtk;
        private bool? _detectSupportFailure;
        private double? _supportFailureThreshold;
        private double? _partFailureThreshold;
        private double? _strainWarningThreshold;
        private bool? _performDistortionCompensationAfterCutoff;
        private double? _distortionAfterCutoffScaleFactor;
        private System.Collections.ObjectModel.ObservableCollection<double> _distortionAfterCutoffScaleFactorValues;
        private PartBasedSimulationParametersSupportType _supportType;
        private int? _voxelSampleRate;
        private bool? _includeOnPlateStrainOutput;
        private bool? _enableContours;
        private PartBasedSimulationParametersLoadSteppingType? _loadSteppingType;
        private int? _loadSteps;
        private bool _outputMapdl;
    
        /// <summary>List of parts to simulate (current limit is one part, imposed by server)</summary>
        [Newtonsoft.Json.JsonProperty("simulationParts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SimulationPart> SimulationParts
        {
            get { return _simulationParts; }
            set 
            {
                if (_simulationParts != value)
                {
                    _simulationParts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportFileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupportFileLocation
        {
            get { return _supportFileLocation; }
            set 
            {
                if (_supportFileLocation != value)
                {
                    _supportFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("partFileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartFileLocation
        {
            get { return _partFileLocation; }
            set 
            {
                if (_partFileLocation != value)
                {
                    _partFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportYieldStrength", Required = Newtonsoft.Json.Required.Always)]
        public double SupportYieldStrength
        {
            get { return _supportYieldStrength; }
            set 
            {
                if (_supportYieldStrength != value)
                {
                    _supportYieldStrength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportYieldStrengthRatio", Required = Newtonsoft.Json.Required.Always)]
        public double SupportYieldStrengthRatio
        {
            get { return _supportYieldStrengthRatio; }
            set 
            {
                if (_supportYieldStrengthRatio != value)
                {
                    _supportYieldStrengthRatio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("elasticModulus", Required = Newtonsoft.Json.Required.Always)]
        public double ElasticModulus
        {
            get { return _elasticModulus; }
            set 
            {
                if (_elasticModulus != value)
                {
                    _elasticModulus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poissonRatio", Required = Newtonsoft.Json.Required.Always)]
        public double PoissonRatio
        {
            get { return _poissonRatio; }
            set 
            {
                if (_poissonRatio != value)
                {
                    _poissonRatio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hardeningFactor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double HardeningFactor
        {
            get { return _hardeningFactor; }
            set 
            {
                if (_hardeningFactor != value)
                {
                    _hardeningFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("strainScalingFactor", Required = Newtonsoft.Json.Required.Always)]
        public double StrainScalingFactor
        {
            get { return _strainScalingFactor; }
            set 
            {
                if (_strainScalingFactor != value)
                {
                    _strainScalingFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of build file being simulated, mutually exclusive with simulationParts</summary>
        [Newtonsoft.Json.JsonProperty("buildFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BuildFileId
        {
            get { return _buildFileId; }
            set 
            {
                if (_buildFileId != value)
                {
                    _buildFileId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("performSupportOptimization", Required = Newtonsoft.Json.Required.Always)]
        public bool PerformSupportOptimization
        {
            get { return _performSupportOptimization; }
            set 
            {
                if (_performSupportOptimization != value)
                {
                    _performSupportOptimization = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00002 to 0.002 meters</summary>
        [Newtonsoft.Json.JsonProperty("voxelSize", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double VoxelSize
        {
            get { return _voxelSize; }
            set 
            {
                if (_voxelSize != value)
                {
                    _voxelSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00005 to 0.0003 meters, Must be less than maximumWallThickness</summary>
        [Newtonsoft.Json.JsonProperty("minimumThickWallThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? MinimumThickWallThickness
        {
            get { return _minimumThickWallThickness; }
            set 
            {
                if (_minimumThickWallThickness != value)
                {
                    _minimumThickWallThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00015 to 0.002 meters, Must be greater than minimumWallThickness</summary>
        [Newtonsoft.Json.JsonProperty("maximumThickWallThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? MaximumThickWallThickness
        {
            get { return _maximumThickWallThickness; }
            set 
            {
                if (_maximumThickWallThickness != value)
                {
                    _maximumThickWallThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The distance between thickwall supports</summary>
        [Newtonsoft.Json.JsonProperty("thickWallDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? ThickWallDistance
        {
            get { return _thickWallDistance; }
            set 
            {
                if (_thickWallDistance != value)
                {
                    _thickWallDistance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The width of the thinwall supports</summary>
        [Newtonsoft.Json.JsonProperty("thinWallThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? ThinWallThickness
        {
            get { return _thinWallThickness; }
            set 
            {
                if (_thinWallThickness != value)
                {
                    _thinWallThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The maximum distance between thinwalls</summary>
        [Newtonsoft.Json.JsonProperty("maximumThinWallDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? MaximumThinWallDistance
        {
            get { return _maximumThinWallDistance; }
            set 
            {
                if (_maximumThinWallDistance != value)
                {
                    _maximumThinWallDistance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Distance to move the part off the base plate for supports, Must be between 0 to 0.005 meters</summary>
        [Newtonsoft.Json.JsonProperty("minimumSupportHeight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double MinimumSupportHeight
        {
            get { return _minimumSupportHeight; }
            set 
            {
                if (_minimumSupportHeight != value)
                {
                    _minimumSupportHeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("generateSupportVoxels", Required = Newtonsoft.Json.Required.Always)]
        public bool GenerateSupportVoxels
        {
            get { return _generateSupportVoxels; }
            set 
            {
                if (_generateSupportVoxels != value)
                {
                    _generateSupportVoxels = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outputDisplacementAfterCutoff", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputDisplacementAfterCutoff
        {
            get { return _outputDisplacementAfterCutoff; }
            set 
            {
                if (_outputDisplacementAfterCutoff != value)
                {
                    _outputDisplacementAfterCutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("performSupportOnlyCutoff", Required = Newtonsoft.Json.Required.Always)]
        public bool PerformSupportOnlyCutoff
        {
            get { return _performSupportOnlyCutoff; }
            set 
            {
                if (_performSupportOnlyCutoff != value)
                {
                    _performSupportOnlyCutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("stressMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartBasedSimulationParametersStressMode StressMode
        {
            get { return _stressMode; }
            set 
            {
                if (_stressMode != value)
                {
                    _stressMode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 1 to 89 degrees</summary>
        [Newtonsoft.Json.JsonProperty("supportAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 89)]
        public double SupportAngle
        {
            get { return _supportAngle; }
            set 
            {
                if (_supportAngle != value)
                {
                    _supportAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Multiplier for support calculations, Must be between 0.1 to 10</summary>
        [Newtonsoft.Json.JsonProperty("supportFactorOfSafety", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 10)]
        public double SupportFactorOfSafety
        {
            get { return _supportFactorOfSafety; }
            set 
            {
                if (_supportFactorOfSafety != value)
                {
                    _supportFactorOfSafety = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, mechanics solver output will include a zip file with the stress / distortion state at the end of each voxel layer</summary>
        [Newtonsoft.Json.JsonProperty("outputLayerVtk", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputLayerVtk
        {
            get { return _outputLayerVtk; }
            set 
            {
                if (_outputLayerVtk != value)
                {
                    _outputLayerVtk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detectBladeCrash", Required = Newtonsoft.Json.Required.Always)]
        public bool DetectBladeCrash
        {
            get { return _detectBladeCrash; }
            set 
            {
                if (_detectBladeCrash != value)
                {
                    _detectBladeCrash = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.5 and 1.5</summary>
        [Newtonsoft.Json.JsonProperty("bladeCrashThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BladeCrashThreshold
        {
            get { return _bladeCrashThreshold; }
            set 
            {
                if (_bladeCrashThreshold != value)
                {
                    _bladeCrashThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, a predistorted STL file will be created using the distortion simulated by the mechanics solver</summary>
        [Newtonsoft.Json.JsonProperty("performDistortionCompensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PerformDistortionCompensation
        {
            get { return _performDistortionCompensation; }
            set 
            {
                if (_performDistortionCompensation != value)
                {
                    _performDistortionCompensation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a value that is used to scale the simulated distortion value</summary>
        [Newtonsoft.Json.JsonProperty("distortionScaleFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-5, 5)]
        public double? DistortionScaleFactor
        {
            get { return _distortionScaleFactor; }
            set 
            {
                if (_distortionScaleFactor != value)
                {
                    _distortionScaleFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of distortion scale factor values, each one will produce a separate distortion output</summary>
        [Newtonsoft.Json.JsonProperty("distortionScaleFactorValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> DistortionScaleFactorValues
        {
            get { return _distortionScaleFactorValues; }
            set 
            {
                if (_distortionScaleFactorValues != value)
                {
                    _distortionScaleFactorValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, a VTK file of the support structure will be created</summary>
        [Newtonsoft.Json.JsonProperty("outputSupportsVtk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OutputSupportsVtk
        {
            get { return _outputSupportsVtk; }
            set 
            {
                if (_outputSupportsVtk != value)
                {
                    _outputSupportsVtk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detectSupportFailure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DetectSupportFailure
        {
            get { return _detectSupportFailure; }
            set 
            {
                if (_detectSupportFailure != value)
                {
                    _detectSupportFailure = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.01 and 1.0</summary>
        [Newtonsoft.Json.JsonProperty("supportFailureThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SupportFailureThreshold
        {
            get { return _supportFailureThreshold; }
            set 
            {
                if (_supportFailureThreshold != value)
                {
                    _supportFailureThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.01 and 1.0</summary>
        [Newtonsoft.Json.JsonProperty("partFailureThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PartFailureThreshold
        {
            get { return _partFailureThreshold; }
            set 
            {
                if (_partFailureThreshold != value)
                {
                    _partFailureThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.01 and 1.0</summary>
        [Newtonsoft.Json.JsonProperty("strainWarningThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrainWarningThreshold
        {
            get { return _strainWarningThreshold; }
            set 
            {
                if (_strainWarningThreshold != value)
                {
                    _strainWarningThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, a predistorted STL file will be created using the distortion after cutoff simulated by the mechanics solver</summary>
        [Newtonsoft.Json.JsonProperty("performDistortionCompensationAfterCutoff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PerformDistortionCompensationAfterCutoff
        {
            get { return _performDistortionCompensationAfterCutoff; }
            set 
            {
                if (_performDistortionCompensationAfterCutoff != value)
                {
                    _performDistortionCompensationAfterCutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a value that is used to scale the after cutoff simulated distortion values</summary>
        [Newtonsoft.Json.JsonProperty("distortionAfterCutoffScaleFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-5, 5)]
        public double? DistortionAfterCutoffScaleFactor
        {
            get { return _distortionAfterCutoffScaleFactor; }
            set 
            {
                if (_distortionAfterCutoffScaleFactor != value)
                {
                    _distortionAfterCutoffScaleFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of distortion after cutoff scale factor values, each one will produce a separate distortion after cutoff output</summary>
        [Newtonsoft.Json.JsonProperty("distortionAfterCutoffScaleFactorValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> DistortionAfterCutoffScaleFactorValues
        {
            get { return _distortionAfterCutoffScaleFactorValues; }
            set 
            {
                if (_distortionAfterCutoffScaleFactorValues != value)
                {
                    _distortionAfterCutoffScaleFactorValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>type of support used for simulation.</summary>
        [Newtonsoft.Json.JsonProperty("supportType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartBasedSimulationParametersSupportType SupportType
        {
            get { return _supportType; }
            set 
            {
                if (_supportType != value)
                {
                    _supportType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the amount of sub voxels per voxel in each direction (x,y,z)</summary>
        [Newtonsoft.Json.JsonProperty("voxelSampleRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 10)]
        public int? VoxelSampleRate
        {
            get { return _voxelSampleRate; }
            set 
            {
                if (_voxelSampleRate != value)
                {
                    _voxelSampleRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, the on-plate stress output file will include the on-plate strain</summary>
        [Newtonsoft.Json.JsonProperty("includeOnPlateStrainOutput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeOnPlateStrainOutput
        {
            get { return _includeOnPlateStrainOutput; }
            set 
            {
                if (_includeOnPlateStrainOutput != value)
                {
                    _includeOnPlateStrainOutput = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, contour scan vectors is used in scan pattern simulation</summary>
        [Newtonsoft.Json.JsonProperty("enableContours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableContours
        {
            get { return _enableContours; }
            set 
            {
                if (_enableContours != value)
                {
                    _enableContours = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("loadSteppingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartBasedSimulationParametersLoadSteppingType? LoadSteppingType
        {
            get { return _loadSteppingType; }
            set 
            {
                if (_loadSteppingType != value)
                {
                    _loadSteppingType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("loadSteps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 200)]
        public int? LoadSteps
        {
            get { return _loadSteps; }
            set 
            {
                if (_loadSteps != value)
                {
                    _loadSteps = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, mechanics solver output will include files related to passing mesh and inital state to ANSYS Workbench</summary>
        [Newtonsoft.Json.JsonProperty("outputMapdl", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputMapdl
        {
            get { return _outputMapdl; }
            set 
            {
                if (_outputMapdl != value)
                {
                    _outputMapdl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PartBasedSimulationParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartBasedSimulationParameters>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AssumedStrainSimulationParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _layerThickness;
    
        /// <summary>Must be between 0.00001 to 0.0001 meters</summary>
        [Newtonsoft.Json.JsonProperty("layerThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? LayerThickness
        {
            get { return _layerThickness; }
            set 
            {
                if (_layerThickness != value)
                {
                    _layerThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssumedStrainSimulationParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssumedStrainSimulationParameters>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AssumedStrainSimulation : Simulation, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<SimulationPart> _simulationParts;
        private string _supportFileLocation;
        private string _partFileLocation;
        private double _supportYieldStrength;
        private double _supportYieldStrengthRatio;
        private double _elasticModulus;
        private double _poissonRatio;
        private double _hardeningFactor;
        private double _strainScalingFactor;
        private int? _buildFileId;
        private bool _performSupportOptimization;
        private double _voxelSize;
        private double? _minimumThickWallThickness;
        private double? _maximumThickWallThickness;
        private double? _thickWallDistance;
        private double? _thinWallThickness;
        private double? _maximumThinWallDistance;
        private double _minimumSupportHeight;
        private bool _generateSupportVoxels;
        private bool _outputDisplacementAfterCutoff;
        private bool _performSupportOnlyCutoff;
        private PartBasedSimulationParametersStressMode _stressMode;
        private double _supportAngle;
        private double _supportFactorOfSafety;
        private bool _outputLayerVtk;
        private bool _detectBladeCrash;
        private double? _bladeCrashThreshold;
        private bool? _performDistortionCompensation;
        private double? _distortionScaleFactor;
        private System.Collections.ObjectModel.ObservableCollection<double> _distortionScaleFactorValues;
        private bool? _outputSupportsVtk;
        private bool? _detectSupportFailure;
        private double? _supportFailureThreshold;
        private double? _partFailureThreshold;
        private double? _strainWarningThreshold;
        private bool? _performDistortionCompensationAfterCutoff;
        private double? _distortionAfterCutoffScaleFactor;
        private System.Collections.ObjectModel.ObservableCollection<double> _distortionAfterCutoffScaleFactorValues;
        private PartBasedSimulationParametersSupportType _supportType;
        private int? _voxelSampleRate;
        private bool? _includeOnPlateStrainOutput;
        private bool? _enableContours;
        private PartBasedSimulationParametersLoadSteppingType? _loadSteppingType;
        private int? _loadSteps;
        private bool _outputMapdl;
        private double? _layerThickness;
    
        /// <summary>List of parts to simulate (current limit is one part, imposed by server)</summary>
        [Newtonsoft.Json.JsonProperty("simulationParts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SimulationPart> SimulationParts
        {
            get { return _simulationParts; }
            set 
            {
                if (_simulationParts != value)
                {
                    _simulationParts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportFileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupportFileLocation
        {
            get { return _supportFileLocation; }
            set 
            {
                if (_supportFileLocation != value)
                {
                    _supportFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("partFileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartFileLocation
        {
            get { return _partFileLocation; }
            set 
            {
                if (_partFileLocation != value)
                {
                    _partFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportYieldStrength", Required = Newtonsoft.Json.Required.Always)]
        public double SupportYieldStrength
        {
            get { return _supportYieldStrength; }
            set 
            {
                if (_supportYieldStrength != value)
                {
                    _supportYieldStrength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportYieldStrengthRatio", Required = Newtonsoft.Json.Required.Always)]
        public double SupportYieldStrengthRatio
        {
            get { return _supportYieldStrengthRatio; }
            set 
            {
                if (_supportYieldStrengthRatio != value)
                {
                    _supportYieldStrengthRatio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("elasticModulus", Required = Newtonsoft.Json.Required.Always)]
        public double ElasticModulus
        {
            get { return _elasticModulus; }
            set 
            {
                if (_elasticModulus != value)
                {
                    _elasticModulus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poissonRatio", Required = Newtonsoft.Json.Required.Always)]
        public double PoissonRatio
        {
            get { return _poissonRatio; }
            set 
            {
                if (_poissonRatio != value)
                {
                    _poissonRatio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hardeningFactor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double HardeningFactor
        {
            get { return _hardeningFactor; }
            set 
            {
                if (_hardeningFactor != value)
                {
                    _hardeningFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("strainScalingFactor", Required = Newtonsoft.Json.Required.Always)]
        public double StrainScalingFactor
        {
            get { return _strainScalingFactor; }
            set 
            {
                if (_strainScalingFactor != value)
                {
                    _strainScalingFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of build file being simulated, mutually exclusive with simulationParts</summary>
        [Newtonsoft.Json.JsonProperty("buildFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BuildFileId
        {
            get { return _buildFileId; }
            set 
            {
                if (_buildFileId != value)
                {
                    _buildFileId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("performSupportOptimization", Required = Newtonsoft.Json.Required.Always)]
        public bool PerformSupportOptimization
        {
            get { return _performSupportOptimization; }
            set 
            {
                if (_performSupportOptimization != value)
                {
                    _performSupportOptimization = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00002 to 0.002 meters</summary>
        [Newtonsoft.Json.JsonProperty("voxelSize", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double VoxelSize
        {
            get { return _voxelSize; }
            set 
            {
                if (_voxelSize != value)
                {
                    _voxelSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00005 to 0.0003 meters, Must be less than maximumWallThickness</summary>
        [Newtonsoft.Json.JsonProperty("minimumThickWallThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? MinimumThickWallThickness
        {
            get { return _minimumThickWallThickness; }
            set 
            {
                if (_minimumThickWallThickness != value)
                {
                    _minimumThickWallThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00015 to 0.002 meters, Must be greater than minimumWallThickness</summary>
        [Newtonsoft.Json.JsonProperty("maximumThickWallThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? MaximumThickWallThickness
        {
            get { return _maximumThickWallThickness; }
            set 
            {
                if (_maximumThickWallThickness != value)
                {
                    _maximumThickWallThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The distance between thickwall supports</summary>
        [Newtonsoft.Json.JsonProperty("thickWallDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? ThickWallDistance
        {
            get { return _thickWallDistance; }
            set 
            {
                if (_thickWallDistance != value)
                {
                    _thickWallDistance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The width of the thinwall supports</summary>
        [Newtonsoft.Json.JsonProperty("thinWallThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? ThinWallThickness
        {
            get { return _thinWallThickness; }
            set 
            {
                if (_thinWallThickness != value)
                {
                    _thinWallThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The maximum distance between thinwalls</summary>
        [Newtonsoft.Json.JsonProperty("maximumThinWallDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? MaximumThinWallDistance
        {
            get { return _maximumThinWallDistance; }
            set 
            {
                if (_maximumThinWallDistance != value)
                {
                    _maximumThinWallDistance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Distance to move the part off the base plate for supports, Must be between 0 to 0.005 meters</summary>
        [Newtonsoft.Json.JsonProperty("minimumSupportHeight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double MinimumSupportHeight
        {
            get { return _minimumSupportHeight; }
            set 
            {
                if (_minimumSupportHeight != value)
                {
                    _minimumSupportHeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("generateSupportVoxels", Required = Newtonsoft.Json.Required.Always)]
        public bool GenerateSupportVoxels
        {
            get { return _generateSupportVoxels; }
            set 
            {
                if (_generateSupportVoxels != value)
                {
                    _generateSupportVoxels = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outputDisplacementAfterCutoff", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputDisplacementAfterCutoff
        {
            get { return _outputDisplacementAfterCutoff; }
            set 
            {
                if (_outputDisplacementAfterCutoff != value)
                {
                    _outputDisplacementAfterCutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("performSupportOnlyCutoff", Required = Newtonsoft.Json.Required.Always)]
        public bool PerformSupportOnlyCutoff
        {
            get { return _performSupportOnlyCutoff; }
            set 
            {
                if (_performSupportOnlyCutoff != value)
                {
                    _performSupportOnlyCutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("stressMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartBasedSimulationParametersStressMode StressMode
        {
            get { return _stressMode; }
            set 
            {
                if (_stressMode != value)
                {
                    _stressMode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 1 to 89 degrees</summary>
        [Newtonsoft.Json.JsonProperty("supportAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 89)]
        public double SupportAngle
        {
            get { return _supportAngle; }
            set 
            {
                if (_supportAngle != value)
                {
                    _supportAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Multiplier for support calculations, Must be between 0.1 to 10</summary>
        [Newtonsoft.Json.JsonProperty("supportFactorOfSafety", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 10)]
        public double SupportFactorOfSafety
        {
            get { return _supportFactorOfSafety; }
            set 
            {
                if (_supportFactorOfSafety != value)
                {
                    _supportFactorOfSafety = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, mechanics solver output will include a zip file with the stress / distortion state at the end of each voxel layer</summary>
        [Newtonsoft.Json.JsonProperty("outputLayerVtk", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputLayerVtk
        {
            get { return _outputLayerVtk; }
            set 
            {
                if (_outputLayerVtk != value)
                {
                    _outputLayerVtk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detectBladeCrash", Required = Newtonsoft.Json.Required.Always)]
        public bool DetectBladeCrash
        {
            get { return _detectBladeCrash; }
            set 
            {
                if (_detectBladeCrash != value)
                {
                    _detectBladeCrash = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.5 and 1.5</summary>
        [Newtonsoft.Json.JsonProperty("bladeCrashThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BladeCrashThreshold
        {
            get { return _bladeCrashThreshold; }
            set 
            {
                if (_bladeCrashThreshold != value)
                {
                    _bladeCrashThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, a predistorted STL file will be created using the distortion simulated by the mechanics solver</summary>
        [Newtonsoft.Json.JsonProperty("performDistortionCompensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PerformDistortionCompensation
        {
            get { return _performDistortionCompensation; }
            set 
            {
                if (_performDistortionCompensation != value)
                {
                    _performDistortionCompensation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a value that is used to scale the simulated distortion value</summary>
        [Newtonsoft.Json.JsonProperty("distortionScaleFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-5, 5)]
        public double? DistortionScaleFactor
        {
            get { return _distortionScaleFactor; }
            set 
            {
                if (_distortionScaleFactor != value)
                {
                    _distortionScaleFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of distortion scale factor values, each one will produce a separate distortion output</summary>
        [Newtonsoft.Json.JsonProperty("distortionScaleFactorValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> DistortionScaleFactorValues
        {
            get { return _distortionScaleFactorValues; }
            set 
            {
                if (_distortionScaleFactorValues != value)
                {
                    _distortionScaleFactorValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, a VTK file of the support structure will be created</summary>
        [Newtonsoft.Json.JsonProperty("outputSupportsVtk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OutputSupportsVtk
        {
            get { return _outputSupportsVtk; }
            set 
            {
                if (_outputSupportsVtk != value)
                {
                    _outputSupportsVtk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detectSupportFailure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DetectSupportFailure
        {
            get { return _detectSupportFailure; }
            set 
            {
                if (_detectSupportFailure != value)
                {
                    _detectSupportFailure = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.01 and 1.0</summary>
        [Newtonsoft.Json.JsonProperty("supportFailureThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SupportFailureThreshold
        {
            get { return _supportFailureThreshold; }
            set 
            {
                if (_supportFailureThreshold != value)
                {
                    _supportFailureThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.01 and 1.0</summary>
        [Newtonsoft.Json.JsonProperty("partFailureThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PartFailureThreshold
        {
            get { return _partFailureThreshold; }
            set 
            {
                if (_partFailureThreshold != value)
                {
                    _partFailureThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.01 and 1.0</summary>
        [Newtonsoft.Json.JsonProperty("strainWarningThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrainWarningThreshold
        {
            get { return _strainWarningThreshold; }
            set 
            {
                if (_strainWarningThreshold != value)
                {
                    _strainWarningThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, a predistorted STL file will be created using the distortion after cutoff simulated by the mechanics solver</summary>
        [Newtonsoft.Json.JsonProperty("performDistortionCompensationAfterCutoff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PerformDistortionCompensationAfterCutoff
        {
            get { return _performDistortionCompensationAfterCutoff; }
            set 
            {
                if (_performDistortionCompensationAfterCutoff != value)
                {
                    _performDistortionCompensationAfterCutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a value that is used to scale the after cutoff simulated distortion values</summary>
        [Newtonsoft.Json.JsonProperty("distortionAfterCutoffScaleFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-5, 5)]
        public double? DistortionAfterCutoffScaleFactor
        {
            get { return _distortionAfterCutoffScaleFactor; }
            set 
            {
                if (_distortionAfterCutoffScaleFactor != value)
                {
                    _distortionAfterCutoffScaleFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of distortion after cutoff scale factor values, each one will produce a separate distortion after cutoff output</summary>
        [Newtonsoft.Json.JsonProperty("distortionAfterCutoffScaleFactorValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> DistortionAfterCutoffScaleFactorValues
        {
            get { return _distortionAfterCutoffScaleFactorValues; }
            set 
            {
                if (_distortionAfterCutoffScaleFactorValues != value)
                {
                    _distortionAfterCutoffScaleFactorValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>type of support used for simulation.</summary>
        [Newtonsoft.Json.JsonProperty("supportType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartBasedSimulationParametersSupportType SupportType
        {
            get { return _supportType; }
            set 
            {
                if (_supportType != value)
                {
                    _supportType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the amount of sub voxels per voxel in each direction (x,y,z)</summary>
        [Newtonsoft.Json.JsonProperty("voxelSampleRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 10)]
        public int? VoxelSampleRate
        {
            get { return _voxelSampleRate; }
            set 
            {
                if (_voxelSampleRate != value)
                {
                    _voxelSampleRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, the on-plate stress output file will include the on-plate strain</summary>
        [Newtonsoft.Json.JsonProperty("includeOnPlateStrainOutput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeOnPlateStrainOutput
        {
            get { return _includeOnPlateStrainOutput; }
            set 
            {
                if (_includeOnPlateStrainOutput != value)
                {
                    _includeOnPlateStrainOutput = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, contour scan vectors is used in scan pattern simulation</summary>
        [Newtonsoft.Json.JsonProperty("enableContours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableContours
        {
            get { return _enableContours; }
            set 
            {
                if (_enableContours != value)
                {
                    _enableContours = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("loadSteppingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartBasedSimulationParametersLoadSteppingType? LoadSteppingType
        {
            get { return _loadSteppingType; }
            set 
            {
                if (_loadSteppingType != value)
                {
                    _loadSteppingType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("loadSteps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 200)]
        public int? LoadSteps
        {
            get { return _loadSteps; }
            set 
            {
                if (_loadSteps != value)
                {
                    _loadSteps = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, mechanics solver output will include files related to passing mesh and inital state to ANSYS Workbench</summary>
        [Newtonsoft.Json.JsonProperty("outputMapdl", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputMapdl
        {
            get { return _outputMapdl; }
            set 
            {
                if (_outputMapdl != value)
                {
                    _outputMapdl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00001 to 0.0001 meters</summary>
        [Newtonsoft.Json.JsonProperty("layerThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? LayerThickness
        {
            get { return _layerThickness; }
            set 
            {
                if (_layerThickness != value)
                {
                    _layerThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssumedStrainSimulation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssumedStrainSimulation>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ThermalSimulationParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private double _layerThickness;
        private double _hatchSpacing;
        private double _laserWattage;
        private double _scanSpeed;
        private double _slicingStripeWidth;
        private double _startingLayerAngle;
        private double _layerRotationAngle;
        private bool _outputStateMap;
        private bool _outputShrinkage;
        private bool? _outputThermalVtk;
        private string _outputThermalVtkLayers;
        private bool _outputPointThermalHistory;
        private double? _staticVirtualSensorRadius;
        private bool _includeStressAnalysis;
        private double _anisotropicStrainCoefficientsParallel;
        private double _anisotropicStrainCoefficientsPerpendicular;
        private double _anisotropicStrainCoefficientsZ;
        private System.Collections.ObjectModel.ObservableCollection<SelectedPoint> _selectedPoints;
        private double? _heaterTemperature;
        private bool _outputInstantDynamicSensor;
        private double? _instantDynamicSensorRadius;
        private System.Collections.ObjectModel.ObservableCollection<int> _instantDynamicSensorLayers;
        private bool _outputPrintRitePcsSensor;
        private double? _printRitePcsSensorRadius;
        private bool? _pyroVirtualSensorOutputAllLayers;
        private bool _outputInstantStaticSensor;
        private double? _instantStaticSensorRadius;
        private bool _outputPointProbe;
        private bool _outputCoaxialAverageSensorData;
        private double? _coaxialAverageSensorRadius;
        private System.Collections.ObjectModel.ObservableCollection<ZHeightRange> _coaxialAverageSensorZHeights;
        private int? _meshResolutionFactor;
        private double _beamDiameter;
    
        /// <summary>Must be between 0.00001 to 0.0001 meters</summary>
        [Newtonsoft.Json.JsonProperty("layerThickness", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double LayerThickness
        {
            get { return _layerThickness; }
            set 
            {
                if (_layerThickness != value)
                {
                    _layerThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00001 to 0.001 meters</summary>
        [Newtonsoft.Json.JsonProperty("hatchSpacing", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double HatchSpacing
        {
            get { return _hatchSpacing; }
            set 
            {
                if (_hatchSpacing != value)
                {
                    _hatchSpacing = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 10 to 1000 watts</summary>
        [Newtonsoft.Json.JsonProperty("laserWattage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(10, 1000)]
        public double LaserWattage
        {
            get { return _laserWattage; }
            set 
            {
                if (_laserWattage != value)
                {
                    _laserWattage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.01 to 10 meters/second</summary>
        [Newtonsoft.Json.JsonProperty("scanSpeed", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 10)]
        public double ScanSpeed
        {
            get { return _scanSpeed; }
            set 
            {
                if (_scanSpeed != value)
                {
                    _scanSpeed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.001 to 0.1 meters</summary>
        [Newtonsoft.Json.JsonProperty("slicingStripeWidth", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double SlicingStripeWidth
        {
            get { return _slicingStripeWidth; }
            set 
            {
                if (_slicingStripeWidth != value)
                {
                    _slicingStripeWidth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("startingLayerAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 180)]
        public double StartingLayerAngle
        {
            get { return _startingLayerAngle; }
            set 
            {
                if (_startingLayerAngle != value)
                {
                    _startingLayerAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("layerRotationAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 180)]
        public double LayerRotationAngle
        {
            get { return _layerRotationAngle; }
            set 
            {
                if (_layerRotationAngle != value)
                {
                    _layerRotationAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outputStateMap", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputStateMap
        {
            get { return _outputStateMap; }
            set 
            {
                if (_outputStateMap != value)
                {
                    _outputStateMap = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outputShrinkage", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputShrinkage
        {
            get { return _outputShrinkage; }
            set 
            {
                if (_outputShrinkage != value)
                {
                    _outputShrinkage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outputThermalVtk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OutputThermalVtk
        {
            get { return _outputThermalVtk; }
            set 
            {
                if (_outputThermalVtk != value)
                {
                    _outputThermalVtk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outputThermalVtkLayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputThermalVtkLayers
        {
            get { return _outputThermalVtkLayers; }
            set 
            {
                if (_outputThermalVtkLayers != value)
                {
                    _outputThermalVtkLayers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>for each slectedPoint, a series of vtk files will output thermal history around that point with a radius of staticVirtualSensorRadius.</summary>
        [Newtonsoft.Json.JsonProperty("outputPointThermalHistory", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputPointThermalHistory
        {
            get { return _outputPointThermalHistory; }
            set 
            {
                if (_outputPointThermalHistory != value)
                {
                    _outputPointThermalHistory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.05 and 5.0 mm</summary>
        [Newtonsoft.Json.JsonProperty("staticVirtualSensorRadius", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StaticVirtualSensorRadius
        {
            get { return _staticVirtualSensorRadius; }
            set 
            {
                if (_staticVirtualSensorRadius != value)
                {
                    _staticVirtualSensorRadius = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>false indicates that only the thermal solver will run, while true indicates that the mechanics solver will run after the thermal solver</summary>
        [Newtonsoft.Json.JsonProperty("includeStressAnalysis", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeStressAnalysis
        {
            get { return _includeStressAnalysis; }
            set 
            {
                if (_includeStressAnalysis != value)
                {
                    _includeStressAnalysis = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientsParallel", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientsParallel
        {
            get { return _anisotropicStrainCoefficientsParallel; }
            set 
            {
                if (_anisotropicStrainCoefficientsParallel != value)
                {
                    _anisotropicStrainCoefficientsParallel = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientsPerpendicular", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientsPerpendicular
        {
            get { return _anisotropicStrainCoefficientsPerpendicular; }
            set 
            {
                if (_anisotropicStrainCoefficientsPerpendicular != value)
                {
                    _anisotropicStrainCoefficientsPerpendicular = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientsZ", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientsZ
        {
            get { return _anisotropicStrainCoefficientsZ; }
            set 
            {
                if (_anisotropicStrainCoefficientsZ != value)
                {
                    _anisotropicStrainCoefficientsZ = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>List of points where the thermal solver will collect thermal history - limit 10</summary>
        [Newtonsoft.Json.JsonProperty("selectedPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SelectedPoint> SelectedPoints
        {
            get { return _selectedPoints; }
            set 
            {
                if (_selectedPoints != value)
                {
                    _selectedPoints = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>heater temperature in degrees kelvin</summary>
        [Newtonsoft.Json.JsonProperty("heaterTemperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(293D, 474D)]
        public double? HeaterTemperature
        {
            get { return _heaterTemperature; }
            set 
            {
                if (_heaterTemperature != value)
                {
                    _heaterTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, dyanmic sensor data will be collected for each layer specified in the instantDynamicSensorLayers property</summary>
        [Newtonsoft.Json.JsonProperty("outputInstantDynamicSensor", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputInstantDynamicSensor
        {
            get { return _outputInstantDynamicSensor; }
            set 
            {
                if (_outputInstantDynamicSensor != value)
                {
                    _outputInstantDynamicSensor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>radius for instant dynamic sensor data collection in mm</summary>
        [Newtonsoft.Json.JsonProperty("instantDynamicSensorRadius", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.05D, 1.5D)]
        public double? InstantDynamicSensorRadius
        {
            get { return _instantDynamicSensorRadius; }
            set 
            {
                if (_instantDynamicSensorRadius != value)
                {
                    _instantDynamicSensorRadius = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of integer layer numbers where instant dynamic sensor data will be collected</summary>
        [Newtonsoft.Json.JsonProperty("instantDynamicSensorLayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> InstantDynamicSensorLayers
        {
            get { return _instantDynamicSensorLayers; }
            set 
            {
                if (_instantDynamicSensorLayers != value)
                {
                    _instantDynamicSensorLayers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, PrintRite sensor data will be collected for each selectedPoint property</summary>
        [Newtonsoft.Json.JsonProperty("outputPrintRitePcsSensor", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputPrintRitePcsSensor
        {
            get { return _outputPrintRitePcsSensor; }
            set 
            {
                if (_outputPrintRitePcsSensor != value)
                {
                    _outputPrintRitePcsSensor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>radius for PrintRite sensor data collection in mm</summary>
        [Newtonsoft.Json.JsonProperty("printRitePcsSensorRadius", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.05D, 1.5D)]
        public double? PrintRitePcsSensorRadius
        {
            get { return _printRitePcsSensorRadius; }
            set 
            {
                if (_printRitePcsSensorRadius != value)
                {
                    _printRitePcsSensorRadius = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, pyrometer sensor data will be collected for every layer</summary>
        [Newtonsoft.Json.JsonProperty("pyroVirtualSensorOutputAllLayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PyroVirtualSensorOutputAllLayers
        {
            get { return _pyroVirtualSensorOutputAllLayers; }
            set 
            {
                if (_pyroVirtualSensorOutputAllLayers != value)
                {
                    _pyroVirtualSensorOutputAllLayers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, instant static sensor data will be collected for each selectedPoint property</summary>
        [Newtonsoft.Json.JsonProperty("outputInstantStaticSensor", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputInstantStaticSensor
        {
            get { return _outputInstantStaticSensor; }
            set 
            {
                if (_outputInstantStaticSensor != value)
                {
                    _outputInstantStaticSensor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>radius for instant static sensor data collection in mm</summary>
        [Newtonsoft.Json.JsonProperty("instantStaticSensorRadius", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.05D, 1.5D)]
        public double? InstantStaticSensorRadius
        {
            get { return _instantStaticSensorRadius; }
            set 
            {
                if (_instantStaticSensorRadius != value)
                {
                    _instantStaticSensorRadius = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, probe sensor data will be collected for each selectedPoint property</summary>
        [Newtonsoft.Json.JsonProperty("outputPointProbe", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputPointProbe
        {
            get { return _outputPointProbe; }
            set 
            {
                if (_outputPointProbe != value)
                {
                    _outputPointProbe = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, coaxial average sensor data will be collected for the deposity layers specified by coaxialAverageSensorZHeights</summary>
        [Newtonsoft.Json.JsonProperty("outputCoaxialAverageSensorData", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputCoaxialAverageSensorData
        {
            get { return _outputCoaxialAverageSensorData; }
            set 
            {
                if (_outputCoaxialAverageSensorData != value)
                {
                    _outputCoaxialAverageSensorData = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.05 and 1.5 mm</summary>
        [Newtonsoft.Json.JsonProperty("coaxialAverageSensorRadius", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CoaxialAverageSensorRadius
        {
            get { return _coaxialAverageSensorRadius; }
            set 
            {
                if (_coaxialAverageSensorRadius != value)
                {
                    _coaxialAverageSensorRadius = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>list of z height (mm) ranges within the part where the coaxial average sensor will collect data</summary>
        [Newtonsoft.Json.JsonProperty("coaxialAverageSensorZHeights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ZHeightRange> CoaxialAverageSensorZHeights
        {
            get { return _coaxialAverageSensorZHeights; }
            set 
            {
                if (_coaxialAverageSensorZHeights != value)
                {
                    _coaxialAverageSensorZHeights = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>multiplier of fine grid spacing for course grid portion of FEA mesh</summary>
        [Newtonsoft.Json.JsonProperty("meshResolutionFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int? MeshResolutionFactor
        {
            get { return _meshResolutionFactor; }
            set 
            {
                if (_meshResolutionFactor != value)
                {
                    _meshResolutionFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>diameter of laser beam in meters</summary>
        [Newtonsoft.Json.JsonProperty("beamDiameter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(8E-05D, 0.00012D)]
        public double BeamDiameter
        {
            get { return _beamDiameter; }
            set 
            {
                if (_beamDiameter != value)
                {
                    _beamDiameter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ThermalSimulationParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ThermalSimulationParameters>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ThermalSimulation : Simulation, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<SimulationPart> _simulationParts;
        private string _supportFileLocation;
        private string _partFileLocation;
        private double _supportYieldStrength;
        private double _supportYieldStrengthRatio;
        private double _elasticModulus;
        private double _poissonRatio;
        private double _hardeningFactor;
        private double _strainScalingFactor;
        private int? _buildFileId;
        private bool _performSupportOptimization;
        private double _voxelSize;
        private double? _minimumThickWallThickness;
        private double? _maximumThickWallThickness;
        private double? _thickWallDistance;
        private double? _thinWallThickness;
        private double? _maximumThinWallDistance;
        private double _minimumSupportHeight;
        private bool _generateSupportVoxels;
        private bool _outputDisplacementAfterCutoff;
        private bool _performSupportOnlyCutoff;
        private PartBasedSimulationParametersStressMode _stressMode;
        private double _supportAngle;
        private double _supportFactorOfSafety;
        private bool _outputLayerVtk;
        private bool _detectBladeCrash;
        private double? _bladeCrashThreshold;
        private bool? _performDistortionCompensation;
        private double? _distortionScaleFactor;
        private System.Collections.ObjectModel.ObservableCollection<double> _distortionScaleFactorValues;
        private bool? _outputSupportsVtk;
        private bool? _detectSupportFailure;
        private double? _supportFailureThreshold;
        private double? _partFailureThreshold;
        private double? _strainWarningThreshold;
        private bool? _performDistortionCompensationAfterCutoff;
        private double? _distortionAfterCutoffScaleFactor;
        private System.Collections.ObjectModel.ObservableCollection<double> _distortionAfterCutoffScaleFactorValues;
        private PartBasedSimulationParametersSupportType _supportType;
        private int? _voxelSampleRate;
        private bool? _includeOnPlateStrainOutput;
        private bool? _enableContours;
        private PartBasedSimulationParametersLoadSteppingType? _loadSteppingType;
        private int? _loadSteps;
        private bool _outputMapdl;
        private double _layerThickness;
        private double _hatchSpacing;
        private double _laserWattage;
        private double _scanSpeed;
        private double _slicingStripeWidth;
        private double _startingLayerAngle;
        private double _layerRotationAngle;
        private bool _outputStateMap;
        private bool _outputShrinkage;
        private bool? _outputThermalVtk;
        private string _outputThermalVtkLayers;
        private bool _outputPointThermalHistory;
        private double? _staticVirtualSensorRadius;
        private bool _includeStressAnalysis;
        private double _anisotropicStrainCoefficientsParallel;
        private double _anisotropicStrainCoefficientsPerpendicular;
        private double _anisotropicStrainCoefficientsZ;
        private System.Collections.ObjectModel.ObservableCollection<SelectedPoint> _selectedPoints;
        private double? _heaterTemperature;
        private bool _outputInstantDynamicSensor;
        private double? _instantDynamicSensorRadius;
        private System.Collections.ObjectModel.ObservableCollection<int> _instantDynamicSensorLayers;
        private bool _outputPrintRitePcsSensor;
        private double? _printRitePcsSensorRadius;
        private bool? _pyroVirtualSensorOutputAllLayers;
        private bool _outputInstantStaticSensor;
        private double? _instantStaticSensorRadius;
        private bool _outputPointProbe;
        private bool _outputCoaxialAverageSensorData;
        private double? _coaxialAverageSensorRadius;
        private System.Collections.ObjectModel.ObservableCollection<ZHeightRange> _coaxialAverageSensorZHeights;
        private int? _meshResolutionFactor;
        private double _beamDiameter;
    
        /// <summary>List of parts to simulate (current limit is one part, imposed by server)</summary>
        [Newtonsoft.Json.JsonProperty("simulationParts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SimulationPart> SimulationParts
        {
            get { return _simulationParts; }
            set 
            {
                if (_simulationParts != value)
                {
                    _simulationParts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportFileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupportFileLocation
        {
            get { return _supportFileLocation; }
            set 
            {
                if (_supportFileLocation != value)
                {
                    _supportFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("partFileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartFileLocation
        {
            get { return _partFileLocation; }
            set 
            {
                if (_partFileLocation != value)
                {
                    _partFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportYieldStrength", Required = Newtonsoft.Json.Required.Always)]
        public double SupportYieldStrength
        {
            get { return _supportYieldStrength; }
            set 
            {
                if (_supportYieldStrength != value)
                {
                    _supportYieldStrength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportYieldStrengthRatio", Required = Newtonsoft.Json.Required.Always)]
        public double SupportYieldStrengthRatio
        {
            get { return _supportYieldStrengthRatio; }
            set 
            {
                if (_supportYieldStrengthRatio != value)
                {
                    _supportYieldStrengthRatio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("elasticModulus", Required = Newtonsoft.Json.Required.Always)]
        public double ElasticModulus
        {
            get { return _elasticModulus; }
            set 
            {
                if (_elasticModulus != value)
                {
                    _elasticModulus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poissonRatio", Required = Newtonsoft.Json.Required.Always)]
        public double PoissonRatio
        {
            get { return _poissonRatio; }
            set 
            {
                if (_poissonRatio != value)
                {
                    _poissonRatio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hardeningFactor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double HardeningFactor
        {
            get { return _hardeningFactor; }
            set 
            {
                if (_hardeningFactor != value)
                {
                    _hardeningFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("strainScalingFactor", Required = Newtonsoft.Json.Required.Always)]
        public double StrainScalingFactor
        {
            get { return _strainScalingFactor; }
            set 
            {
                if (_strainScalingFactor != value)
                {
                    _strainScalingFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of build file being simulated, mutually exclusive with simulationParts</summary>
        [Newtonsoft.Json.JsonProperty("buildFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BuildFileId
        {
            get { return _buildFileId; }
            set 
            {
                if (_buildFileId != value)
                {
                    _buildFileId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("performSupportOptimization", Required = Newtonsoft.Json.Required.Always)]
        public bool PerformSupportOptimization
        {
            get { return _performSupportOptimization; }
            set 
            {
                if (_performSupportOptimization != value)
                {
                    _performSupportOptimization = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00002 to 0.002 meters</summary>
        [Newtonsoft.Json.JsonProperty("voxelSize", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double VoxelSize
        {
            get { return _voxelSize; }
            set 
            {
                if (_voxelSize != value)
                {
                    _voxelSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00005 to 0.0003 meters, Must be less than maximumWallThickness</summary>
        [Newtonsoft.Json.JsonProperty("minimumThickWallThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? MinimumThickWallThickness
        {
            get { return _minimumThickWallThickness; }
            set 
            {
                if (_minimumThickWallThickness != value)
                {
                    _minimumThickWallThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00015 to 0.002 meters, Must be greater than minimumWallThickness</summary>
        [Newtonsoft.Json.JsonProperty("maximumThickWallThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? MaximumThickWallThickness
        {
            get { return _maximumThickWallThickness; }
            set 
            {
                if (_maximumThickWallThickness != value)
                {
                    _maximumThickWallThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The distance between thickwall supports</summary>
        [Newtonsoft.Json.JsonProperty("thickWallDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? ThickWallDistance
        {
            get { return _thickWallDistance; }
            set 
            {
                if (_thickWallDistance != value)
                {
                    _thickWallDistance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The width of the thinwall supports</summary>
        [Newtonsoft.Json.JsonProperty("thinWallThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? ThinWallThickness
        {
            get { return _thinWallThickness; }
            set 
            {
                if (_thinWallThickness != value)
                {
                    _thinWallThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The maximum distance between thinwalls</summary>
        [Newtonsoft.Json.JsonProperty("maximumThinWallDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? MaximumThinWallDistance
        {
            get { return _maximumThinWallDistance; }
            set 
            {
                if (_maximumThinWallDistance != value)
                {
                    _maximumThinWallDistance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Distance to move the part off the base plate for supports, Must be between 0 to 0.005 meters</summary>
        [Newtonsoft.Json.JsonProperty("minimumSupportHeight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double MinimumSupportHeight
        {
            get { return _minimumSupportHeight; }
            set 
            {
                if (_minimumSupportHeight != value)
                {
                    _minimumSupportHeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("generateSupportVoxels", Required = Newtonsoft.Json.Required.Always)]
        public bool GenerateSupportVoxels
        {
            get { return _generateSupportVoxels; }
            set 
            {
                if (_generateSupportVoxels != value)
                {
                    _generateSupportVoxels = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outputDisplacementAfterCutoff", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputDisplacementAfterCutoff
        {
            get { return _outputDisplacementAfterCutoff; }
            set 
            {
                if (_outputDisplacementAfterCutoff != value)
                {
                    _outputDisplacementAfterCutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("performSupportOnlyCutoff", Required = Newtonsoft.Json.Required.Always)]
        public bool PerformSupportOnlyCutoff
        {
            get { return _performSupportOnlyCutoff; }
            set 
            {
                if (_performSupportOnlyCutoff != value)
                {
                    _performSupportOnlyCutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("stressMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartBasedSimulationParametersStressMode StressMode
        {
            get { return _stressMode; }
            set 
            {
                if (_stressMode != value)
                {
                    _stressMode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 1 to 89 degrees</summary>
        [Newtonsoft.Json.JsonProperty("supportAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 89)]
        public double SupportAngle
        {
            get { return _supportAngle; }
            set 
            {
                if (_supportAngle != value)
                {
                    _supportAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Multiplier for support calculations, Must be between 0.1 to 10</summary>
        [Newtonsoft.Json.JsonProperty("supportFactorOfSafety", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 10)]
        public double SupportFactorOfSafety
        {
            get { return _supportFactorOfSafety; }
            set 
            {
                if (_supportFactorOfSafety != value)
                {
                    _supportFactorOfSafety = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, mechanics solver output will include a zip file with the stress / distortion state at the end of each voxel layer</summary>
        [Newtonsoft.Json.JsonProperty("outputLayerVtk", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputLayerVtk
        {
            get { return _outputLayerVtk; }
            set 
            {
                if (_outputLayerVtk != value)
                {
                    _outputLayerVtk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detectBladeCrash", Required = Newtonsoft.Json.Required.Always)]
        public bool DetectBladeCrash
        {
            get { return _detectBladeCrash; }
            set 
            {
                if (_detectBladeCrash != value)
                {
                    _detectBladeCrash = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.5 and 1.5</summary>
        [Newtonsoft.Json.JsonProperty("bladeCrashThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BladeCrashThreshold
        {
            get { return _bladeCrashThreshold; }
            set 
            {
                if (_bladeCrashThreshold != value)
                {
                    _bladeCrashThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, a predistorted STL file will be created using the distortion simulated by the mechanics solver</summary>
        [Newtonsoft.Json.JsonProperty("performDistortionCompensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PerformDistortionCompensation
        {
            get { return _performDistortionCompensation; }
            set 
            {
                if (_performDistortionCompensation != value)
                {
                    _performDistortionCompensation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a value that is used to scale the simulated distortion value</summary>
        [Newtonsoft.Json.JsonProperty("distortionScaleFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-5, 5)]
        public double? DistortionScaleFactor
        {
            get { return _distortionScaleFactor; }
            set 
            {
                if (_distortionScaleFactor != value)
                {
                    _distortionScaleFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of distortion scale factor values, each one will produce a separate distortion output</summary>
        [Newtonsoft.Json.JsonProperty("distortionScaleFactorValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> DistortionScaleFactorValues
        {
            get { return _distortionScaleFactorValues; }
            set 
            {
                if (_distortionScaleFactorValues != value)
                {
                    _distortionScaleFactorValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, a VTK file of the support structure will be created</summary>
        [Newtonsoft.Json.JsonProperty("outputSupportsVtk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OutputSupportsVtk
        {
            get { return _outputSupportsVtk; }
            set 
            {
                if (_outputSupportsVtk != value)
                {
                    _outputSupportsVtk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detectSupportFailure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DetectSupportFailure
        {
            get { return _detectSupportFailure; }
            set 
            {
                if (_detectSupportFailure != value)
                {
                    _detectSupportFailure = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.01 and 1.0</summary>
        [Newtonsoft.Json.JsonProperty("supportFailureThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SupportFailureThreshold
        {
            get { return _supportFailureThreshold; }
            set 
            {
                if (_supportFailureThreshold != value)
                {
                    _supportFailureThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.01 and 1.0</summary>
        [Newtonsoft.Json.JsonProperty("partFailureThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PartFailureThreshold
        {
            get { return _partFailureThreshold; }
            set 
            {
                if (_partFailureThreshold != value)
                {
                    _partFailureThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.01 and 1.0</summary>
        [Newtonsoft.Json.JsonProperty("strainWarningThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrainWarningThreshold
        {
            get { return _strainWarningThreshold; }
            set 
            {
                if (_strainWarningThreshold != value)
                {
                    _strainWarningThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, a predistorted STL file will be created using the distortion after cutoff simulated by the mechanics solver</summary>
        [Newtonsoft.Json.JsonProperty("performDistortionCompensationAfterCutoff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PerformDistortionCompensationAfterCutoff
        {
            get { return _performDistortionCompensationAfterCutoff; }
            set 
            {
                if (_performDistortionCompensationAfterCutoff != value)
                {
                    _performDistortionCompensationAfterCutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a value that is used to scale the after cutoff simulated distortion values</summary>
        [Newtonsoft.Json.JsonProperty("distortionAfterCutoffScaleFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-5, 5)]
        public double? DistortionAfterCutoffScaleFactor
        {
            get { return _distortionAfterCutoffScaleFactor; }
            set 
            {
                if (_distortionAfterCutoffScaleFactor != value)
                {
                    _distortionAfterCutoffScaleFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of distortion after cutoff scale factor values, each one will produce a separate distortion after cutoff output</summary>
        [Newtonsoft.Json.JsonProperty("distortionAfterCutoffScaleFactorValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> DistortionAfterCutoffScaleFactorValues
        {
            get { return _distortionAfterCutoffScaleFactorValues; }
            set 
            {
                if (_distortionAfterCutoffScaleFactorValues != value)
                {
                    _distortionAfterCutoffScaleFactorValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>type of support used for simulation.</summary>
        [Newtonsoft.Json.JsonProperty("supportType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartBasedSimulationParametersSupportType SupportType
        {
            get { return _supportType; }
            set 
            {
                if (_supportType != value)
                {
                    _supportType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the amount of sub voxels per voxel in each direction (x,y,z)</summary>
        [Newtonsoft.Json.JsonProperty("voxelSampleRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 10)]
        public int? VoxelSampleRate
        {
            get { return _voxelSampleRate; }
            set 
            {
                if (_voxelSampleRate != value)
                {
                    _voxelSampleRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, the on-plate stress output file will include the on-plate strain</summary>
        [Newtonsoft.Json.JsonProperty("includeOnPlateStrainOutput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeOnPlateStrainOutput
        {
            get { return _includeOnPlateStrainOutput; }
            set 
            {
                if (_includeOnPlateStrainOutput != value)
                {
                    _includeOnPlateStrainOutput = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, contour scan vectors is used in scan pattern simulation</summary>
        [Newtonsoft.Json.JsonProperty("enableContours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableContours
        {
            get { return _enableContours; }
            set 
            {
                if (_enableContours != value)
                {
                    _enableContours = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("loadSteppingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartBasedSimulationParametersLoadSteppingType? LoadSteppingType
        {
            get { return _loadSteppingType; }
            set 
            {
                if (_loadSteppingType != value)
                {
                    _loadSteppingType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("loadSteps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 200)]
        public int? LoadSteps
        {
            get { return _loadSteps; }
            set 
            {
                if (_loadSteps != value)
                {
                    _loadSteps = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, mechanics solver output will include files related to passing mesh and inital state to ANSYS Workbench</summary>
        [Newtonsoft.Json.JsonProperty("outputMapdl", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputMapdl
        {
            get { return _outputMapdl; }
            set 
            {
                if (_outputMapdl != value)
                {
                    _outputMapdl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00001 to 0.0001 meters</summary>
        [Newtonsoft.Json.JsonProperty("layerThickness", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double LayerThickness
        {
            get { return _layerThickness; }
            set 
            {
                if (_layerThickness != value)
                {
                    _layerThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00001 to 0.001 meters</summary>
        [Newtonsoft.Json.JsonProperty("hatchSpacing", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double HatchSpacing
        {
            get { return _hatchSpacing; }
            set 
            {
                if (_hatchSpacing != value)
                {
                    _hatchSpacing = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 10 to 1000 watts</summary>
        [Newtonsoft.Json.JsonProperty("laserWattage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(10, 1000)]
        public double LaserWattage
        {
            get { return _laserWattage; }
            set 
            {
                if (_laserWattage != value)
                {
                    _laserWattage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.01 to 10 meters/second</summary>
        [Newtonsoft.Json.JsonProperty("scanSpeed", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 10)]
        public double ScanSpeed
        {
            get { return _scanSpeed; }
            set 
            {
                if (_scanSpeed != value)
                {
                    _scanSpeed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.001 to 0.1 meters</summary>
        [Newtonsoft.Json.JsonProperty("slicingStripeWidth", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double SlicingStripeWidth
        {
            get { return _slicingStripeWidth; }
            set 
            {
                if (_slicingStripeWidth != value)
                {
                    _slicingStripeWidth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("startingLayerAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 180)]
        public double StartingLayerAngle
        {
            get { return _startingLayerAngle; }
            set 
            {
                if (_startingLayerAngle != value)
                {
                    _startingLayerAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("layerRotationAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 180)]
        public double LayerRotationAngle
        {
            get { return _layerRotationAngle; }
            set 
            {
                if (_layerRotationAngle != value)
                {
                    _layerRotationAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outputStateMap", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputStateMap
        {
            get { return _outputStateMap; }
            set 
            {
                if (_outputStateMap != value)
                {
                    _outputStateMap = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outputShrinkage", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputShrinkage
        {
            get { return _outputShrinkage; }
            set 
            {
                if (_outputShrinkage != value)
                {
                    _outputShrinkage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outputThermalVtk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OutputThermalVtk
        {
            get { return _outputThermalVtk; }
            set 
            {
                if (_outputThermalVtk != value)
                {
                    _outputThermalVtk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outputThermalVtkLayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputThermalVtkLayers
        {
            get { return _outputThermalVtkLayers; }
            set 
            {
                if (_outputThermalVtkLayers != value)
                {
                    _outputThermalVtkLayers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>for each slectedPoint, a series of vtk files will output thermal history around that point with a radius of staticVirtualSensorRadius.</summary>
        [Newtonsoft.Json.JsonProperty("outputPointThermalHistory", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputPointThermalHistory
        {
            get { return _outputPointThermalHistory; }
            set 
            {
                if (_outputPointThermalHistory != value)
                {
                    _outputPointThermalHistory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.05 and 5.0 mm</summary>
        [Newtonsoft.Json.JsonProperty("staticVirtualSensorRadius", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StaticVirtualSensorRadius
        {
            get { return _staticVirtualSensorRadius; }
            set 
            {
                if (_staticVirtualSensorRadius != value)
                {
                    _staticVirtualSensorRadius = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>false indicates that only the thermal solver will run, while true indicates that the mechanics solver will run after the thermal solver</summary>
        [Newtonsoft.Json.JsonProperty("includeStressAnalysis", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeStressAnalysis
        {
            get { return _includeStressAnalysis; }
            set 
            {
                if (_includeStressAnalysis != value)
                {
                    _includeStressAnalysis = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientsParallel", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientsParallel
        {
            get { return _anisotropicStrainCoefficientsParallel; }
            set 
            {
                if (_anisotropicStrainCoefficientsParallel != value)
                {
                    _anisotropicStrainCoefficientsParallel = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientsPerpendicular", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientsPerpendicular
        {
            get { return _anisotropicStrainCoefficientsPerpendicular; }
            set 
            {
                if (_anisotropicStrainCoefficientsPerpendicular != value)
                {
                    _anisotropicStrainCoefficientsPerpendicular = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientsZ", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientsZ
        {
            get { return _anisotropicStrainCoefficientsZ; }
            set 
            {
                if (_anisotropicStrainCoefficientsZ != value)
                {
                    _anisotropicStrainCoefficientsZ = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>List of points where the thermal solver will collect thermal history - limit 10</summary>
        [Newtonsoft.Json.JsonProperty("selectedPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SelectedPoint> SelectedPoints
        {
            get { return _selectedPoints; }
            set 
            {
                if (_selectedPoints != value)
                {
                    _selectedPoints = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>heater temperature in degrees kelvin</summary>
        [Newtonsoft.Json.JsonProperty("heaterTemperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(293D, 474D)]
        public double? HeaterTemperature
        {
            get { return _heaterTemperature; }
            set 
            {
                if (_heaterTemperature != value)
                {
                    _heaterTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, dyanmic sensor data will be collected for each layer specified in the instantDynamicSensorLayers property</summary>
        [Newtonsoft.Json.JsonProperty("outputInstantDynamicSensor", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputInstantDynamicSensor
        {
            get { return _outputInstantDynamicSensor; }
            set 
            {
                if (_outputInstantDynamicSensor != value)
                {
                    _outputInstantDynamicSensor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>radius for instant dynamic sensor data collection in mm</summary>
        [Newtonsoft.Json.JsonProperty("instantDynamicSensorRadius", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.05D, 1.5D)]
        public double? InstantDynamicSensorRadius
        {
            get { return _instantDynamicSensorRadius; }
            set 
            {
                if (_instantDynamicSensorRadius != value)
                {
                    _instantDynamicSensorRadius = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of integer layer numbers where instant dynamic sensor data will be collected</summary>
        [Newtonsoft.Json.JsonProperty("instantDynamicSensorLayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> InstantDynamicSensorLayers
        {
            get { return _instantDynamicSensorLayers; }
            set 
            {
                if (_instantDynamicSensorLayers != value)
                {
                    _instantDynamicSensorLayers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, PrintRite sensor data will be collected for each selectedPoint property</summary>
        [Newtonsoft.Json.JsonProperty("outputPrintRitePcsSensor", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputPrintRitePcsSensor
        {
            get { return _outputPrintRitePcsSensor; }
            set 
            {
                if (_outputPrintRitePcsSensor != value)
                {
                    _outputPrintRitePcsSensor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>radius for PrintRite sensor data collection in mm</summary>
        [Newtonsoft.Json.JsonProperty("printRitePcsSensorRadius", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.05D, 1.5D)]
        public double? PrintRitePcsSensorRadius
        {
            get { return _printRitePcsSensorRadius; }
            set 
            {
                if (_printRitePcsSensorRadius != value)
                {
                    _printRitePcsSensorRadius = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, pyrometer sensor data will be collected for every layer</summary>
        [Newtonsoft.Json.JsonProperty("pyroVirtualSensorOutputAllLayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PyroVirtualSensorOutputAllLayers
        {
            get { return _pyroVirtualSensorOutputAllLayers; }
            set 
            {
                if (_pyroVirtualSensorOutputAllLayers != value)
                {
                    _pyroVirtualSensorOutputAllLayers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, instant static sensor data will be collected for each selectedPoint property</summary>
        [Newtonsoft.Json.JsonProperty("outputInstantStaticSensor", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputInstantStaticSensor
        {
            get { return _outputInstantStaticSensor; }
            set 
            {
                if (_outputInstantStaticSensor != value)
                {
                    _outputInstantStaticSensor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>radius for instant static sensor data collection in mm</summary>
        [Newtonsoft.Json.JsonProperty("instantStaticSensorRadius", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.05D, 1.5D)]
        public double? InstantStaticSensorRadius
        {
            get { return _instantStaticSensorRadius; }
            set 
            {
                if (_instantStaticSensorRadius != value)
                {
                    _instantStaticSensorRadius = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, probe sensor data will be collected for each selectedPoint property</summary>
        [Newtonsoft.Json.JsonProperty("outputPointProbe", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputPointProbe
        {
            get { return _outputPointProbe; }
            set 
            {
                if (_outputPointProbe != value)
                {
                    _outputPointProbe = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, coaxial average sensor data will be collected for the deposity layers specified by coaxialAverageSensorZHeights</summary>
        [Newtonsoft.Json.JsonProperty("outputCoaxialAverageSensorData", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputCoaxialAverageSensorData
        {
            get { return _outputCoaxialAverageSensorData; }
            set 
            {
                if (_outputCoaxialAverageSensorData != value)
                {
                    _outputCoaxialAverageSensorData = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.05 and 1.5 mm</summary>
        [Newtonsoft.Json.JsonProperty("coaxialAverageSensorRadius", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CoaxialAverageSensorRadius
        {
            get { return _coaxialAverageSensorRadius; }
            set 
            {
                if (_coaxialAverageSensorRadius != value)
                {
                    _coaxialAverageSensorRadius = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>list of z height (mm) ranges within the part where the coaxial average sensor will collect data</summary>
        [Newtonsoft.Json.JsonProperty("coaxialAverageSensorZHeights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ZHeightRange> CoaxialAverageSensorZHeights
        {
            get { return _coaxialAverageSensorZHeights; }
            set 
            {
                if (_coaxialAverageSensorZHeights != value)
                {
                    _coaxialAverageSensorZHeights = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>multiplier of fine grid spacing for course grid portion of FEA mesh</summary>
        [Newtonsoft.Json.JsonProperty("meshResolutionFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int? MeshResolutionFactor
        {
            get { return _meshResolutionFactor; }
            set 
            {
                if (_meshResolutionFactor != value)
                {
                    _meshResolutionFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>diameter of laser beam in meters</summary>
        [Newtonsoft.Json.JsonProperty("beamDiameter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(8E-05D, 0.00012D)]
        public double BeamDiameter
        {
            get { return _beamDiameter; }
            set 
            {
                if (_beamDiameter != value)
                {
                    _beamDiameter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ThermalSimulation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ThermalSimulation>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ScanPatternSimulationParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private double _layerThickness;
        private double _startingLayerAngle;
        private double _layerRotationAngle;
        private bool _outputShrinkage;
        private double _anisotropicStrainCoefficientsParallel;
        private double _anisotropicStrainCoefficientsPerpendicular;
        private double _anisotropicStrainCoefficientsZ;
    
        /// <summary>Must be between 0.00001 to 0.0001 meters</summary>
        [Newtonsoft.Json.JsonProperty("layerThickness", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double LayerThickness
        {
            get { return _layerThickness; }
            set 
            {
                if (_layerThickness != value)
                {
                    _layerThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("startingLayerAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 180)]
        public double StartingLayerAngle
        {
            get { return _startingLayerAngle; }
            set 
            {
                if (_startingLayerAngle != value)
                {
                    _startingLayerAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("layerRotationAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 180)]
        public double LayerRotationAngle
        {
            get { return _layerRotationAngle; }
            set 
            {
                if (_layerRotationAngle != value)
                {
                    _layerRotationAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outputShrinkage", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputShrinkage
        {
            get { return _outputShrinkage; }
            set 
            {
                if (_outputShrinkage != value)
                {
                    _outputShrinkage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientsParallel", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientsParallel
        {
            get { return _anisotropicStrainCoefficientsParallel; }
            set 
            {
                if (_anisotropicStrainCoefficientsParallel != value)
                {
                    _anisotropicStrainCoefficientsParallel = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientsPerpendicular", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientsPerpendicular
        {
            get { return _anisotropicStrainCoefficientsPerpendicular; }
            set 
            {
                if (_anisotropicStrainCoefficientsPerpendicular != value)
                {
                    _anisotropicStrainCoefficientsPerpendicular = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientsZ", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientsZ
        {
            get { return _anisotropicStrainCoefficientsZ; }
            set 
            {
                if (_anisotropicStrainCoefficientsZ != value)
                {
                    _anisotropicStrainCoefficientsZ = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ScanPatternSimulationParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScanPatternSimulationParameters>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ScanPatternSimulation : Simulation, System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<SimulationPart> _simulationParts;
        private string _supportFileLocation;
        private string _partFileLocation;
        private double _supportYieldStrength;
        private double _supportYieldStrengthRatio;
        private double _elasticModulus;
        private double _poissonRatio;
        private double _hardeningFactor;
        private double _strainScalingFactor;
        private int? _buildFileId;
        private bool _performSupportOptimization;
        private double _voxelSize;
        private double? _minimumThickWallThickness;
        private double? _maximumThickWallThickness;
        private double? _thickWallDistance;
        private double? _thinWallThickness;
        private double? _maximumThinWallDistance;
        private double _minimumSupportHeight;
        private bool _generateSupportVoxels;
        private bool _outputDisplacementAfterCutoff;
        private bool _performSupportOnlyCutoff;
        private PartBasedSimulationParametersStressMode _stressMode;
        private double _supportAngle;
        private double _supportFactorOfSafety;
        private bool _outputLayerVtk;
        private bool _detectBladeCrash;
        private double? _bladeCrashThreshold;
        private bool? _performDistortionCompensation;
        private double? _distortionScaleFactor;
        private System.Collections.ObjectModel.ObservableCollection<double> _distortionScaleFactorValues;
        private bool? _outputSupportsVtk;
        private bool? _detectSupportFailure;
        private double? _supportFailureThreshold;
        private double? _partFailureThreshold;
        private double? _strainWarningThreshold;
        private bool? _performDistortionCompensationAfterCutoff;
        private double? _distortionAfterCutoffScaleFactor;
        private System.Collections.ObjectModel.ObservableCollection<double> _distortionAfterCutoffScaleFactorValues;
        private PartBasedSimulationParametersSupportType _supportType;
        private int? _voxelSampleRate;
        private bool? _includeOnPlateStrainOutput;
        private bool? _enableContours;
        private PartBasedSimulationParametersLoadSteppingType? _loadSteppingType;
        private int? _loadSteps;
        private bool _outputMapdl;
        private double _layerThickness;
        private double _startingLayerAngle;
        private double _layerRotationAngle;
        private bool _outputShrinkage;
        private double _anisotropicStrainCoefficientsParallel;
        private double _anisotropicStrainCoefficientsPerpendicular;
        private double _anisotropicStrainCoefficientsZ;
    
        /// <summary>List of parts to simulate (current limit is one part, imposed by server)</summary>
        [Newtonsoft.Json.JsonProperty("simulationParts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SimulationPart> SimulationParts
        {
            get { return _simulationParts; }
            set 
            {
                if (_simulationParts != value)
                {
                    _simulationParts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportFileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupportFileLocation
        {
            get { return _supportFileLocation; }
            set 
            {
                if (_supportFileLocation != value)
                {
                    _supportFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("partFileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartFileLocation
        {
            get { return _partFileLocation; }
            set 
            {
                if (_partFileLocation != value)
                {
                    _partFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportYieldStrength", Required = Newtonsoft.Json.Required.Always)]
        public double SupportYieldStrength
        {
            get { return _supportYieldStrength; }
            set 
            {
                if (_supportYieldStrength != value)
                {
                    _supportYieldStrength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportYieldStrengthRatio", Required = Newtonsoft.Json.Required.Always)]
        public double SupportYieldStrengthRatio
        {
            get { return _supportYieldStrengthRatio; }
            set 
            {
                if (_supportYieldStrengthRatio != value)
                {
                    _supportYieldStrengthRatio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("elasticModulus", Required = Newtonsoft.Json.Required.Always)]
        public double ElasticModulus
        {
            get { return _elasticModulus; }
            set 
            {
                if (_elasticModulus != value)
                {
                    _elasticModulus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poissonRatio", Required = Newtonsoft.Json.Required.Always)]
        public double PoissonRatio
        {
            get { return _poissonRatio; }
            set 
            {
                if (_poissonRatio != value)
                {
                    _poissonRatio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hardeningFactor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double HardeningFactor
        {
            get { return _hardeningFactor; }
            set 
            {
                if (_hardeningFactor != value)
                {
                    _hardeningFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("strainScalingFactor", Required = Newtonsoft.Json.Required.Always)]
        public double StrainScalingFactor
        {
            get { return _strainScalingFactor; }
            set 
            {
                if (_strainScalingFactor != value)
                {
                    _strainScalingFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of build file being simulated, mutually exclusive with simulationParts</summary>
        [Newtonsoft.Json.JsonProperty("buildFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BuildFileId
        {
            get { return _buildFileId; }
            set 
            {
                if (_buildFileId != value)
                {
                    _buildFileId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("performSupportOptimization", Required = Newtonsoft.Json.Required.Always)]
        public bool PerformSupportOptimization
        {
            get { return _performSupportOptimization; }
            set 
            {
                if (_performSupportOptimization != value)
                {
                    _performSupportOptimization = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00002 to 0.002 meters</summary>
        [Newtonsoft.Json.JsonProperty("voxelSize", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double VoxelSize
        {
            get { return _voxelSize; }
            set 
            {
                if (_voxelSize != value)
                {
                    _voxelSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00005 to 0.0003 meters, Must be less than maximumWallThickness</summary>
        [Newtonsoft.Json.JsonProperty("minimumThickWallThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? MinimumThickWallThickness
        {
            get { return _minimumThickWallThickness; }
            set 
            {
                if (_minimumThickWallThickness != value)
                {
                    _minimumThickWallThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00015 to 0.002 meters, Must be greater than minimumWallThickness</summary>
        [Newtonsoft.Json.JsonProperty("maximumThickWallThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? MaximumThickWallThickness
        {
            get { return _maximumThickWallThickness; }
            set 
            {
                if (_maximumThickWallThickness != value)
                {
                    _maximumThickWallThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The distance between thickwall supports</summary>
        [Newtonsoft.Json.JsonProperty("thickWallDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? ThickWallDistance
        {
            get { return _thickWallDistance; }
            set 
            {
                if (_thickWallDistance != value)
                {
                    _thickWallDistance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The width of the thinwall supports</summary>
        [Newtonsoft.Json.JsonProperty("thinWallThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? ThinWallThickness
        {
            get { return _thinWallThickness; }
            set 
            {
                if (_thinWallThickness != value)
                {
                    _thinWallThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The maximum distance between thinwalls</summary>
        [Newtonsoft.Json.JsonProperty("maximumThinWallDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double? MaximumThinWallDistance
        {
            get { return _maximumThinWallDistance; }
            set 
            {
                if (_maximumThinWallDistance != value)
                {
                    _maximumThinWallDistance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Distance to move the part off the base plate for supports, Must be between 0 to 0.005 meters</summary>
        [Newtonsoft.Json.JsonProperty("minimumSupportHeight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double MinimumSupportHeight
        {
            get { return _minimumSupportHeight; }
            set 
            {
                if (_minimumSupportHeight != value)
                {
                    _minimumSupportHeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("generateSupportVoxels", Required = Newtonsoft.Json.Required.Always)]
        public bool GenerateSupportVoxels
        {
            get { return _generateSupportVoxels; }
            set 
            {
                if (_generateSupportVoxels != value)
                {
                    _generateSupportVoxels = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outputDisplacementAfterCutoff", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputDisplacementAfterCutoff
        {
            get { return _outputDisplacementAfterCutoff; }
            set 
            {
                if (_outputDisplacementAfterCutoff != value)
                {
                    _outputDisplacementAfterCutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("performSupportOnlyCutoff", Required = Newtonsoft.Json.Required.Always)]
        public bool PerformSupportOnlyCutoff
        {
            get { return _performSupportOnlyCutoff; }
            set 
            {
                if (_performSupportOnlyCutoff != value)
                {
                    _performSupportOnlyCutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("stressMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartBasedSimulationParametersStressMode StressMode
        {
            get { return _stressMode; }
            set 
            {
                if (_stressMode != value)
                {
                    _stressMode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 1 to 89 degrees</summary>
        [Newtonsoft.Json.JsonProperty("supportAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 89)]
        public double SupportAngle
        {
            get { return _supportAngle; }
            set 
            {
                if (_supportAngle != value)
                {
                    _supportAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Multiplier for support calculations, Must be between 0.1 to 10</summary>
        [Newtonsoft.Json.JsonProperty("supportFactorOfSafety", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 10)]
        public double SupportFactorOfSafety
        {
            get { return _supportFactorOfSafety; }
            set 
            {
                if (_supportFactorOfSafety != value)
                {
                    _supportFactorOfSafety = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, mechanics solver output will include a zip file with the stress / distortion state at the end of each voxel layer</summary>
        [Newtonsoft.Json.JsonProperty("outputLayerVtk", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputLayerVtk
        {
            get { return _outputLayerVtk; }
            set 
            {
                if (_outputLayerVtk != value)
                {
                    _outputLayerVtk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detectBladeCrash", Required = Newtonsoft.Json.Required.Always)]
        public bool DetectBladeCrash
        {
            get { return _detectBladeCrash; }
            set 
            {
                if (_detectBladeCrash != value)
                {
                    _detectBladeCrash = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.5 and 1.5</summary>
        [Newtonsoft.Json.JsonProperty("bladeCrashThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BladeCrashThreshold
        {
            get { return _bladeCrashThreshold; }
            set 
            {
                if (_bladeCrashThreshold != value)
                {
                    _bladeCrashThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, a predistorted STL file will be created using the distortion simulated by the mechanics solver</summary>
        [Newtonsoft.Json.JsonProperty("performDistortionCompensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PerformDistortionCompensation
        {
            get { return _performDistortionCompensation; }
            set 
            {
                if (_performDistortionCompensation != value)
                {
                    _performDistortionCompensation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a value that is used to scale the simulated distortion value</summary>
        [Newtonsoft.Json.JsonProperty("distortionScaleFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-5, 5)]
        public double? DistortionScaleFactor
        {
            get { return _distortionScaleFactor; }
            set 
            {
                if (_distortionScaleFactor != value)
                {
                    _distortionScaleFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of distortion scale factor values, each one will produce a separate distortion output</summary>
        [Newtonsoft.Json.JsonProperty("distortionScaleFactorValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> DistortionScaleFactorValues
        {
            get { return _distortionScaleFactorValues; }
            set 
            {
                if (_distortionScaleFactorValues != value)
                {
                    _distortionScaleFactorValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, a VTK file of the support structure will be created</summary>
        [Newtonsoft.Json.JsonProperty("outputSupportsVtk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OutputSupportsVtk
        {
            get { return _outputSupportsVtk; }
            set 
            {
                if (_outputSupportsVtk != value)
                {
                    _outputSupportsVtk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("detectSupportFailure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DetectSupportFailure
        {
            get { return _detectSupportFailure; }
            set 
            {
                if (_detectSupportFailure != value)
                {
                    _detectSupportFailure = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.01 and 1.0</summary>
        [Newtonsoft.Json.JsonProperty("supportFailureThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SupportFailureThreshold
        {
            get { return _supportFailureThreshold; }
            set 
            {
                if (_supportFailureThreshold != value)
                {
                    _supportFailureThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.01 and 1.0</summary>
        [Newtonsoft.Json.JsonProperty("partFailureThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PartFailureThreshold
        {
            get { return _partFailureThreshold; }
            set 
            {
                if (_partFailureThreshold != value)
                {
                    _partFailureThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>should be a number between 0.01 and 1.0</summary>
        [Newtonsoft.Json.JsonProperty("strainWarningThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StrainWarningThreshold
        {
            get { return _strainWarningThreshold; }
            set 
            {
                if (_strainWarningThreshold != value)
                {
                    _strainWarningThreshold = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, a predistorted STL file will be created using the distortion after cutoff simulated by the mechanics solver</summary>
        [Newtonsoft.Json.JsonProperty("performDistortionCompensationAfterCutoff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PerformDistortionCompensationAfterCutoff
        {
            get { return _performDistortionCompensationAfterCutoff; }
            set 
            {
                if (_performDistortionCompensationAfterCutoff != value)
                {
                    _performDistortionCompensationAfterCutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a value that is used to scale the after cutoff simulated distortion values</summary>
        [Newtonsoft.Json.JsonProperty("distortionAfterCutoffScaleFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-5, 5)]
        public double? DistortionAfterCutoffScaleFactor
        {
            get { return _distortionAfterCutoffScaleFactor; }
            set 
            {
                if (_distortionAfterCutoffScaleFactor != value)
                {
                    _distortionAfterCutoffScaleFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of distortion after cutoff scale factor values, each one will produce a separate distortion after cutoff output</summary>
        [Newtonsoft.Json.JsonProperty("distortionAfterCutoffScaleFactorValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> DistortionAfterCutoffScaleFactorValues
        {
            get { return _distortionAfterCutoffScaleFactorValues; }
            set 
            {
                if (_distortionAfterCutoffScaleFactorValues != value)
                {
                    _distortionAfterCutoffScaleFactorValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>type of support used for simulation.</summary>
        [Newtonsoft.Json.JsonProperty("supportType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartBasedSimulationParametersSupportType SupportType
        {
            get { return _supportType; }
            set 
            {
                if (_supportType != value)
                {
                    _supportType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>the amount of sub voxels per voxel in each direction (x,y,z)</summary>
        [Newtonsoft.Json.JsonProperty("voxelSampleRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 10)]
        public int? VoxelSampleRate
        {
            get { return _voxelSampleRate; }
            set 
            {
                if (_voxelSampleRate != value)
                {
                    _voxelSampleRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, the on-plate stress output file will include the on-plate strain</summary>
        [Newtonsoft.Json.JsonProperty("includeOnPlateStrainOutput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeOnPlateStrainOutput
        {
            get { return _includeOnPlateStrainOutput; }
            set 
            {
                if (_includeOnPlateStrainOutput != value)
                {
                    _includeOnPlateStrainOutput = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, contour scan vectors is used in scan pattern simulation</summary>
        [Newtonsoft.Json.JsonProperty("enableContours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableContours
        {
            get { return _enableContours; }
            set 
            {
                if (_enableContours != value)
                {
                    _enableContours = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("loadSteppingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartBasedSimulationParametersLoadSteppingType? LoadSteppingType
        {
            get { return _loadSteppingType; }
            set 
            {
                if (_loadSteppingType != value)
                {
                    _loadSteppingType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("loadSteps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 200)]
        public int? LoadSteps
        {
            get { return _loadSteps; }
            set 
            {
                if (_loadSteps != value)
                {
                    _loadSteps = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>if true, mechanics solver output will include files related to passing mesh and inital state to ANSYS Workbench</summary>
        [Newtonsoft.Json.JsonProperty("outputMapdl", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputMapdl
        {
            get { return _outputMapdl; }
            set 
            {
                if (_outputMapdl != value)
                {
                    _outputMapdl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0.00001 to 0.0001 meters</summary>
        [Newtonsoft.Json.JsonProperty("layerThickness", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double LayerThickness
        {
            get { return _layerThickness; }
            set 
            {
                if (_layerThickness != value)
                {
                    _layerThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("startingLayerAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 180)]
        public double StartingLayerAngle
        {
            get { return _startingLayerAngle; }
            set 
            {
                if (_startingLayerAngle != value)
                {
                    _startingLayerAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Must be between 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("layerRotationAngle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 180)]
        public double LayerRotationAngle
        {
            get { return _layerRotationAngle; }
            set 
            {
                if (_layerRotationAngle != value)
                {
                    _layerRotationAngle = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("outputShrinkage", Required = Newtonsoft.Json.Required.Always)]
        public bool OutputShrinkage
        {
            get { return _outputShrinkage; }
            set 
            {
                if (_outputShrinkage != value)
                {
                    _outputShrinkage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientsParallel", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientsParallel
        {
            get { return _anisotropicStrainCoefficientsParallel; }
            set 
            {
                if (_anisotropicStrainCoefficientsParallel != value)
                {
                    _anisotropicStrainCoefficientsParallel = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientsPerpendicular", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientsPerpendicular
        {
            get { return _anisotropicStrainCoefficientsPerpendicular; }
            set 
            {
                if (_anisotropicStrainCoefficientsPerpendicular != value)
                {
                    _anisotropicStrainCoefficientsPerpendicular = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientsZ", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientsZ
        {
            get { return _anisotropicStrainCoefficientsZ; }
            set 
            {
                if (_anisotropicStrainCoefficientsZ != value)
                {
                    _anisotropicStrainCoefficientsZ = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ScanPatternSimulation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScanPatternSimulation>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Part : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private int _organizationId;
        private string _name;
        private string _originalFileName;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<string> _tags;
        private string _fileBucket;
        private string _fileLocation;
        private PartAvailability? _availability;
        private bool? _archived;
        private double? _xMin;
        private double? _yMin;
        private double? _zMin;
        private double? _sizeX;
        private double? _sizeY;
        private double? _sizeZ;
        private double? _originalX;
        private double? _originalY;
        private double? _originalZ;
        private int? _triangleCount;
        private double? _volume;
        private System.DateTime? _created;
        private string _createdBy;
        private System.DateTime? _lastModified;
        private string _lastModifiedBy;
        private double? _supportVolume;
        private int? _elements;
        private int? _nodes;
        private double? _collapseCost;
        private double? _surfaceArea;
        private int? _estimatedMemory;
        private int? _maxMemory;
        private int? _estimatedWork;
        private double? _estimateVoxelSize;
        private string _errorReason;
        private System.Collections.ObjectModel.ObservableCollection<PartSupport> _partSupports;
        private System.Collections.ObjectModel.ObservableCollection<PartSupportConfiguration> _partSupportConfigurations;
    
        /// <summary>Id of the part</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of the organization that owns this part record</summary>
        [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.Always)]
        public int OrganizationId
        {
            get { return _organizationId; }
            set 
            {
                if (_organizationId != value)
                {
                    _organizationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The original file name from the user</summary>
        [Newtonsoft.Json.JsonProperty("originalFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalFileName
        {
            get { return _originalFileName; }
            set 
            {
                if (_originalFileName != value)
                {
                    _originalFileName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags
        {
            get { return _tags; }
            set 
            {
                if (_tags != value)
                {
                    _tags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>S3 bucket containing part</summary>
        [Newtonsoft.Json.JsonProperty("fileBucket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileBucket
        {
            get { return _fileBucket; }
            set 
            {
                if (_fileBucket != value)
                {
                    _fileBucket = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>File name of part relative to fileBucket</summary>
        [Newtonsoft.Json.JsonProperty("fileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileLocation
        {
            get { return _fileLocation; }
            set 
            {
                if (_fileLocation != value)
                {
                    _fileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Describes the availabity of the part. Uploaded - the part has been uploaded.  Processing - the part is being processed.  Available - the part was processed successfully and can be used in simulations.  Error - an error occurred, contact Ansys Support.</summary>
        [Newtonsoft.Json.JsonProperty("availability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartAvailability? Availability
        {
            get { return _availability; }
            set 
            {
                if (_availability != value)
                {
                    _availability = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Designates whether this entity has been archived.</summary>
        [Newtonsoft.Json.JsonProperty("archived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Archived
        {
            get { return _archived; }
            set 
            {
                if (_archived != value)
                {
                    _archived = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>x location (in meters) where the lower left corner of the bounding box of the part will be placed on the bed, calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("xMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? XMin
        {
            get { return _xMin; }
            set 
            {
                if (_xMin != value)
                {
                    _xMin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>y location (in meters) where the lower left corner of the bounding box of the part will be placed on the bed, calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("yMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? YMin
        {
            get { return _yMin; }
            set 
            {
                if (_yMin != value)
                {
                    _yMin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>z location (in meters) where the lower left corner of the bounding box of the part will be placed on the bed, calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("zMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ZMin
        {
            get { return _zMin; }
            set 
            {
                if (_zMin != value)
                {
                    _zMin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Width of the Part bounding box (in meters), calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("sizeX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SizeX
        {
            get { return _sizeX; }
            set 
            {
                if (_sizeX != value)
                {
                    _sizeX = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Length of the Part bounding box (in meters), calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("sizeY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SizeY
        {
            get { return _sizeY; }
            set 
            {
                if (_sizeY != value)
                {
                    _sizeY = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Height of the Part bounding box (in meters), calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("sizeZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SizeZ
        {
            get { return _sizeZ; }
            set 
            {
                if (_sizeZ != value)
                {
                    _sizeZ = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The smallest x location before transformation</summary>
        [Newtonsoft.Json.JsonProperty("originalX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OriginalX
        {
            get { return _originalX; }
            set 
            {
                if (_originalX != value)
                {
                    _originalX = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The smallest y location before transformation</summary>
        [Newtonsoft.Json.JsonProperty("originalY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OriginalY
        {
            get { return _originalY; }
            set 
            {
                if (_originalY != value)
                {
                    _originalY = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The smallest z location before transformation</summary>
        [Newtonsoft.Json.JsonProperty("originalZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OriginalZ
        {
            get { return _originalZ; }
            set 
            {
                if (_originalZ != value)
                {
                    _originalZ = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of triangles in the original STL file, calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("triangleCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TriangleCount
        {
            get { return _triangleCount; }
            set 
            {
                if (_triangleCount != value)
                {
                    _triangleCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Approximate volume of the Part (in meters^3), calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Volume
        {
            get { return _volume; }
            set 
            {
                if (_volume != value)
                {
                    _volume = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>created time stamp, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>assigned user, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>last modified time stamp, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastModified
        {
            get { return _lastModified; }
            set 
            {
                if (_lastModified != value)
                {
                    _lastModified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>assigned user, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedBy
        {
            get { return _lastModifiedBy; }
            set 
            {
                if (_lastModifiedBy != value)
                {
                    _lastModifiedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SupportVolume
        {
            get { return _supportVolume; }
            set 
            {
                if (_supportVolume != value)
                {
                    _supportVolume = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("elements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Elements
        {
            get { return _elements; }
            set 
            {
                if (_elements != value)
                {
                    _elements = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nodes
        {
            get { return _nodes; }
            set 
            {
                if (_nodes != value)
                {
                    _nodes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("collapseCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CollapseCost
        {
            get { return _collapseCost; }
            set 
            {
                if (_collapseCost != value)
                {
                    _collapseCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("surfaceArea", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SurfaceArea
        {
            get { return _surfaceArea; }
            set 
            {
                if (_surfaceArea != value)
                {
                    _surfaceArea = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Estimated memory usage for mechanics solver using estimateVoxelSize</summary>
        [Newtonsoft.Json.JsonProperty("estimatedMemory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EstimatedMemory
        {
            get { return _estimatedMemory; }
            set 
            {
                if (_estimatedMemory != value)
                {
                    _estimatedMemory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Estimated max memory usage for mechanics solver using estimateVoxelSize</summary>
        [Newtonsoft.Json.JsonProperty("maxMemory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxMemory
        {
            get { return _maxMemory; }
            set 
            {
                if (_maxMemory != value)
                {
                    _maxMemory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Estimated work using estimateVoxelSize</summary>
        [Newtonsoft.Json.JsonProperty("estimatedWork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EstimatedWork
        {
            get { return _estimatedWork; }
            set 
            {
                if (_estimatedWork != value)
                {
                    _estimatedWork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Voxel size used for estimatedMemory, maxMemory, estimatedWork</summary>
        [Newtonsoft.Json.JsonProperty("estimateVoxelSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimateVoxelSize
        {
            get { return _estimateVoxelSize; }
            set 
            {
                if (_estimateVoxelSize != value)
                {
                    _estimateVoxelSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If an error occurs uploading a part, a string will be populated in this field.</summary>
        [Newtonsoft.Json.JsonProperty("errorReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorReason
        {
            get { return _errorReason; }
            set 
            {
                if (_errorReason != value)
                {
                    _errorReason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>List of supports that have been uploaded for this part</summary>
        [Newtonsoft.Json.JsonProperty("partSupports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PartSupport> PartSupports
        {
            get { return _partSupports; }
            set 
            {
                if (_partSupports != value)
                {
                    _partSupports = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>List of partsupport configurations</summary>
        [Newtonsoft.Json.JsonProperty("partSupportConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PartSupportConfiguration> PartSupportConfigurations
        {
            get { return _partSupportConfigurations; }
            set 
            {
                if (_partSupportConfigurations != value)
                {
                    _partSupportConfigurations = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Part FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Part>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PartPost : System.ComponentModel.INotifyPropertyChanged
    {
        private int _organizationId;
        private string _name;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<string> _tags;
        private string _fileLocation;
    
        /// <summary>Id of the organization that owns this part record</summary>
        [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.Always)]
        public int OrganizationId
        {
            get { return _organizationId; }
            set 
            {
                if (_organizationId != value)
                {
                    _organizationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Name of the part, max 50 characters</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Free form description of the part, max 2048 characters</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Tags can be used for any purpose. Max length of serialized json is 256 characters.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags
        {
            get { return _tags; }
            set 
            {
                if (_tags != value)
                {
                    _tags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Remote s3 key of a newly uploaded stl file.  Use parts/geometryurl endpoint to upload the part before calling POST.  Max length 256 characters.</summary>
        [Newtonsoft.Json.JsonProperty("fileLocation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileLocation
        {
            get { return _fileLocation; }
            set 
            {
                if (_fileLocation != value)
                {
                    _fileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PartPost FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartPost>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CustomMaterialPost : System.ComponentModel.INotifyPropertyChanged
    {
        private int _organizationId;
    
        /// <summary>organization identifier</summary>
        [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.Always)]
        public int OrganizationId
        {
            get { return _organizationId; }
            set 
            {
                if (_organizationId != value)
                {
                    _organizationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomMaterialPost FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomMaterialPost>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Material : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private string _coreVersion;
        private bool _isCore;
        private int _organizationId;
        private string _name;
        private string _description;
        private bool _archived;
        private string _key;
        private int _configurationId;
        private MaterialConfiguration _configuration;
        private System.Collections.ObjectModel.ObservableCollection<MaterialConfiguration> _configurationHistory;
        private System.DateTime _created;
        private string _createdBy;
        private System.DateTime _lastModified;
        private string _lastModifiedBy;
        private bool? _thermalSimulationApproved;
        private bool? _microstructureSimulationApproved;
    
        /// <summary>item identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>version of the core material this material was derived from</summary>
        [Newtonsoft.Json.JsonProperty("coreVersion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CoreVersion
        {
            get { return _coreVersion; }
            set 
            {
                if (_coreVersion != value)
                {
                    _coreVersion = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>flag whether it is a core material or a custom material</summary>
        [Newtonsoft.Json.JsonProperty("isCore", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCore
        {
            get { return _isCore; }
            set 
            {
                if (_isCore != value)
                {
                    _isCore = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>organization identifier</summary>
        [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.Always)]
        public int OrganizationId
        {
            get { return _organizationId; }
            set 
            {
                if (_organizationId != value)
                {
                    _organizationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>material name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>material description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>false if not archived, true if archived</summary>
        [Newtonsoft.Json.JsonProperty("archived", Required = Newtonsoft.Json.Required.Always)]
        public bool Archived
        {
            get { return _archived; }
            set 
            {
                if (_archived != value)
                {
                    _archived = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>key associated with this material.  e.g. Ti64</summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>identifier for the active configuration for this material</summary>
        [Newtonsoft.Json.JsonProperty("configurationId", Required = Newtonsoft.Json.Required.Always)]
        public int ConfigurationId
        {
            get { return _configurationId; }
            set 
            {
                if (_configurationId != value)
                {
                    _configurationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaterialConfiguration Configuration
        {
            get { return _configuration; }
            set 
            {
                if (_configuration != value)
                {
                    _configuration = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configurationHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<MaterialConfiguration> ConfigurationHistory
        {
            get { return _configurationHistory; }
            set 
            {
                if (_configurationHistory != value)
                {
                    _configurationHistory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>created time stamp, set server-side, read only field</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>creating user, set server-side, read only field</summary>
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>last modified time stamp, set server-side, read only field</summary>
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime LastModified
        {
            get { return _lastModified; }
            set 
            {
                if (_lastModified != value)
                {
                    _lastModified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>modifying user, set server-side, read only field</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LastModifiedBy
        {
            get { return _lastModifiedBy; }
            set 
            {
                if (_lastModifiedBy != value)
                {
                    _lastModifiedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>true if the material properites have been tuned for thermal simulations</summary>
        [Newtonsoft.Json.JsonProperty("thermalSimulationApproved", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ThermalSimulationApproved
        {
            get { return _thermalSimulationApproved; }
            set 
            {
                if (_thermalSimulationApproved != value)
                {
                    _thermalSimulationApproved = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>true if the material properites have been tuned for microstructure simulations</summary>
        [Newtonsoft.Json.JsonProperty("microstructureSimulationApproved", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MicrostructureSimulationApproved
        {
            get { return _microstructureSimulationApproved; }
            set 
            {
                if (_microstructureSimulationApproved != value)
                {
                    _microstructureSimulationApproved = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Material FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Material>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MaterialConfiguration : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private int _materialId;
        private System.DateTime _created;
        private string _createdBy;
        private double _extinctionCoefOfPowderLaserSpeedCoef;
        private double _extinctionCoefOfPowderLaserPowerCoef;
        private double _extinctionCoefOfPowderOffset;
        private double _extinctionCoefOfSolidLaserSpeedCoef;
        private double _extinctionCoefOfSolidLaserPowerCoef;
        private double _extinctionCoefOfSolidOffset;
        private double _powderToSolidThermalConductivityRatio;
        private double _powderToSolidSpecificHeatRatio;
        private double _powderToSolidDensityRatio;
        private double _solidThermalConductivityAtRoomTemperature;
        private double _solidDensityAtRoomTemperature;
        private double _solidSpecificHeatAtRoomTemperature;
        private double _vaporizationLatentHeat;
        private double _fusionLatentHeat;
        private double _purgingGasConvectionCoefficient;
        private double _solidusTemperature;
        private double _liquidusTemperature;
        private double _vaporizationTemperature;
        private double _vaporizationStartTemperature;
        private double _solidStateTransitionTemperature;
        private double _energyAbsorbingRateByPowder;
        private double _energyAbsorbingRateBySolid;
        private double _thermalExpansionCoefficient;
        private double _elasticModulus;
        private double _elasticModulusOfBase;
        private double _poissonRatio;
        private double _materialYieldStrength;
        private double _supportYieldStrengthRatio;
        private double _materialStrainSensitivity;
        private double _surfaceTension;
        private double _atomicWeight;
        private double _assumedStrain;
        private double _strainPlasticityRelaxationFactor;
        private double _anisotropicStrainCoefficientParallel;
        private double _anisotropicStrainCoefficientPerpendicular;
        private double _anisotropicStrainCoefficientZ;
        private string _lookupFileLocation;
        private double _capTemperatureLaserSpeedCoef;
        private double _capTemperatureLaserPowerCoef;
        private double _capTemperatureOffset;
        private double _laserSpeedLowerBound;
        private double _laserSpeedUpperBound;
        private double _laserPowerLowerBound;
        private double _laserPowerUpperBound;
        private double _hardeningFactor;
        private double _nucleationConstantInterface;
        private double _nucleationConstantBulk;
        private double? _penetrationDepthPowderCoeffA;
        private double? _penetrationDepthPowderCoeffB;
        private double? _penetrationDepthSolidCoeffA;
        private double? _penetrationDepthSolidCoeffB;
        private double? _absorptivityPowderCoeffA;
        private double? _absorptivityPowderCoeffB;
        private double? _absorptivitySolidCoeffA;
        private double? _absorptivitySolidCoeffB;
        private double? _absorptivityMinimum;
        private double? _absorptivityMaximum;
        private double? _penetrationDepthMinimum;
        private double? _penetrationDepthMaximum;
        private double? _powderPackingDensity;
        private string _w0LookupFileLocation;
    
        /// <summary>material configuration identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>material identifier for this material configuration</summary>
        [Newtonsoft.Json.JsonProperty("materialId", Required = Newtonsoft.Json.Required.Always)]
        public int MaterialId
        {
            get { return _materialId; }
            set 
            {
                if (_materialId != value)
                {
                    _materialId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>created time stamp, set server-side, read only field</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>creating user, set server-side, read only field</summary>
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extinctionCoefOfPowderLaserSpeedCoef", Required = Newtonsoft.Json.Required.Always)]
        public double ExtinctionCoefOfPowderLaserSpeedCoef
        {
            get { return _extinctionCoefOfPowderLaserSpeedCoef; }
            set 
            {
                if (_extinctionCoefOfPowderLaserSpeedCoef != value)
                {
                    _extinctionCoefOfPowderLaserSpeedCoef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extinctionCoefOfPowderLaserPowerCoef", Required = Newtonsoft.Json.Required.Always)]
        public double ExtinctionCoefOfPowderLaserPowerCoef
        {
            get { return _extinctionCoefOfPowderLaserPowerCoef; }
            set 
            {
                if (_extinctionCoefOfPowderLaserPowerCoef != value)
                {
                    _extinctionCoefOfPowderLaserPowerCoef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extinctionCoefOfPowderOffset", Required = Newtonsoft.Json.Required.Always)]
        public double ExtinctionCoefOfPowderOffset
        {
            get { return _extinctionCoefOfPowderOffset; }
            set 
            {
                if (_extinctionCoefOfPowderOffset != value)
                {
                    _extinctionCoefOfPowderOffset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extinctionCoefOfSolidLaserSpeedCoef", Required = Newtonsoft.Json.Required.Always)]
        public double ExtinctionCoefOfSolidLaserSpeedCoef
        {
            get { return _extinctionCoefOfSolidLaserSpeedCoef; }
            set 
            {
                if (_extinctionCoefOfSolidLaserSpeedCoef != value)
                {
                    _extinctionCoefOfSolidLaserSpeedCoef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extinctionCoefOfSolidLaserPowerCoef", Required = Newtonsoft.Json.Required.Always)]
        public double ExtinctionCoefOfSolidLaserPowerCoef
        {
            get { return _extinctionCoefOfSolidLaserPowerCoef; }
            set 
            {
                if (_extinctionCoefOfSolidLaserPowerCoef != value)
                {
                    _extinctionCoefOfSolidLaserPowerCoef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("extinctionCoefOfSolidOffset", Required = Newtonsoft.Json.Required.Always)]
        public double ExtinctionCoefOfSolidOffset
        {
            get { return _extinctionCoefOfSolidOffset; }
            set 
            {
                if (_extinctionCoefOfSolidOffset != value)
                {
                    _extinctionCoefOfSolidOffset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("powderToSolidThermalConductivityRatio", Required = Newtonsoft.Json.Required.Always)]
        public double PowderToSolidThermalConductivityRatio
        {
            get { return _powderToSolidThermalConductivityRatio; }
            set 
            {
                if (_powderToSolidThermalConductivityRatio != value)
                {
                    _powderToSolidThermalConductivityRatio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("powderToSolidSpecificHeatRatio", Required = Newtonsoft.Json.Required.Always)]
        public double PowderToSolidSpecificHeatRatio
        {
            get { return _powderToSolidSpecificHeatRatio; }
            set 
            {
                if (_powderToSolidSpecificHeatRatio != value)
                {
                    _powderToSolidSpecificHeatRatio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("powderToSolidDensityRatio", Required = Newtonsoft.Json.Required.Always)]
        public double PowderToSolidDensityRatio
        {
            get { return _powderToSolidDensityRatio; }
            set 
            {
                if (_powderToSolidDensityRatio != value)
                {
                    _powderToSolidDensityRatio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("solidThermalConductivityAtRoomTemperature", Required = Newtonsoft.Json.Required.Always)]
        public double SolidThermalConductivityAtRoomTemperature
        {
            get { return _solidThermalConductivityAtRoomTemperature; }
            set 
            {
                if (_solidThermalConductivityAtRoomTemperature != value)
                {
                    _solidThermalConductivityAtRoomTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("solidDensityAtRoomTemperature", Required = Newtonsoft.Json.Required.Always)]
        public double SolidDensityAtRoomTemperature
        {
            get { return _solidDensityAtRoomTemperature; }
            set 
            {
                if (_solidDensityAtRoomTemperature != value)
                {
                    _solidDensityAtRoomTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("solidSpecificHeatAtRoomTemperature", Required = Newtonsoft.Json.Required.Always)]
        public double SolidSpecificHeatAtRoomTemperature
        {
            get { return _solidSpecificHeatAtRoomTemperature; }
            set 
            {
                if (_solidSpecificHeatAtRoomTemperature != value)
                {
                    _solidSpecificHeatAtRoomTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vaporizationLatentHeat", Required = Newtonsoft.Json.Required.Always)]
        public double VaporizationLatentHeat
        {
            get { return _vaporizationLatentHeat; }
            set 
            {
                if (_vaporizationLatentHeat != value)
                {
                    _vaporizationLatentHeat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("fusionLatentHeat", Required = Newtonsoft.Json.Required.Always)]
        public double FusionLatentHeat
        {
            get { return _fusionLatentHeat; }
            set 
            {
                if (_fusionLatentHeat != value)
                {
                    _fusionLatentHeat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("purgingGasConvectionCoefficient", Required = Newtonsoft.Json.Required.Always)]
        public double PurgingGasConvectionCoefficient
        {
            get { return _purgingGasConvectionCoefficient; }
            set 
            {
                if (_purgingGasConvectionCoefficient != value)
                {
                    _purgingGasConvectionCoefficient = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("solidusTemperature", Required = Newtonsoft.Json.Required.Always)]
        public double SolidusTemperature
        {
            get { return _solidusTemperature; }
            set 
            {
                if (_solidusTemperature != value)
                {
                    _solidusTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("liquidusTemperature", Required = Newtonsoft.Json.Required.Always)]
        public double LiquidusTemperature
        {
            get { return _liquidusTemperature; }
            set 
            {
                if (_liquidusTemperature != value)
                {
                    _liquidusTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vaporizationTemperature", Required = Newtonsoft.Json.Required.Always)]
        public double VaporizationTemperature
        {
            get { return _vaporizationTemperature; }
            set 
            {
                if (_vaporizationTemperature != value)
                {
                    _vaporizationTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vaporizationStartTemperature", Required = Newtonsoft.Json.Required.Always)]
        public double VaporizationStartTemperature
        {
            get { return _vaporizationStartTemperature; }
            set 
            {
                if (_vaporizationStartTemperature != value)
                {
                    _vaporizationStartTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("solidStateTransitionTemperature", Required = Newtonsoft.Json.Required.Always)]
        public double SolidStateTransitionTemperature
        {
            get { return _solidStateTransitionTemperature; }
            set 
            {
                if (_solidStateTransitionTemperature != value)
                {
                    _solidStateTransitionTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("energyAbsorbingRateByPowder", Required = Newtonsoft.Json.Required.Always)]
        public double EnergyAbsorbingRateByPowder
        {
            get { return _energyAbsorbingRateByPowder; }
            set 
            {
                if (_energyAbsorbingRateByPowder != value)
                {
                    _energyAbsorbingRateByPowder = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("energyAbsorbingRateBySolid", Required = Newtonsoft.Json.Required.Always)]
        public double EnergyAbsorbingRateBySolid
        {
            get { return _energyAbsorbingRateBySolid; }
            set 
            {
                if (_energyAbsorbingRateBySolid != value)
                {
                    _energyAbsorbingRateBySolid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("thermalExpansionCoefficient", Required = Newtonsoft.Json.Required.Always)]
        public double ThermalExpansionCoefficient
        {
            get { return _thermalExpansionCoefficient; }
            set 
            {
                if (_thermalExpansionCoefficient != value)
                {
                    _thermalExpansionCoefficient = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("elasticModulus", Required = Newtonsoft.Json.Required.Always)]
        public double ElasticModulus
        {
            get { return _elasticModulus; }
            set 
            {
                if (_elasticModulus != value)
                {
                    _elasticModulus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("elasticModulusOfBase", Required = Newtonsoft.Json.Required.Always)]
        public double ElasticModulusOfBase
        {
            get { return _elasticModulusOfBase; }
            set 
            {
                if (_elasticModulusOfBase != value)
                {
                    _elasticModulusOfBase = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("poissonRatio", Required = Newtonsoft.Json.Required.Always)]
        public double PoissonRatio
        {
            get { return _poissonRatio; }
            set 
            {
                if (_poissonRatio != value)
                {
                    _poissonRatio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("materialYieldStrength", Required = Newtonsoft.Json.Required.Always)]
        public double MaterialYieldStrength
        {
            get { return _materialYieldStrength; }
            set 
            {
                if (_materialYieldStrength != value)
                {
                    _materialYieldStrength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("supportYieldStrengthRatio", Required = Newtonsoft.Json.Required.Always)]
        public double SupportYieldStrengthRatio
        {
            get { return _supportYieldStrengthRatio; }
            set 
            {
                if (_supportYieldStrengthRatio != value)
                {
                    _supportYieldStrengthRatio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("materialStrainSensitivity", Required = Newtonsoft.Json.Required.Always)]
        public double MaterialStrainSensitivity
        {
            get { return _materialStrainSensitivity; }
            set 
            {
                if (_materialStrainSensitivity != value)
                {
                    _materialStrainSensitivity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("surfaceTension", Required = Newtonsoft.Json.Required.Always)]
        public double SurfaceTension
        {
            get { return _surfaceTension; }
            set 
            {
                if (_surfaceTension != value)
                {
                    _surfaceTension = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("atomicWeight", Required = Newtonsoft.Json.Required.Always)]
        public double AtomicWeight
        {
            get { return _atomicWeight; }
            set 
            {
                if (_atomicWeight != value)
                {
                    _atomicWeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("assumedStrain", Required = Newtonsoft.Json.Required.Always)]
        public double AssumedStrain
        {
            get { return _assumedStrain; }
            set 
            {
                if (_assumedStrain != value)
                {
                    _assumedStrain = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("strainPlasticityRelaxationFactor", Required = Newtonsoft.Json.Required.Always)]
        public double StrainPlasticityRelaxationFactor
        {
            get { return _strainPlasticityRelaxationFactor; }
            set 
            {
                if (_strainPlasticityRelaxationFactor != value)
                {
                    _strainPlasticityRelaxationFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientParallel", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientParallel
        {
            get { return _anisotropicStrainCoefficientParallel; }
            set 
            {
                if (_anisotropicStrainCoefficientParallel != value)
                {
                    _anisotropicStrainCoefficientParallel = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientPerpendicular", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientPerpendicular
        {
            get { return _anisotropicStrainCoefficientPerpendicular; }
            set 
            {
                if (_anisotropicStrainCoefficientPerpendicular != value)
                {
                    _anisotropicStrainCoefficientPerpendicular = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("anisotropicStrainCoefficientZ", Required = Newtonsoft.Json.Required.Always)]
        public double AnisotropicStrainCoefficientZ
        {
            get { return _anisotropicStrainCoefficientZ; }
            set 
            {
                if (_anisotropicStrainCoefficientZ != value)
                {
                    _anisotropicStrainCoefficientZ = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Location where the lookup file is stored.  Set server side.  Only used internally.</summary>
        [Newtonsoft.Json.JsonProperty("lookupFileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LookupFileLocation
        {
            get { return _lookupFileLocation; }
            set 
            {
                if (_lookupFileLocation != value)
                {
                    _lookupFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("capTemperatureLaserSpeedCoef", Required = Newtonsoft.Json.Required.Always)]
        public double CapTemperatureLaserSpeedCoef
        {
            get { return _capTemperatureLaserSpeedCoef; }
            set 
            {
                if (_capTemperatureLaserSpeedCoef != value)
                {
                    _capTemperatureLaserSpeedCoef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("capTemperatureLaserPowerCoef", Required = Newtonsoft.Json.Required.Always)]
        public double CapTemperatureLaserPowerCoef
        {
            get { return _capTemperatureLaserPowerCoef; }
            set 
            {
                if (_capTemperatureLaserPowerCoef != value)
                {
                    _capTemperatureLaserPowerCoef = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("capTemperatureOffset", Required = Newtonsoft.Json.Required.Always)]
        public double CapTemperatureOffset
        {
            get { return _capTemperatureOffset; }
            set 
            {
                if (_capTemperatureOffset != value)
                {
                    _capTemperatureOffset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("laserSpeedLowerBound", Required = Newtonsoft.Json.Required.Always)]
        public double LaserSpeedLowerBound
        {
            get { return _laserSpeedLowerBound; }
            set 
            {
                if (_laserSpeedLowerBound != value)
                {
                    _laserSpeedLowerBound = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("laserSpeedUpperBound", Required = Newtonsoft.Json.Required.Always)]
        public double LaserSpeedUpperBound
        {
            get { return _laserSpeedUpperBound; }
            set 
            {
                if (_laserSpeedUpperBound != value)
                {
                    _laserSpeedUpperBound = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("laserPowerLowerBound", Required = Newtonsoft.Json.Required.Always)]
        public double LaserPowerLowerBound
        {
            get { return _laserPowerLowerBound; }
            set 
            {
                if (_laserPowerLowerBound != value)
                {
                    _laserPowerLowerBound = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("laserPowerUpperBound", Required = Newtonsoft.Json.Required.Always)]
        public double LaserPowerUpperBound
        {
            get { return _laserPowerUpperBound; }
            set 
            {
                if (_laserPowerUpperBound != value)
                {
                    _laserPowerUpperBound = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("hardeningFactor", Required = Newtonsoft.Json.Required.Always)]
        public double HardeningFactor
        {
            get { return _hardeningFactor; }
            set 
            {
                if (_hardeningFactor != value)
                {
                    _hardeningFactor = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("nucleationConstantInterface", Required = Newtonsoft.Json.Required.Always)]
        public double NucleationConstantInterface
        {
            get { return _nucleationConstantInterface; }
            set 
            {
                if (_nucleationConstantInterface != value)
                {
                    _nucleationConstantInterface = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("nucleationConstantBulk", Required = Newtonsoft.Json.Required.Always)]
        public double NucleationConstantBulk
        {
            get { return _nucleationConstantBulk; }
            set 
            {
                if (_nucleationConstantBulk != value)
                {
                    _nucleationConstantBulk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("penetrationDepthPowderCoeffA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PenetrationDepthPowderCoeffA
        {
            get { return _penetrationDepthPowderCoeffA; }
            set 
            {
                if (_penetrationDepthPowderCoeffA != value)
                {
                    _penetrationDepthPowderCoeffA = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("penetrationDepthPowderCoeffB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PenetrationDepthPowderCoeffB
        {
            get { return _penetrationDepthPowderCoeffB; }
            set 
            {
                if (_penetrationDepthPowderCoeffB != value)
                {
                    _penetrationDepthPowderCoeffB = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("penetrationDepthSolidCoeffA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PenetrationDepthSolidCoeffA
        {
            get { return _penetrationDepthSolidCoeffA; }
            set 
            {
                if (_penetrationDepthSolidCoeffA != value)
                {
                    _penetrationDepthSolidCoeffA = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("penetrationDepthSolidCoeffB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PenetrationDepthSolidCoeffB
        {
            get { return _penetrationDepthSolidCoeffB; }
            set 
            {
                if (_penetrationDepthSolidCoeffB != value)
                {
                    _penetrationDepthSolidCoeffB = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("absorptivityPowderCoeffA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AbsorptivityPowderCoeffA
        {
            get { return _absorptivityPowderCoeffA; }
            set 
            {
                if (_absorptivityPowderCoeffA != value)
                {
                    _absorptivityPowderCoeffA = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("absorptivityPowderCoeffB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AbsorptivityPowderCoeffB
        {
            get { return _absorptivityPowderCoeffB; }
            set 
            {
                if (_absorptivityPowderCoeffB != value)
                {
                    _absorptivityPowderCoeffB = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("absorptivitySolidCoeffA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AbsorptivitySolidCoeffA
        {
            get { return _absorptivitySolidCoeffA; }
            set 
            {
                if (_absorptivitySolidCoeffA != value)
                {
                    _absorptivitySolidCoeffA = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("absorptivitySolidCoeffB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AbsorptivitySolidCoeffB
        {
            get { return _absorptivitySolidCoeffB; }
            set 
            {
                if (_absorptivitySolidCoeffB != value)
                {
                    _absorptivitySolidCoeffB = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("absorptivityMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AbsorptivityMinimum
        {
            get { return _absorptivityMinimum; }
            set 
            {
                if (_absorptivityMinimum != value)
                {
                    _absorptivityMinimum = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("absorptivityMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AbsorptivityMaximum
        {
            get { return _absorptivityMaximum; }
            set 
            {
                if (_absorptivityMaximum != value)
                {
                    _absorptivityMaximum = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("penetrationDepthMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PenetrationDepthMinimum
        {
            get { return _penetrationDepthMinimum; }
            set 
            {
                if (_penetrationDepthMinimum != value)
                {
                    _penetrationDepthMinimum = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("penetrationDepthMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PenetrationDepthMaximum
        {
            get { return _penetrationDepthMaximum; }
            set 
            {
                if (_penetrationDepthMaximum != value)
                {
                    _penetrationDepthMaximum = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("powderPackingDensity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PowderPackingDensity
        {
            get { return _powderPackingDensity; }
            set 
            {
                if (_powderPackingDensity != value)
                {
                    _powderPackingDensity = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Location where tuning method lookup file is stored. Set server side. Only used internally.</summary>
        [Newtonsoft.Json.JsonProperty("w0LookupFileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string W0LookupFileLocation
        {
            get { return _w0LookupFileLocation; }
            set 
            {
                if (_w0LookupFileLocation != value)
                {
                    _w0LookupFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MaterialConfiguration FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MaterialConfiguration>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MachineConfiguration : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private int _machineId;
        private System.DateTime _created;
        private string _createdBy;
        private double _hatchSpacing;
        private double _beamDiameter;
        private double _laserWattage;
        private double _laserWaveLength;
        private double _scanSpeed;
        private double _timeDiscretizationDuringScanning;
        private double _coolingToScanningTimeIncrementRatio;
        private double _totalCoolingTime;
        private double _heaterTemperature;
        private double _layerDelay;
        private double _scanLineDelay;
    
        /// <summary>machine configuration identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>machine identifier for this machine configuration</summary>
        [Newtonsoft.Json.JsonProperty("machineId", Required = Newtonsoft.Json.Required.Always)]
        public int MachineId
        {
            get { return _machineId; }
            set 
            {
                if (_machineId != value)
                {
                    _machineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>created time stamp, set server-side, read only field</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>creating user, set server-side, read only field</summary>
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>distance between hatch lines in meters</summary>
        [Newtonsoft.Json.JsonProperty("hatchSpacing", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1E-05D, 0.002D)]
        public double HatchSpacing
        {
            get { return _hatchSpacing; }
            set 
            {
                if (_hatchSpacing != value)
                {
                    _hatchSpacing = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>diameter of laser beam in meters</summary>
        [Newtonsoft.Json.JsonProperty("beamDiameter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 0.0001D)]
        public double BeamDiameter
        {
            get { return _beamDiameter; }
            set 
            {
                if (_beamDiameter != value)
                {
                    _beamDiameter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>laser power in watts</summary>
        [Newtonsoft.Json.JsonProperty("laserWattage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1000D)]
        public double LaserWattage
        {
            get { return _laserWattage; }
            set 
            {
                if (_laserWattage != value)
                {
                    _laserWattage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>laser light wavelength in meters</summary>
        [Newtonsoft.Json.JsonProperty("laserWaveLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1E-05D)]
        public double LaserWaveLength
        {
            get { return _laserWaveLength; }
            set 
            {
                if (_laserWaveLength != value)
                {
                    _laserWaveLength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>speed at which laser travels in meters per second</summary>
        [Newtonsoft.Json.JsonProperty("scanSpeed", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0.01D, 10D)]
        public double ScanSpeed
        {
            get { return _scanSpeed; }
            set 
            {
                if (_scanSpeed != value)
                {
                    _scanSpeed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>calculation time interval in seconds</summary>
        [Newtonsoft.Json.JsonProperty("timeDiscretizationDuringScanning", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double TimeDiscretizationDuringScanning
        {
            get { return _timeDiscretizationDuringScanning; }
            set 
            {
                if (_timeDiscretizationDuringScanning != value)
                {
                    _timeDiscretizationDuringScanning = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ratio between cooling to scanning time</summary>
        [Newtonsoft.Json.JsonProperty("coolingToScanningTimeIncrementRatio", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double CoolingToScanningTimeIncrementRatio
        {
            get { return _coolingToScanningTimeIncrementRatio; }
            set 
            {
                if (_coolingToScanningTimeIncrementRatio != value)
                {
                    _coolingToScanningTimeIncrementRatio = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>cooling time prior to deposition of next powder layer in seconds</summary>
        [Newtonsoft.Json.JsonProperty("totalCoolingTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double TotalCoolingTime
        {
            get { return _totalCoolingTime; }
            set 
            {
                if (_totalCoolingTime != value)
                {
                    _totalCoolingTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>heater temperature in degrees kelvin</summary>
        [Newtonsoft.Json.JsonProperty("heaterTemperature", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(293D, 474D)]
        public double HeaterTemperature
        {
            get { return _heaterTemperature; }
            set 
            {
                if (_heaterTemperature != value)
                {
                    _heaterTemperature = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>delay time between layers, stored in seconds</summary>
        [Newtonsoft.Json.JsonProperty("layerDelay", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 60D)]
        public double LayerDelay
        {
            get { return _layerDelay; }
            set 
            {
                if (_layerDelay != value)
                {
                    _layerDelay = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>delay time between scan lines, stored in miliseconds</summary>
        [Newtonsoft.Json.JsonProperty("scanLineDelay", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double ScanLineDelay
        {
            get { return _scanLineDelay; }
            set 
            {
                if (_scanLineDelay != value)
                {
                    _scanLineDelay = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MachineConfiguration FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MachineConfiguration>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Machine : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private bool _isCore;
        private int _organizationId;
        private string _name;
        private string _description;
        private bool _archived;
        private string _key;
        private int _configurationId;
        private MachineConfiguration _configuration;
        private System.Collections.ObjectModel.ObservableCollection<MachineConfiguration> _configurationHistory;
        private System.DateTime _created;
        private string _createdBy;
        private System.DateTime _lastModified;
        private string _lastModifiedBy;
        private string _coreVersion;
    
        /// <summary>machine identifier</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>flag whether it is a core machine or a custom machine</summary>
        [Newtonsoft.Json.JsonProperty("isCore", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCore
        {
            get { return _isCore; }
            set 
            {
                if (_isCore != value)
                {
                    _isCore = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>organization identifier</summary>
        [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.Always)]
        public int OrganizationId
        {
            get { return _organizationId; }
            set 
            {
                if (_organizationId != value)
                {
                    _organizationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>machine name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>machine description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>false if not archived, true if archived</summary>
        [Newtonsoft.Json.JsonProperty("archived", Required = Newtonsoft.Json.Required.Always)]
        public bool Archived
        {
            get { return _archived; }
            set 
            {
                if (_archived != value)
                {
                    _archived = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>key associated with this machine</summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>identifier for the active configuration for the machine</summary>
        [Newtonsoft.Json.JsonProperty("configurationId", Required = Newtonsoft.Json.Required.Always)]
        public int ConfigurationId
        {
            get { return _configurationId; }
            set 
            {
                if (_configurationId != value)
                {
                    _configurationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MachineConfiguration Configuration
        {
            get { return _configuration; }
            set 
            {
                if (_configuration != value)
                {
                    _configuration = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("configurationHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<MachineConfiguration> ConfigurationHistory
        {
            get { return _configurationHistory; }
            set 
            {
                if (_configurationHistory != value)
                {
                    _configurationHistory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>created time stamp, set server-side, read only field</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>creating user, set server-side, read only field</summary>
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>last modified time stamp, set server-side, read only field</summary>
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime LastModified
        {
            get { return _lastModified; }
            set 
            {
                if (_lastModified != value)
                {
                    _lastModified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>modifying user, set server-side, read only field</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LastModifiedBy
        {
            get { return _lastModifiedBy; }
            set 
            {
                if (_lastModifiedBy != value)
                {
                    _lastModifiedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>version of the core machine this machine was derived from</summary>
        [Newtonsoft.Json.JsonProperty("coreVersion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string CoreVersion
        {
            get { return _coreVersion; }
            set 
            {
                if (_coreVersion != value)
                {
                    _coreVersion = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Machine FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Machine>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PartUploadRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _signedUrl;
        private string _s3Key;
    
        [Newtonsoft.Json.JsonProperty("signedUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignedUrl
        {
            get { return _signedUrl; }
            set 
            {
                if (_signedUrl != value)
                {
                    _signedUrl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("s3Key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string S3Key
        {
            get { return _s3Key; }
            set 
            {
                if (_s3Key != value)
                {
                    _s3Key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PartUploadRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartUploadRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PartGeometryUrl : System.ComponentModel.INotifyPropertyChanged
    {
        private string _signedUrl;
    
        [Newtonsoft.Json.JsonProperty("signedUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignedUrl
        {
            get { return _signedUrl; }
            set 
            {
                if (_signedUrl != value)
                {
                    _signedUrl = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PartGeometryUrl FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartGeometryUrl>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GeometryTriangle : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _normalX;
        private double? _normalY;
        private double? _normalZ;
        private double? _vertex1X;
        private double? _vertex1Y;
        private double? _vertex1Z;
        private double? _vertex2X;
        private double? _vertex2Y;
        private double? _vertex2Z;
        private double? _vertex3X;
        private double? _vertex3Y;
        private double? _vertex3Z;
    
        [Newtonsoft.Json.JsonProperty("normalX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NormalX
        {
            get { return _normalX; }
            set 
            {
                if (_normalX != value)
                {
                    _normalX = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("normalY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NormalY
        {
            get { return _normalY; }
            set 
            {
                if (_normalY != value)
                {
                    _normalY = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("normalZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NormalZ
        {
            get { return _normalZ; }
            set 
            {
                if (_normalZ != value)
                {
                    _normalZ = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vertex1X", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Vertex1X
        {
            get { return _vertex1X; }
            set 
            {
                if (_vertex1X != value)
                {
                    _vertex1X = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vertex1Y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Vertex1Y
        {
            get { return _vertex1Y; }
            set 
            {
                if (_vertex1Y != value)
                {
                    _vertex1Y = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vertex1Z", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Vertex1Z
        {
            get { return _vertex1Z; }
            set 
            {
                if (_vertex1Z != value)
                {
                    _vertex1Z = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vertex2X", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Vertex2X
        {
            get { return _vertex2X; }
            set 
            {
                if (_vertex2X != value)
                {
                    _vertex2X = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vertex2Y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Vertex2Y
        {
            get { return _vertex2Y; }
            set 
            {
                if (_vertex2Y != value)
                {
                    _vertex2Y = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vertex2Z", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Vertex2Z
        {
            get { return _vertex2Z; }
            set 
            {
                if (_vertex2Z != value)
                {
                    _vertex2Z = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vertex3X", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Vertex3X
        {
            get { return _vertex3X; }
            set 
            {
                if (_vertex3X != value)
                {
                    _vertex3X = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vertex3Y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Vertex3Y
        {
            get { return _vertex3Y; }
            set 
            {
                if (_vertex3Y != value)
                {
                    _vertex3Y = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("vertex3Z", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Vertex3Z
        {
            get { return _vertex3Z; }
            set 
            {
                if (_vertex3Z != value)
                {
                    _vertex3Z = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeometryTriangle FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeometryTriangle>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Error : System.ComponentModel.INotifyPropertyChanged
    {
        private int _code;
        private string _message;
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        public int Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Error FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>A JSONPatch document as defined by RFC 6902</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PatchDocument : System.ComponentModel.INotifyPropertyChanged
    {
        private PatchDocumentOp _op;
        private string _path;
        private object _value;
        private string _from;
    
        /// <summary>The operation to be performed</summary>
        [Newtonsoft.Json.JsonProperty("op", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PatchDocumentOp Op
        {
            get { return _op; }
            set 
            {
                if (_op != value)
                {
                    _op = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A JSON-Pointer</summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The value to be used within the operations.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A string containing a JSON Pointer value.</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From
        {
            get { return _from; }
            set 
            {
                if (_from != value)
                {
                    _from = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PatchDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PatchDocument>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>contains an estimate (in minutes) for running an assumed strain simulation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SimulationEstimate : System.ComponentModel.INotifyPropertyChanged
    {
        private double _partId;
        private double _estimate;
        private string _type;
        private string _description;
    
        [Newtonsoft.Json.JsonProperty("partId", Required = Newtonsoft.Json.Required.Always)]
        public double PartId
        {
            get { return _partId; }
            set 
            {
                if (_partId != value)
                {
                    _partId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("estimate", Required = Newtonsoft.Json.Required.Always)]
        public double Estimate
        {
            get { return _estimate; }
            set 
            {
                if (_estimate != value)
                {
                    _estimate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Type
        {
            get { return _type; }
            set 
            {
                if (_type != value)
                {
                    _type = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If the estimate is 0, the description field will contain information on why an estimate could not be calculated</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SimulationEstimate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimulationEstimate>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>describes a point</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SelectedPoint : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private int _simulationId;
        private string _label;
        private double _x;
        private double _y;
        private double _z;
        private double? _zMin;
        private double? _zMax;
        private SelectedPointSensorType _sensorType;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("simulationId", Required = Newtonsoft.Json.Required.Always)]
        public int SimulationId
        {
            get { return _simulationId; }
            set 
            {
                if (_simulationId != value)
                {
                    _simulationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label
        {
            get { return _label; }
            set 
            {
                if (_label != value)
                {
                    _label = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Always)]
        public double X
        {
            get { return _x; }
            set 
            {
                if (_x != value)
                {
                    _x = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Always)]
        public double Y
        {
            get { return _y; }
            set 
            {
                if (_y != value)
                {
                    _y = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("z", Required = Newtonsoft.Json.Required.Always)]
        public double Z
        {
            get { return _z; }
            set 
            {
                if (_z != value)
                {
                    _z = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("zMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ZMin
        {
            get { return _zMin; }
            set 
            {
                if (_zMin != value)
                {
                    _zMin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("zMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ZMax
        {
            get { return _zMax; }
            set 
            {
                if (_zMax != value)
                {
                    _zMax = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>type of point, usually relates to sensor that will be using this point</summary>
        [Newtonsoft.Json.JsonProperty("sensorType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SelectedPointSensorType SensorType
        {
            get { return _sensorType; }
            set 
            {
                if (_sensorType != value)
                {
                    _sensorType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SelectedPoint FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SelectedPoint>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>parameters associated with a build file used by machine manufacturers</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BuildFile : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private int? _organizationId;
        private string _name;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<string> _tags;
        private string _buildFileLocation;
        private string _stlFileLocation;
        private string _sliceZipFileLocation;
        private bool _archived;
        private BuildFileAvailability _availability;
        private double _sizeX;
        private double _sizeY;
        private double _sizeZ;
        private System.DateTime? _createdAt;
        private string _createdBy;
        private System.DateTime? _lastModifiedAt;
        private string _lastModifiedBy;
        private string _fileVersion;
        private System.DateTime? _fileCreatedDate;
        private string _errorReason;
        private BuildFileMachineType _machineType;
        private string _materialType;
        private string _jobId;
        private string _jobName;
        private int? _numberOfLayers;
        private double? _totalScanDistance;
        private double? _layerThickness;
        private double? _originalX;
        private double? _originalY;
        private double? _originalZ;
        private string _supportModelFileLocation;
        private string _uploadFileLocation;
        private System.Collections.ObjectModel.ObservableCollection<BuildFileSupport> _buildFileSupports;
        private double? _longestScanVectorLength;
    
        /// <summary>internally assigned identifier for this build file</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>identifier for organization this build file belongs to</summary>
        [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrganizationId
        {
            get { return _organizationId; }
            set 
            {
                if (_organizationId != value)
                {
                    _organizationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a name given to this build file</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a description of this build file</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a comma delimited list of tags assigned to this build file</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags
        {
            get { return _tags; }
            set 
            {
                if (_tags != value)
                {
                    _tags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>folder containing build file contents, multiple files may be contained within the folder</summary>
        [Newtonsoft.Json.JsonProperty("buildFileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildFileLocation
        {
            get { return _buildFileLocation; }
            set 
            {
                if (_buildFileLocation != value)
                {
                    _buildFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>path to STL file describing the part geometry</summary>
        [Newtonsoft.Json.JsonProperty("stlFileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StlFileLocation
        {
            get { return _stlFileLocation; }
            set 
            {
                if (_stlFileLocation != value)
                {
                    _stlFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>path to ZIP file containing scan pattern information for each powder deposition layer</summary>
        [Newtonsoft.Json.JsonProperty("sliceZipFileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SliceZipFileLocation
        {
            get { return _sliceZipFileLocation; }
            set 
            {
                if (_sliceZipFileLocation != value)
                {
                    _sliceZipFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>true if this build file has been archived, false otherwise</summary>
        [Newtonsoft.Json.JsonProperty("archived", Required = Newtonsoft.Json.Required.Always)]
        public bool Archived
        {
            get { return _archived; }
            set 
            {
                if (_archived != value)
                {
                    _archived = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Describes the availabity of the build file. Uploaded - the build file has been uploaded. Processing - the build file is being processed.  Available - the build file was processed successfully and can be used in simulations.  Error - an error occurred and the build file is not available for simulations.</summary>
        [Newtonsoft.Json.JsonProperty("availability", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BuildFileAvailability Availability
        {
            get { return _availability; }
            set 
            {
                if (_availability != value)
                {
                    _availability = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>maximum part dimension in X direction</summary>
        [Newtonsoft.Json.JsonProperty("sizeX", Required = Newtonsoft.Json.Required.Always)]
        public double SizeX
        {
            get { return _sizeX; }
            set 
            {
                if (_sizeX != value)
                {
                    _sizeX = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>maximum part dimension in Y direction</summary>
        [Newtonsoft.Json.JsonProperty("sizeY", Required = Newtonsoft.Json.Required.Always)]
        public double SizeY
        {
            get { return _sizeY; }
            set 
            {
                if (_sizeY != value)
                {
                    _sizeY = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>maximum part dimension in Z direction</summary>
        [Newtonsoft.Json.JsonProperty("sizeZ", Required = Newtonsoft.Json.Required.Always)]
        public double SizeZ
        {
            get { return _sizeZ; }
            set 
            {
                if (_sizeZ != value)
                {
                    _sizeZ = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>time stamp assigned when this build file is created</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreatedAt
        {
            get { return _createdAt; }
            set 
            {
                if (_createdAt != value)
                {
                    _createdAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>name of user or entity that created this build file</summary>
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>time stamp of last change made to this build file</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastModifiedAt
        {
            get { return _lastModifiedAt; }
            set 
            {
                if (_lastModifiedAt != value)
                {
                    _lastModifiedAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>name of user or entity that last changed this build file</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedBy
        {
            get { return _lastModifiedBy; }
            set 
            {
                if (_lastModifiedBy != value)
                {
                    _lastModifiedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>version of this build file</summary>
        [Newtonsoft.Json.JsonProperty("fileVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileVersion
        {
            get { return _fileVersion; }
            set 
            {
                if (_fileVersion != value)
                {
                    _fileVersion = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>creation time stamp from original build file</summary>
        [Newtonsoft.Json.JsonProperty("fileCreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? FileCreatedDate
        {
            get { return _fileCreatedDate; }
            set 
            {
                if (_fileCreatedDate != value)
                {
                    _fileCreatedDate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>reason build file failed to be processed, if any</summary>
        [Newtonsoft.Json.JsonProperty("errorReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorReason
        {
            get { return _errorReason; }
            set 
            {
                if (_errorReason != value)
                {
                    _errorReason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>type of machine associated with this build file</summary>
        [Newtonsoft.Json.JsonProperty("machineType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BuildFileMachineType MachineType
        {
            get { return _machineType; }
            set 
            {
                if (_machineType != value)
                {
                    _machineType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>material to use when performing simulation</summary>
        [Newtonsoft.Json.JsonProperty("materialType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaterialType
        {
            get { return _materialType; }
            set 
            {
                if (_materialType != value)
                {
                    _materialType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>job number associated with this build file</summary>
        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JobId
        {
            get { return _jobId; }
            set 
            {
                if (_jobId != value)
                {
                    _jobId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>job name associated with this build file</summary>
        [Newtonsoft.Json.JsonProperty("jobName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JobName
        {
            get { return _jobName; }
            set 
            {
                if (_jobName != value)
                {
                    _jobName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>number of powder deposition layers</summary>
        [Newtonsoft.Json.JsonProperty("numberOfLayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfLayers
        {
            get { return _numberOfLayers; }
            set 
            {
                if (_numberOfLayers != value)
                {
                    _numberOfLayers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>total distance laser travels when building the part</summary>
        [Newtonsoft.Json.JsonProperty("totalScanDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalScanDistance
        {
            get { return _totalScanDistance; }
            set 
            {
                if (_totalScanDistance != value)
                {
                    _totalScanDistance = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>thickness of powder deposition layer in meters</summary>
        [Newtonsoft.Json.JsonProperty("layerThickness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LayerThickness
        {
            get { return _layerThickness; }
            set 
            {
                if (_layerThickness != value)
                {
                    _layerThickness = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>x position of original part location in millimeters</summary>
        [Newtonsoft.Json.JsonProperty("originalX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OriginalX
        {
            get { return _originalX; }
            set 
            {
                if (_originalX != value)
                {
                    _originalX = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>y position of original part location in millimeters</summary>
        [Newtonsoft.Json.JsonProperty("originalY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OriginalY
        {
            get { return _originalY; }
            set 
            {
                if (_originalY != value)
                {
                    _originalY = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>z position of original part location in millimeters</summary>
        [Newtonsoft.Json.JsonProperty("originalZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OriginalZ
        {
            get { return _originalZ; }
            set 
            {
                if (_originalZ != value)
                {
                    _originalZ = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>path to support model file relative to buildFileLocation</summary>
        [Newtonsoft.Json.JsonProperty("supportModelFileLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupportModelFileLocation
        {
            get { return _supportModelFileLocation; }
            set 
            {
                if (_supportModelFileLocation != value)
                {
                    _supportModelFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>path to uploaded zip file containing build file components, relative to s3 part bucket</summary>
        [Newtonsoft.Json.JsonProperty("uploadFileLocation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string UploadFileLocation
        {
            get { return _uploadFileLocation; }
            set 
            {
                if (_uploadFileLocation != value)
                {
                    _uploadFileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>List of supports for this buildfile</summary>
        [Newtonsoft.Json.JsonProperty("buildFileSupports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<BuildFileSupport> BuildFileSupports
        {
            get { return _buildFileSupports; }
            set 
            {
                if (_buildFileSupports != value)
                {
                    _buildFileSupports = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>length (in meters) of the longest fill scan vector in the scan pattern. Defaults to null</summary>
        [Newtonsoft.Json.JsonProperty("longestScanVectorLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LongestScanVectorLength
        {
            get { return _longestScanVectorLength; }
            set 
            {
                if (_longestScanVectorLength != value)
                {
                    _longestScanVectorLength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BuildFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BuildFile>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BuildFileSupport : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private int _buildFileId;
        private string _originalFileName;
        private string _fileLocation;
        private BuildFileSupportSupportType _supportType;
        private double? _sizeX;
        private double? _sizeY;
        private double? _sizeZ;
        private double? _xMin;
        private double? _yMin;
        private double? _zMin;
    
        /// <summary>Id of the buildfile support</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of the buildfile that owns this support record</summary>
        [Newtonsoft.Json.JsonProperty("buildFileId", Required = Newtonsoft.Json.Required.Always)]
        public int BuildFileId
        {
            get { return _buildFileId; }
            set 
            {
                if (_buildFileId != value)
                {
                    _buildFileId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The original file name from the user</summary>
        [Newtonsoft.Json.JsonProperty("originalFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalFileName
        {
            get { return _originalFileName; }
            set 
            {
                if (_originalFileName != value)
                {
                    _originalFileName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>File name of build file support relative to fileBucket</summary>
        [Newtonsoft.Json.JsonProperty("fileLocation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileLocation
        {
            get { return _fileLocation; }
            set 
            {
                if (_fileLocation != value)
                {
                    _fileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>type of geometry. Volumeless - thinwall, closed - watertight</summary>
        [Newtonsoft.Json.JsonProperty("supportType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BuildFileSupportSupportType SupportType
        {
            get { return _supportType; }
            set 
            {
                if (_supportType != value)
                {
                    _supportType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Width of the Support bounding box (in meters), calculated when the Support is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("sizeX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SizeX
        {
            get { return _sizeX; }
            set 
            {
                if (_sizeX != value)
                {
                    _sizeX = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Length of the Support bounding box (in meters), calculated when the Support is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("sizeY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SizeY
        {
            get { return _sizeY; }
            set 
            {
                if (_sizeY != value)
                {
                    _sizeY = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Height of the Support bounding box (in meters), calculated when the Support is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("sizeZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SizeZ
        {
            get { return _sizeZ; }
            set 
            {
                if (_sizeZ != value)
                {
                    _sizeZ = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>x location (in meters) where the lower left corner of the bounding box of the support, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("xMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? XMin
        {
            get { return _xMin; }
            set 
            {
                if (_xMin != value)
                {
                    _xMin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>y location (in meters) where the lower left corner of the bounding box of the support, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("yMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? YMin
        {
            get { return _yMin; }
            set 
            {
                if (_yMin != value)
                {
                    _yMin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>z location (in meters) where the lower left corner of the bounding box of the support, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("zMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ZMin
        {
            get { return _zMin; }
            set 
            {
                if (_zMin != value)
                {
                    _zMin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BuildFileSupport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BuildFileSupport>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>container for parameters used when posting a new build file</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BuildFilePost : System.ComponentModel.INotifyPropertyChanged
    {
        private int _organizationId;
        private string _name;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<string> _tags;
        private string _fileUploadLocation;
        private string _machineType;
    
        /// <summary>identifier for organization this build file belongs to</summary>
        [Newtonsoft.Json.JsonProperty("organizationId", Required = Newtonsoft.Json.Required.Always)]
        public int OrganizationId
        {
            get { return _organizationId; }
            set 
            {
                if (_organizationId != value)
                {
                    _organizationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a name given to this build file</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a description of this build file</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>a list of tags assigned to this build file</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tags
        {
            get { return _tags; }
            set 
            {
                if (_tags != value)
                {
                    _tags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>path of ZIP file containing build file elements</summary>
        [Newtonsoft.Json.JsonProperty("fileUploadLocation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileUploadLocation
        {
            get { return _fileUploadLocation; }
            set 
            {
                if (_fileUploadLocation != value)
                {
                    _fileUploadLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>type of machine associated with this build file, see BuildFile definition for valid values</summary>
        [Newtonsoft.Json.JsonProperty("machineType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string MachineType
        {
            get { return _machineType; }
            set 
            {
                if (_machineType != value)
                {
                    _machineType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BuildFilePost FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BuildFilePost>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>upper and lower bounds for z dimension of an area of interest</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ZHeightRange : System.ComponentModel.INotifyPropertyChanged
    {
        private double _zHeightLowerBound;
        private double _zHeightUpperBound;
    
        /// <summary>lower bound of area of interest for z dimension in meters</summary>
        [Newtonsoft.Json.JsonProperty("zHeightLowerBound", Required = Newtonsoft.Json.Required.Always)]
        public double ZHeightLowerBound
        {
            get { return _zHeightLowerBound; }
            set 
            {
                if (_zHeightLowerBound != value)
                {
                    _zHeightLowerBound = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>upper bound of area of interest for z dimension in meters</summary>
        [Newtonsoft.Json.JsonProperty("zHeightUpperBound", Required = Newtonsoft.Json.Required.Always)]
        public double ZHeightUpperBound
        {
            get { return _zHeightUpperBound; }
            set 
            {
                if (_zHeightUpperBound != value)
                {
                    _zHeightUpperBound = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ZHeightRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ZHeightRange>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PartSupportPost : System.ComponentModel.INotifyPropertyChanged
    {
        private int _partId;
        private string _name;
        private string _description;
        private string _originalFileName;
        private string _fileLocation;
    
        /// <summary>Id of the part that owns this support record</summary>
        [Newtonsoft.Json.JsonProperty("partId", Required = Newtonsoft.Json.Required.Always)]
        public int PartId
        {
            get { return _partId; }
            set 
            {
                if (_partId != value)
                {
                    _partId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Name of the support, max 50 characters</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Free form description of the support, max 2048 characters</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Original support file name, max 248 characters</summary>
        [Newtonsoft.Json.JsonProperty("originalFileName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string OriginalFileName
        {
            get { return _originalFileName; }
            set 
            {
                if (_originalFileName != value)
                {
                    _originalFileName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Remote s3 key of a newly uploaded stl file.  Use parts/:partId/supports/geometryurl endpoint to upload the support before calling POST.  Max length 256 characters.</summary>
        [Newtonsoft.Json.JsonProperty("fileLocation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileLocation
        {
            get { return _fileLocation; }
            set 
            {
                if (_fileLocation != value)
                {
                    _fileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PartSupportPost FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupportPost>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PartSupport : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private int _partId;
        private string _name;
        private string _originalFileName;
        private string _description;
        private string _fileLocation;
        private bool _archived;
        private PartSupportAvailability _availability;
        private PartSupportSupportType _supportType;
        private double? _xMin;
        private double? _yMin;
        private double? _zMin;
        private double? _sizeX;
        private double? _sizeY;
        private double? _sizeZ;
        private int? _triangleCount;
        private double? _volume;
        private System.DateTime? _created;
        private string _createdBy;
        private System.DateTime? _lastModified;
        private string _lastModifiedBy;
        private int? _elements;
        private int? _nodes;
        private double? _collapseCost;
        private double? _surfaceArea;
        private int? _estimatedMemory;
        private int? _maxMemory;
        private int? _estimatedWork;
        private double? _estimateVoxelSize;
        private double? _minimumSupportHeight;
        private string _errorReason;
        private bool? _lockToPartTranslation;
    
        /// <summary>Id of the part</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of the part that owns this support record</summary>
        [Newtonsoft.Json.JsonProperty("partId", Required = Newtonsoft.Json.Required.Always)]
        public int PartId
        {
            get { return _partId; }
            set 
            {
                if (_partId != value)
                {
                    _partId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The original file name from the user</summary>
        [Newtonsoft.Json.JsonProperty("originalFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalFileName
        {
            get { return _originalFileName; }
            set 
            {
                if (_originalFileName != value)
                {
                    _originalFileName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>File name of part relative to fileBucket</summary>
        [Newtonsoft.Json.JsonProperty("fileLocation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileLocation
        {
            get { return _fileLocation; }
            set 
            {
                if (_fileLocation != value)
                {
                    _fileLocation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Designates whether this entity has been archived.</summary>
        [Newtonsoft.Json.JsonProperty("archived", Required = Newtonsoft.Json.Required.Always)]
        public bool Archived
        {
            get { return _archived; }
            set 
            {
                if (_archived != value)
                {
                    _archived = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Describes the availabity of the part. Uploaded - the part has been uploaded.  Processing - the part is being processed.  Available - the part was processed successfully and can be used in simulations.  Error - an error occurred, contact support@3dsim.com.</summary>
        [Newtonsoft.Json.JsonProperty("availability", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartSupportAvailability Availability
        {
            get { return _availability; }
            set 
            {
                if (_availability != value)
                {
                    _availability = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>type of geometry. Volumeless - thinwall, closed - watertight</summary>
        [Newtonsoft.Json.JsonProperty("supportType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartSupportSupportType SupportType
        {
            get { return _supportType; }
            set 
            {
                if (_supportType != value)
                {
                    _supportType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>x location (in meters) where the lower left corner of the bounding box of the part will be placed on the bed, calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("xMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? XMin
        {
            get { return _xMin; }
            set 
            {
                if (_xMin != value)
                {
                    _xMin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>y location (in meters) where the lower left corner of the bounding box of the part will be placed on the bed, calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("yMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? YMin
        {
            get { return _yMin; }
            set 
            {
                if (_yMin != value)
                {
                    _yMin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>z location (in meters) where the lower left corner of the bounding box of the part will be placed on the bed, calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("zMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ZMin
        {
            get { return _zMin; }
            set 
            {
                if (_zMin != value)
                {
                    _zMin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Width of the Part bounding box (in meters), calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("sizeX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SizeX
        {
            get { return _sizeX; }
            set 
            {
                if (_sizeX != value)
                {
                    _sizeX = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Length of the Part bounding box (in meters), calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("sizeY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SizeY
        {
            get { return _sizeY; }
            set 
            {
                if (_sizeY != value)
                {
                    _sizeY = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Height of the Part bounding box (in meters), calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("sizeZ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SizeZ
        {
            get { return _sizeZ; }
            set 
            {
                if (_sizeZ != value)
                {
                    _sizeZ = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of triangles in the original STL file, calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("triangleCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TriangleCount
        {
            get { return _triangleCount; }
            set 
            {
                if (_triangleCount != value)
                {
                    _triangleCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Approximate volume of the Part (in meters^3), calculated when the part is processed, use 0 for initial post</summary>
        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Volume
        {
            get { return _volume; }
            set 
            {
                if (_volume != value)
                {
                    _volume = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>created time stamp, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Created
        {
            get { return _created; }
            set 
            {
                if (_created != value)
                {
                    _created = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>assigned user, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy
        {
            get { return _createdBy; }
            set 
            {
                if (_createdBy != value)
                {
                    _createdBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>last modified time stamp, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastModified
        {
            get { return _lastModified; }
            set 
            {
                if (_lastModified != value)
                {
                    _lastModified = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>assigned user, set server-side, read only</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedBy
        {
            get { return _lastModifiedBy; }
            set 
            {
                if (_lastModifiedBy != value)
                {
                    _lastModifiedBy = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("elements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Elements
        {
            get { return _elements; }
            set 
            {
                if (_elements != value)
                {
                    _elements = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nodes
        {
            get { return _nodes; }
            set 
            {
                if (_nodes != value)
                {
                    _nodes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("collapseCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CollapseCost
        {
            get { return _collapseCost; }
            set 
            {
                if (_collapseCost != value)
                {
                    _collapseCost = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("surfaceArea", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SurfaceArea
        {
            get { return _surfaceArea; }
            set 
            {
                if (_surfaceArea != value)
                {
                    _surfaceArea = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Estimated memory usage for mechanics solver using estimateVoxelSize</summary>
        [Newtonsoft.Json.JsonProperty("estimatedMemory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EstimatedMemory
        {
            get { return _estimatedMemory; }
            set 
            {
                if (_estimatedMemory != value)
                {
                    _estimatedMemory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Estimated max memory usage for mechanics solver using estimateVoxelSize</summary>
        [Newtonsoft.Json.JsonProperty("maxMemory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxMemory
        {
            get { return _maxMemory; }
            set 
            {
                if (_maxMemory != value)
                {
                    _maxMemory = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Estimated work using estimateVoxelSize</summary>
        [Newtonsoft.Json.JsonProperty("estimatedWork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EstimatedWork
        {
            get { return _estimatedWork; }
            set 
            {
                if (_estimatedWork != value)
                {
                    _estimatedWork = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Voxel size used for estimatedMemory, maxMemory, estimatedWork</summary>
        [Newtonsoft.Json.JsonProperty("estimateVoxelSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimateVoxelSize
        {
            get { return _estimateVoxelSize; }
            set 
            {
                if (_estimateVoxelSize != value)
                {
                    _estimateVoxelSize = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>height (mm) that this support will raise the part</summary>
        [Newtonsoft.Json.JsonProperty("minimumSupportHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinimumSupportHeight
        {
            get { return _minimumSupportHeight; }
            set 
            {
                if (_minimumSupportHeight != value)
                {
                    _minimumSupportHeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If an error occurs uploading a part, a string will be populated in this field.</summary>
        [Newtonsoft.Json.JsonProperty("errorReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorReason
        {
            get { return _errorReason; }
            set 
            {
                if (_errorReason != value)
                {
                    _errorReason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the support should be translated with the part (true), or a minimumSupportHeight will be specified (false).</summary>
        [Newtonsoft.Json.JsonProperty("lockToPartTranslation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LockToPartTranslation
        {
            get { return _lockToPartTranslation; }
            set 
            {
                if (_lockToPartTranslation != value)
                {
                    _lockToPartTranslation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PartSupport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupport>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PartSupportConfiguration : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private int _partId;
        private string _name;
        private string _description;
        private bool _archived;
        private System.Collections.ObjectModel.ObservableCollection<PartSupportSection> _partSupportSections;
    
        /// <summary>Id of the configuration</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of the part used in the configuration</summary>
        [Newtonsoft.Json.JsonProperty("partId", Required = Newtonsoft.Json.Required.Always)]
        public int PartId
        {
            get { return _partId; }
            set 
            {
                if (_partId != value)
                {
                    _partId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the configuration is archived</summary>
        [Newtonsoft.Json.JsonProperty("archived", Required = Newtonsoft.Json.Required.Always)]
        public bool Archived
        {
            get { return _archived; }
            set 
            {
                if (_archived != value)
                {
                    _archived = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>List of sections that are included in the configuration</summary>
        [Newtonsoft.Json.JsonProperty("partSupportSections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PartSupportSection> PartSupportSections
        {
            get { return _partSupportSections; }
            set 
            {
                if (_partSupportSections != value)
                {
                    _partSupportSections = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PartSupportConfiguration FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupportConfiguration>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PartSupportConfigurationPost : System.ComponentModel.INotifyPropertyChanged
    {
        private int _partId;
        private string _name;
        private string _description;
        private System.Collections.ObjectModel.ObservableCollection<int> _partSupportIds = new System.Collections.ObjectModel.ObservableCollection<int>();
    
        /// <summary>Id of the part that owns this configuration</summary>
        [Newtonsoft.Json.JsonProperty("partId", Required = Newtonsoft.Json.Required.Always)]
        public int PartId
        {
            get { return _partId; }
            set 
            {
                if (_partId != value)
                {
                    _partId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Name of the configuration, max 50 characters</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Free form description of the configuration, max 2048 characters</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Ids for the part supports used in the configuration</summary>
        [Newtonsoft.Json.JsonProperty("partSupportIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<int> PartSupportIds
        {
            get { return _partSupportIds; }
            set 
            {
                if (_partSupportIds != value)
                {
                    _partSupportIds = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PartSupportConfigurationPost FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupportConfigurationPost>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PartSupportSection : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private int _partSupportConfigurationId;
        private int _partSupportId;
        private PartSupport _partSupport;
    
        /// <summary>Id of the section</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of the related configuration</summary>
        [Newtonsoft.Json.JsonProperty("partSupportConfigurationId", Required = Newtonsoft.Json.Required.Always)]
        public int PartSupportConfigurationId
        {
            get { return _partSupportConfigurationId; }
            set 
            {
                if (_partSupportConfigurationId != value)
                {
                    _partSupportConfigurationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of the selected support</summary>
        [Newtonsoft.Json.JsonProperty("partSupportId", Required = Newtonsoft.Json.Required.Always)]
        public int PartSupportId
        {
            get { return _partSupportId; }
            set 
            {
                if (_partSupportId != value)
                {
                    _partSupportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("partSupport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartSupport PartSupport
        {
            get { return _partSupport; }
            set 
            {
                if (_partSupport != value)
                {
                    _partSupport = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PartSupportSection FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartSupportSection>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MicrostructureSimulationParameters : System.ComponentModel.INotifyPropertyChanged
    {
        private double _geometryWidth;
        private double _geometryLength;
        private double _geometryHeight;
        private System.Collections.ObjectModel.ObservableCollection<double> _startingLayerAngleValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _layerRotationAngleValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _layerThicknessValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _laserWattageValues;
        private System.Collections.ObjectModel.ObservableCollection<double> _scanSpeedValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _hatchSpacingValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _slicingStripeWidthValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _heaterTemperatureValues;
        private System.Collections.ObjectModel.ObservableCollection<MicrostructureSensor> _microstructureSensors = new System.Collections.ObjectModel.ObservableCollection<MicrostructureSensor>();
        private bool _userProvidedThermalData;
        private long? _randomSeed;
        private double _beamDiameter;
    
        /// <summary>Width of part geometry, 0.001 to 0.01 meters</summary>
        [Newtonsoft.Json.JsonProperty("geometryWidth", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double GeometryWidth
        {
            get { return _geometryWidth; }
            set 
            {
                if (_geometryWidth != value)
                {
                    _geometryWidth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Length of part geometry, 0.001 to 0.01 meters</summary>
        [Newtonsoft.Json.JsonProperty("geometryLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double GeometryLength
        {
            get { return _geometryLength; }
            set 
            {
                if (_geometryLength != value)
                {
                    _geometryLength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Height of part geometry, 0.001 to 0.01 meters</summary>
        [Newtonsoft.Json.JsonProperty("geometryHeight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double GeometryHeight
        {
            get { return _geometryHeight; }
            set 
            {
                if (_geometryHeight != value)
                {
                    _geometryHeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of starting layer angles to simulate across. Each value must be 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("startingLayerAngleValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> StartingLayerAngleValues
        {
            get { return _startingLayerAngleValues; }
            set 
            {
                if (_startingLayerAngleValues != value)
                {
                    _startingLayerAngleValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of layer rotation angles to simulate across. Each value must be 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("layerRotationAngleValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LayerRotationAngleValues
        {
            get { return _layerRotationAngleValues; }
            set 
            {
                if (_layerRotationAngleValues != value)
                {
                    _layerRotationAngleValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of powder deposit layer thickness values to simulate across. Each value must be 0.00001 to 0.0001 meters</summary>
        [Newtonsoft.Json.JsonProperty("layerThicknessValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LayerThicknessValues
        {
            get { return _layerThicknessValues; }
            set 
            {
                if (_layerThicknessValues != value)
                {
                    _layerThicknessValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of laser power values to simulate across. Each value must be 10 to 1000 watts</summary>
        [Newtonsoft.Json.JsonProperty("laserWattageValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> LaserWattageValues
        {
            get { return _laserWattageValues; }
            set 
            {
                if (_laserWattageValues != value)
                {
                    _laserWattageValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of scan speed values to simulate across. Each value must be 0.01 to 10 meters/second</summary>
        [Newtonsoft.Json.JsonProperty("scanSpeedValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> ScanSpeedValues
        {
            get { return _scanSpeedValues; }
            set 
            {
                if (_scanSpeedValues != value)
                {
                    _scanSpeedValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of hatch spacing values to simulate across. Each value must be 0.00001 to 0.001 meters</summary>
        [Newtonsoft.Json.JsonProperty("hatchSpacingValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> HatchSpacingValues
        {
            get { return _hatchSpacingValues; }
            set 
            {
                if (_hatchSpacingValues != value)
                {
                    _hatchSpacingValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of slicing strip width values to simulate across. Each value must be 0 to 0.1 meters. A value of 0 indicates no striping.</summary>
        [Newtonsoft.Json.JsonProperty("slicingStripeWidthValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> SlicingStripeWidthValues
        {
            get { return _slicingStripeWidthValues; }
            set 
            {
                if (_slicingStripeWidthValues != value)
                {
                    _slicingStripeWidthValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of printer heater temperature values in degrees kelvin. Each value must be 293 and 474.</summary>
        [Newtonsoft.Json.JsonProperty("heaterTemperatureValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> HeaterTemperatureValues
        {
            get { return _heaterTemperatureValues; }
            set 
            {
                if (_heaterTemperatureValues != value)
                {
                    _heaterTemperatureValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>List of sensor locations within the part where the microstructure will be evaluated</summary>
        [Newtonsoft.Json.JsonProperty("microstructureSensors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<MicrostructureSensor> MicrostructureSensors
        {
            get { return _microstructureSensors; }
            set 
            {
                if (_microstructureSensors != value)
                {
                    _microstructureSensors = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>True if user is providing cooling rate, thermal gradient and melt pool dimensions for each sensor. False if thermal solver should calculate these values. See MicrostructureSensor.</summary>
        [Newtonsoft.Json.JsonProperty("userProvidedThermalData", Required = Newtonsoft.Json.Required.Always)]
        public bool UserProvidedThermalData
        {
            get { return _userProvidedThermalData; }
            set 
            {
                if (_userProvidedThermalData != value)
                {
                    _userProvidedThermalData = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Seed value used for random number generation. If not provided it will be auto-generated.</summary>
        [Newtonsoft.Json.JsonProperty("randomSeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 4294967295)]
        public long? RandomSeed
        {
            get { return _randomSeed; }
            set 
            {
                if (_randomSeed != value)
                {
                    _randomSeed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>diameter of laser beam in meters</summary>
        [Newtonsoft.Json.JsonProperty("beamDiameter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(8E-05D, 0.00012D)]
        public double BeamDiameter
        {
            get { return _beamDiameter; }
            set 
            {
                if (_beamDiameter != value)
                {
                    _beamDiameter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MicrostructureSimulationParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MicrostructureSimulationParameters>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Describes a cubic volume in which the microstructure will be evaluated</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MicrostructureSensor : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private int _simulationId;
        private string _label;
        private double _sensorDimensionLength;
        private double _sensorX;
        private double _sensorY;
        private double _sensorZ;
        private double? _coolingRate;
        private double? _thermalGradient;
        private double? _meltPoolWidth;
        private double? _meltPoolDepth;
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ID of simulation this sensor belongs to</summary>
        [Newtonsoft.Json.JsonProperty("simulationId", Required = Newtonsoft.Json.Required.Always)]
        public int SimulationId
        {
            get { return _simulationId; }
            set 
            {
                if (_simulationId != value)
                {
                    _simulationId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>User provided name of this sensor</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label
        {
            get { return _label; }
            set 
            {
                if (_label != value)
                {
                    _label = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Length of an edge of the sensor cube, 0.0001 to 0.001 meters</summary>
        [Newtonsoft.Json.JsonProperty("sensorDimensionLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double SensorDimensionLength
        {
            get { return _sensorDimensionLength; }
            set 
            {
                if (_sensorDimensionLength != value)
                {
                    _sensorDimensionLength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>X coordinate of center of the sensor volume in meters</summary>
        [Newtonsoft.Json.JsonProperty("sensorX", Required = Newtonsoft.Json.Required.Always)]
        public double SensorX
        {
            get { return _sensorX; }
            set 
            {
                if (_sensorX != value)
                {
                    _sensorX = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Y coordinate of center of the sensor volume in meters</summary>
        [Newtonsoft.Json.JsonProperty("sensorY", Required = Newtonsoft.Json.Required.Always)]
        public double SensorY
        {
            get { return _sensorY; }
            set 
            {
                if (_sensorY != value)
                {
                    _sensorY = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Z coordinate of center of the sensor volume in meters</summary>
        [Newtonsoft.Json.JsonProperty("sensorZ", Required = Newtonsoft.Json.Required.Always)]
        public double SensorZ
        {
            get { return _sensorZ; }
            set 
            {
                if (_sensorZ != value)
                {
                    _sensorZ = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Cooling rate of material in kelvin/sec. Only used when userProvidedThermalData is true on the simulation model.</summary>
        [Newtonsoft.Json.JsonProperty("coolingRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CoolingRate
        {
            get { return _coolingRate; }
            set 
            {
                if (_coolingRate != value)
                {
                    _coolingRate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Thermal gradient in kelvin/meter. Only used when userProvidedThermalData is true on the simulation model.</summary>
        [Newtonsoft.Json.JsonProperty("thermalGradient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ThermalGradient
        {
            get { return _thermalGradient; }
            set 
            {
                if (_thermalGradient != value)
                {
                    _thermalGradient = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Width of melt pool in meters. Only used when userProvidedThermalData is true on the simulation model.</summary>
        [Newtonsoft.Json.JsonProperty("meltPoolWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MeltPoolWidth
        {
            get { return _meltPoolWidth; }
            set 
            {
                if (_meltPoolWidth != value)
                {
                    _meltPoolWidth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Depth of melt pool in meters. Only used when userProvidedThermalData is true on the simulation model.</summary>
        [Newtonsoft.Json.JsonProperty("meltPoolDepth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MeltPoolDepth
        {
            get { return _meltPoolDepth; }
            set 
            {
                if (_meltPoolDepth != value)
                {
                    _meltPoolDepth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MicrostructureSensor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MicrostructureSensor>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MicrostructureSimulation : Simulation, System.ComponentModel.INotifyPropertyChanged
    {
        private double _geometryWidth;
        private double _geometryLength;
        private double _geometryHeight;
        private System.Collections.ObjectModel.ObservableCollection<double> _startingLayerAngleValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _layerRotationAngleValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _layerThicknessValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _laserWattageValues;
        private System.Collections.ObjectModel.ObservableCollection<double> _scanSpeedValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _hatchSpacingValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _slicingStripeWidthValues = new System.Collections.ObjectModel.ObservableCollection<double>();
        private System.Collections.ObjectModel.ObservableCollection<double> _heaterTemperatureValues;
        private System.Collections.ObjectModel.ObservableCollection<MicrostructureSensor> _microstructureSensors = new System.Collections.ObjectModel.ObservableCollection<MicrostructureSensor>();
        private bool _userProvidedThermalData;
        private long? _randomSeed;
        private double _beamDiameter;
    
        /// <summary>Width of part geometry, 0.001 to 0.01 meters</summary>
        [Newtonsoft.Json.JsonProperty("geometryWidth", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double GeometryWidth
        {
            get { return _geometryWidth; }
            set 
            {
                if (_geometryWidth != value)
                {
                    _geometryWidth = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Length of part geometry, 0.001 to 0.01 meters</summary>
        [Newtonsoft.Json.JsonProperty("geometryLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double GeometryLength
        {
            get { return _geometryLength; }
            set 
            {
                if (_geometryLength != value)
                {
                    _geometryLength = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Height of part geometry, 0.001 to 0.01 meters</summary>
        [Newtonsoft.Json.JsonProperty("geometryHeight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 0)]
        public double GeometryHeight
        {
            get { return _geometryHeight; }
            set 
            {
                if (_geometryHeight != value)
                {
                    _geometryHeight = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of starting layer angles to simulate across. Each value must be 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("startingLayerAngleValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> StartingLayerAngleValues
        {
            get { return _startingLayerAngleValues; }
            set 
            {
                if (_startingLayerAngleValues != value)
                {
                    _startingLayerAngleValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of layer rotation angles to simulate across. Each value must be 0 to 180 degrees</summary>
        [Newtonsoft.Json.JsonProperty("layerRotationAngleValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LayerRotationAngleValues
        {
            get { return _layerRotationAngleValues; }
            set 
            {
                if (_layerRotationAngleValues != value)
                {
                    _layerRotationAngleValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of powder deposit layer thickness values to simulate across. Each value must be 0.00001 to 0.0001 meters</summary>
        [Newtonsoft.Json.JsonProperty("layerThicknessValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> LayerThicknessValues
        {
            get { return _layerThicknessValues; }
            set 
            {
                if (_layerThicknessValues != value)
                {
                    _layerThicknessValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of laser power values to simulate across. Each value must be 10 to 1000 watts</summary>
        [Newtonsoft.Json.JsonProperty("laserWattageValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> LaserWattageValues
        {
            get { return _laserWattageValues; }
            set 
            {
                if (_laserWattageValues != value)
                {
                    _laserWattageValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of scan speed values to simulate across. Each value must be 0.01 to 10 meters/second</summary>
        [Newtonsoft.Json.JsonProperty("scanSpeedValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> ScanSpeedValues
        {
            get { return _scanSpeedValues; }
            set 
            {
                if (_scanSpeedValues != value)
                {
                    _scanSpeedValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of hatch spacing values to simulate across. Each value must be 0.00001 to 0.001 meters</summary>
        [Newtonsoft.Json.JsonProperty("hatchSpacingValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> HatchSpacingValues
        {
            get { return _hatchSpacingValues; }
            set 
            {
                if (_hatchSpacingValues != value)
                {
                    _hatchSpacingValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of slicing strip width values to simulate across. Each value must be 0 to 0.1 meters. A value of 0 indicates no striping.</summary>
        [Newtonsoft.Json.JsonProperty("slicingStripeWidthValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<double> SlicingStripeWidthValues
        {
            get { return _slicingStripeWidthValues; }
            set 
            {
                if (_slicingStripeWidthValues != value)
                {
                    _slicingStripeWidthValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Array of printer heater temperature values in degrees kelvin. Each value must be 293 and 474.</summary>
        [Newtonsoft.Json.JsonProperty("heaterTemperatureValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> HeaterTemperatureValues
        {
            get { return _heaterTemperatureValues; }
            set 
            {
                if (_heaterTemperatureValues != value)
                {
                    _heaterTemperatureValues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>List of sensor locations within the part where the microstructure will be evaluated</summary>
        [Newtonsoft.Json.JsonProperty("microstructureSensors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<MicrostructureSensor> MicrostructureSensors
        {
            get { return _microstructureSensors; }
            set 
            {
                if (_microstructureSensors != value)
                {
                    _microstructureSensors = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>True if user is providing cooling rate, thermal gradient and melt pool dimensions for each sensor. False if thermal solver should calculate these values. See MicrostructureSensor.</summary>
        [Newtonsoft.Json.JsonProperty("userProvidedThermalData", Required = Newtonsoft.Json.Required.Always)]
        public bool UserProvidedThermalData
        {
            get { return _userProvidedThermalData; }
            set 
            {
                if (_userProvidedThermalData != value)
                {
                    _userProvidedThermalData = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Seed value used for random number generation. If not provided it will be auto-generated.</summary>
        [Newtonsoft.Json.JsonProperty("randomSeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 4294967295)]
        public long? RandomSeed
        {
            get { return _randomSeed; }
            set 
            {
                if (_randomSeed != value)
                {
                    _randomSeed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>diameter of laser beam in meters</summary>
        [Newtonsoft.Json.JsonProperty("beamDiameter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(8E-05D, 0.00012D)]
        public double BeamDiameter
        {
            get { return _beamDiameter; }
            set 
            {
                if (_beamDiameter != value)
                {
                    _beamDiameter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MicrostructureSimulation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MicrostructureSimulation>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>If specified, will filter to only include parts with the given availability.  Uploaded - the part has been uploaded.  Processing - the part is being processed.  Available - the part was processed successfully and can be used in simulations.  Error - an error occurred, contact Ansys Support.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Availability
    {
        [System.Runtime.Serialization.EnumMember(Value = "Uploaded")]
        Uploaded = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Processing")]
        Processing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Available")]
        Available = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous2
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous3
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous4
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous5
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous6
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous7
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous8
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous9
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous10
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous11
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous12
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous13
    {
        [System.Runtime.Serialization.EnumMember(Value = "Uploaded")]
        Uploaded = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Processing")]
        Processing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Available")]
        Available = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous14
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous15
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SimulationActivityStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Waiting")]
        Waiting = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Running")]
        Running = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Finished")]
        Finished = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SimulationLogLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = "Info")]
        Info = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Trace")]
        Trace = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Warn")]
        Warn = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Status1
    {
        [System.Runtime.Serialization.EnumMember(Value = "okay")]
        Okay = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "problem")]
        Problem = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "slow")]
        Slow = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SimulationStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Requested")]
        Requested = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SingleBeadSimulationParametersBeadType
    {
        [System.Runtime.Serialization.EnumMember(Value = "OnPlate")]
        OnPlate = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "OnPowder")]
        OnPowder = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PartBasedSimulationParametersStressMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "LinearElastic")]
        LinearElastic = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "J2Plasticity")]
        J2Plasticity = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PartBasedSimulationParametersSupportType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Generated")]
        Generated = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UserDefined")]
        UserDefined = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PartBasedSimulationParametersLoadSteppingType
    {
        [System.Runtime.Serialization.EnumMember(Value = "DynamicLoadStepping")]
        DynamicLoadStepping = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "FixedLoadStepping")]
        FixedLoadStepping = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PartAvailability
    {
        [System.Runtime.Serialization.EnumMember(Value = "Uploaded")]
        Uploaded = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Processing")]
        Processing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Available")]
        Available = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PatchDocumentOp
    {
        [System.Runtime.Serialization.EnumMember(Value = "add")]
        Add = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "remove")]
        Remove = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "replace")]
        Replace = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "move")]
        Move = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "copy")]
        Copy = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "test")]
        Test = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SelectedPointSensorType
    {
        [System.Runtime.Serialization.EnumMember(Value = "PrintRite")]
        PrintRite = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BuildFileAvailability
    {
        [System.Runtime.Serialization.EnumMember(Value = "Uploaded")]
        Uploaded = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Processing")]
        Processing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Available")]
        Available = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BuildFileMachineType
    {
        [System.Runtime.Serialization.EnumMember(Value = "AdditiveIndustries")]
        AdditiveIndustries = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Renishaw")]
        Renishaw = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SLM")]
        SLM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ThreeDSystems")]
        ThreeDSystems = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "EOS")]
        EOS = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BuildFileSupportSupportType
    {
        [System.Runtime.Serialization.EnumMember(Value = "ThinWall")]
        ThinWall = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Watertight")]
        Watertight = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PartSupportAvailability
    {
        [System.Runtime.Serialization.EnumMember(Value = "Uploaded")]
        Uploaded = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Processing")]
        Processing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Available")]
        Available = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.6.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PartSupportSupportType
    {
        [System.Runtime.Serialization.EnumMember(Value = "ThinWall")]
        ThinWall = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Watertight")]
        Watertight = 1,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.7.0 (NJsonSchema v9.10.6.0 (Newtonsoft.Json v9.0.0.0))")]
    public class FileParameter
    {
        public FileParameter(System.IO.Stream data) 
            : this (data, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
        {
            Data = data;
            FileName = fileName;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.7.0 (NJsonSchema v9.10.6.0 (Newtonsoft.Json v9.0.0.0))")]
    public class SwaggerException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.7.0 (NJsonSchema v9.10.6.0 (Newtonsoft.Json v9.0.0.0))")]
    public class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}